%!PS-Adobe-2.0
%%Creator: dvips(k) 5.78 Copyright 1998 Radical Eye Software (www.radicaleye.com)
%%Title: impl.dvi
%%Pages: 17
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: Times-Bold Times-Italic Times-Roman RMTMI MTSY
%%+ Times-BoldItalic
%%EndComments
%DVIPSCommandLine: dvips impl
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 1999.04.29:1108
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin /N{def}def /B{bind def}N /S{exch}N
/X{S N}B /TR{translate}N /isls false N /vsize 11 72 mul N /hsize 8.5 72
mul N /landplus90{false}def /@rigin{isls{[0 landplus90{1 -1}{-1 1}
ifelse 0 0 0]concat}if 72 Resolution div 72 VResolution div neg scale
isls{landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div
hsize mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul
TR[matrix currentmatrix{dup dup round sub abs 0.00001 lt{round}if}
forall round exch round exch]setmatrix}N /@landscape{/isls true N}B
/@manualfeed{statusdict /manualfeed true put}B /@copies{/#copies X}B
/FMat[1 0 0 -1 0 0]N /FBB[0 0 0 0]N /nn 0 N /IE 0 N /ctr 0 N /df-tail{
/nn 8 dict N nn begin /FontType 3 N /FontMatrix fntrx N /FontBBox FBB N
string /base X array /BitMaps X /BuildChar{CharBuilder}N /Encoding IE N
end dup{/foo setfont}2 array copy cvx N load 0 nn put /ctr 0 N[}B /df{
/sf 1 N /fntrx FMat N df-tail}B /dfs{div /sf X /fntrx[sf 0 0 sf neg 0 0]
N df-tail}B /E{pop nn dup definefont setfont}B /ch-width{ch-data dup
length 5 sub get}B /ch-height{ch-data dup length 4 sub get}B /ch-xoff{
128 ch-data dup length 3 sub get sub}B /ch-yoff{ch-data dup length 2 sub
get 127 sub}B /ch-dx{ch-data dup length 1 sub get}B /ch-image{ch-data
dup type /stringtype ne{ctr get /ctr ctr 1 add N}if}B /id 0 N /rw 0 N
/rc 0 N /gp 0 N /cp 0 N /G 0 N /sf 0 N /CharBuilder{save 3 1 roll S dup
/base get 2 index get S /BitMaps get S get /ch-data X pop /ctr 0 N ch-dx
0 ch-xoff ch-yoff ch-height sub ch-xoff ch-width add ch-yoff
setcachedevice ch-width ch-height true[1 0 0 -1 -.1 ch-xoff sub ch-yoff
.1 sub]/id ch-image N /rw ch-width 7 add 8 idiv string N /rc 0 N /gp 0 N
/cp 0 N{rc 0 ne{rc 1 sub /rc X rw}{G}ifelse}imagemask restore}B /G{{id
gp get /gp gp 1 add N dup 18 mod S 18 idiv pl S get exec}loop}B /adv{cp
add /cp X}B /chg{rw cp id gp 4 index getinterval putinterval dup gp add
/gp X adv}B /nd{/cp 0 N rw exit}B /lsh{rw cp 2 copy get dup 0 eq{pop 1}{
dup 255 eq{pop 254}{dup dup add 255 and S 1 and or}ifelse}ifelse put 1
adv}B /rsh{rw cp 2 copy get dup 0 eq{pop 128}{dup 255 eq{pop 127}{dup 2
idiv S 128 and or}ifelse}ifelse put 1 adv}B /clr{rw cp 2 index string
putinterval adv}B /set{rw cp fillstr 0 4 index getinterval putinterval
adv}B /fillstr 18 string 0 1 17{2 copy 255 put pop}for N /pl[{adv 1 chg}
{adv 1 chg nd}{1 add chg}{1 add chg nd}{adv lsh}{adv lsh nd}{adv rsh}{
adv rsh nd}{1 add adv}{/rc X nd}{1 add set}{1 add clr}{adv 2 chg}{adv 2
chg nd}{pop nd}]dup{bind pop}forall N /D{/cc X dup type /stringtype ne{]
}if nn /base get cc ctr put nn /BitMaps get S ctr S sf 1 ne{dup dup
length 1 sub dup 2 index S get sf div put}if put /ctr ctr 1 add N}B /I{
cc 1 add D}B /bop{userdict /bop-hook known{bop-hook}if /SI save N @rigin
0 0 moveto /V matrix currentmatrix dup 1 get dup mul exch 0 get dup mul
add .99 lt{/QV}{/RV}ifelse load def pop pop}N /eop{SI restore userdict
/eop-hook known{eop-hook}if showpage}N /@start{userdict /start-hook
known{start-hook}if pop /VResolution X /Resolution X 1000 div /DVImag X
/IE 256 array N 2 string 0 1 255{IE S dup 360 add 36 4 index cvrs cvn
put}for pop 65781.76 div /vsize X 65781.76 div /hsize X}N /p{show}N
/RMat[1 0 0 -1 0 0]N /BDot 260 string N /rulex 0 N /ruley 0 N /v{/ruley
X /rulex X V}B /V{}B /RV statusdict begin /product where{pop false[
(Display)(NeXT)(LaserWriter 16/600)]{dup length product length le{dup
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale rulex ruley false
RMat{BDot}imagemask grestore}}{{gsave TR -.1 .1 TR rulex ruley scale 1 1
false RMat{BDot}imagemask grestore}}ifelse B /QV{gsave newpath transform
round exch round exch itransform moveto rulex 0 rlineto 0 ruley neg
rlineto rulex neg 0 rlineto fill grestore}B /a{moveto}B /delta 0 N /tail
{dup /delta X 0 rmoveto}B /M{S p delta add tail}B /b{S p tail}B /c{-4 M}
B /d{-3 M}B /e{-2 M}B /f{-1 M}B /g{0 M}B /h{1 M}B /i{2 M}B /j{3 M}B /k{
4 M}B /w{0 rmoveto}B /l{p -4 w}B /m{p -3 w}B /n{p -2 w}B /o{p -1 w}B /q{
p 1 w}B /r{p 2 w}B /s{p 3 w}B /t{p 4 w}B /x{0 S rmoveto}B /y{3 2 roll p
a}B /bos{/SS save N}B /eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For copying restrictions, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks 97 - Version 97, 93/05/07.
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    (P) 0 get /BoldPentagon put
  /Metrics 13 dict def
  Metrics begin
    /Bullet 1000 def
    /Circle 1000 def
    /BoldCircle 1000 def
    /SolidTriangle 1344 def
    /Triangle 1344 def
    /BoldTriangle 1344 def
    /SolidSquare 886 def
    /Square 886 def
    /BoldSquare 886 def
    /SolidPentagon 1093.2 def
    /Pentagon 1093.2 def
    /BoldPentagon 1093.2 def
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle { -550 -550 550 550 } def
    /BoldCircle /Circle load def
    /Bullet /Circle load def
    /Triangle { -571.5 -330 571.5 660 } def
    /BoldTriangle /Triangle load def
    /SolidTriangle /Triangle load def
    /Square { -450 -450 450 450 } def
    /BoldSquare /Square load def
    /SolidSquare /Square load def
    /Pentagon { -546.6 -465 546.6 574.7 } def
    /BoldPentagon /Pentagon load def
    /SolidPentagon /Pentagon load def
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath { 0 0 500 0 360 arc closepath } def
    /Bullet { 500 500 Adjust CirclePath fill } def
    /Circle { 500 500 Adjust CirclePath .9 .9 scale CirclePath eofill } def
    /BoldCircle { 500 500 Adjust CirclePath .8 .8 scale CirclePath eofill } def
    /BoldCircle { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath {
      0  660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath
    } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath {
      -450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
      closepath
    } def
    /SolidSquare { SquarePath fill } def
    /Square { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon { PentagonPath .78 .78 scale PentagonPath eofill } def
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
% END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For copying restrictions, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: 8r.enc
% @@psencodingfile@{
%   author = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry",
%   version = "0.6",
%   date = "22 June 1996",
%   filename = "8r.enc",
%   email = "kb@@mail.tug.org",
%   address = "135 Center Hill Rd. // Plymouth, MA 02360",
%   codetable = "ISO/ASCII",
%   checksum = "119     662    4424",
%   docstring = "Encoding for TrueType or Type 1 fonts to be used with TeX."
% @}
% 
% Idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard Encoding + ISO Latin 1 + extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% 
% (4) Remaining positions left undefined are for use in (hopefully)
% upward-compatible revisions, if someday more characters are generally
% available.
% 
% (5) hyphen appears twice for compatibility with both ASCII and Windows.
% 
/TeXBase1Encoding [
% 0x00 (encoded characters from Adobe Standard not in Windows 3.1)
  /.notdef /dotaccent /fi /fl
  /fraction /hungarumlaut /Lslash /lslash
  /ogonek /ring /.notdef
  /breve /minus /.notdef 
% These are the only two remaining unencoded characters, so may as
% well include them.
  /Zcaron /zcaron 
% 0x10
 /caron /dotlessi 
% (unusual TeX characters available in, e.g., Lucida Bright)
 /dotlessj /ff /ffi /ffl 
 /.notdef /.notdef /.notdef /.notdef
 /.notdef /.notdef /.notdef /.notdef
 % very contentious; it's so painful not having quoteleft and quoteright
 % at 96 and 145 that we move the things normally found there down to here.
 /grave /quotesingle 
% 0x20 (ASCII begins)
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three /four /five /six /seven
 /eight /nine /colon /semicolon /less /equal /greater /question
% 0x40
 /at /A /B /C /D /E /F /G /H /I /J /K /L /M /N /O
% 0x50
 /P /Q /R /S /T /U /V /W
 /X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o
% 0x70
 /p /q /r /s /t /u /v /w
 /x /y /z /braceleft /bar /braceright /asciitilde
 /.notdef % rubout; ASCII ends
% 0x80
 /.notdef /.notdef /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /.notdef /.notdef /.notdef
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /.notdef /.notdef /Ydieresis
% 0xA0
 /.notdef % nobreakspace
 /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot
 /hyphen % Y&Y (also at 45); Windows' softhyphen
 /registered
 /macron
% 0xD0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def

%%EndProcSet
%%BeginProcSet: texps.pro
%!
TeXDict begin /rf{findfont dup length 1 add dict begin{1 index /FID ne 2
index /UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]/Metrics
exch def dict begin Encoding{exch dup type /integertype ne{pop pop 1 sub
dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get div def}
ifelse}forall Metrics /Metrics currentdict end def[2 index currentdict
end definefont 3 -1 roll makefont /setfont cvx]cvx def}def /ObliqueSlant
{dup sin S cos div neg}B /SlantFont{4 index mul add}def /ExtendFont{3 -1
roll mul exch}def /ReEncodeFont{/Encoding exch def}def end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin /SDict 200 dict N SDict begin /@SpecialDefaults{/hs 612 N
/vs 792 N /ho 0 N /vo 0 N /hsc 1 N /vsc 1 N /ang 0 N /CLIP 0 N /rwiSeen
false N /rhiSeen false N /letter{}N /note{}N /a4{}N /legal{}N}B
/@scaleunit 100 N /@hscale{@scaleunit div /hsc X}B /@vscale{@scaleunit
div /vsc X}B /@hsize{/hs X /CLIP 1 N}B /@vsize{/vs X /CLIP 1 N}B /@clip{
/CLIP 2 N}B /@hoffset{/ho X}B /@voffset{/vo X}B /@angle{/ang X}B /@rwi{
10 div /rwi X /rwiSeen true N}B /@rhi{10 div /rhi X /rhiSeen true N}B
/@llx{/llx X}B /@lly{/lly X}B /@urx{/urx X}B /@ury{/ury X}B /magscale
true def end /@MacSetUp{userdict /md known{userdict /md get type
/dicttype eq{userdict begin md length 10 add md maxlength ge{/md md dup
length 20 add dict copy def}if end md begin /letter{}N /note{}N /legal{}
N /od{txpose 1 0 mtx defaultmatrix dtransform S atan/pa X newpath
clippath mark{transform{itransform moveto}}{transform{itransform lineto}
}{6 -2 roll transform 6 -2 roll transform 6 -2 roll transform{
itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll curveto}}{{
closepath}}pathforall newpath counttomark array astore /gc xdf pop ct 39
0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}if}N
/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1 -1
scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3 get
ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip yflip
not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub neg 0
TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{noflips{TR
pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop 90 rotate 1
-1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg
TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr 1 get neg
sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr 2 get ppr
0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4 -1 roll add
2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S TR}if}N /cp
{pop pop showpage pm restore}N end}if}if}N /normalscale{Resolution 72
div VResolution 72 div neg scale magscale{DVImag dup scale}if 0 setgray}
N /psfts{S 65781.76 div N}N /startTexFig{/psf$SavedState save N userdict
maxlength dict begin /magscale true def normalscale currentpoint TR
/psf$ury psfts /psf$urx psfts /psf$lly psfts /psf$llx psfts /psf$y psfts
/psf$x psfts currentpoint /psf$cy X /psf$cx X /psf$sx psf$x psf$urx
psf$llx sub div N /psf$sy psf$y psf$ury psf$lly sub div N psf$sx psf$sy
scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub TR
/showpage{}N /erasepage{}N /copypage{}N /p 3 def @MacSetUp}N /doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N /endTexFig{end psf$SavedState restore}N /@beginspecial{SDict
begin /SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count /ocount X /dcount countdictstack N}N /@setspecial
{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if /showpage{}N /erasepage{}N /copypage{}N newpath
}N /@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{
end}repeat grestore SpecialSave restore end}N /@defspecial{SDict begin}
N /@fedspecial{end}B /li{lineto}B /rl{rlineto}B /rc{rcurveto}B /np{
/SaveX currentpoint /SaveY X N 1 setlinecap newpath}N /st{stroke SaveX
SaveY moveto}N /fil{fill SaveX SaveY moveto}N /ellipse{/endangle X
/startangle X /yrad X /xrad X /savematrix matrix currentmatrix N TR xrad
yrad scale 0 0 1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginFont: RMTMI
%!PS-AdobeFont-1.1: RMTMI 1.1
%%CreationDate: 1993 May 10 16:52:31

% Copyright (c) 1992, 1993 The TeXplorators Corporation
% Hinting Copyright (c) 1992, 1993 Y&Y, Inc.

11 dict begin
/FontInfo 9 dict dup begin
/version (1.1) readonly def
/Notice (Copyright (C) 1992, 1993 The TeXplorators Corporation) readonly def
/FullName (RMTMI) readonly def
/FamilyName (MathTime) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.036 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /RMTMI def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /alpha put
dup 46 /parenleft put
dup 47 /parenright put
dup 56 /Phi1 put
dup 58 /period put
dup 59 /comma put
dup 60 /less put
dup 61 /slash put
dup 62 /greater put
dup 118 /v put
dup 119 /w put
readonly def
/FontBBox{0 -213 987 680}readonly def
/UniqueID 5018946 def
currentdict end
currentfile eexec
80347982ab3942d930e069a70d0d48311d70c1e2528f01045f8caec9829f31d6
48c8d0a29ea851af41c327a0d569abaafe5afe94dad818c312d3cee72f1acea0
b701b6a5608521a2866790bdd5776d6cd0c7d971b9a48b96aa970dcbb8b76edc
b90da356dc2529b665eb4bb80ac4f5b0f4c0ed76861e399638ad3db1be4759c7
8d4f2e81a2ff688d366b91d729d63ab5fc9556fe10a07b81904d879a7446da82
dc107ff41b0e3b7c2245d57b2ee9bab31eccfe9b79e3ec32cb1f10c622f4bce1
8df0e5c4b98ec714593d6f127c5cf6d719a79b83c627433d3aa39cb88ef85d27
4184c4b4c46ca5b496f20460ed75ccfb3d66073b710cc1ad2f2bec4ac64065ed
5e03930ed9ec97810f36845dd5048d90d724a88fd3c814ce17c417c84ba45c43
f5569a4d73739f71544ed91c657705e131f4d0c61752509fbe0212bde9c02a83
3910dff28f7c53f64b032c8e3cd2ba95c22177c3e0532f8699d106f119b80549
c45726d793b9aec38ff4c3120c259083fd13c644dea026e1e7c75dea2ec23419
83aff4d712c27c024393022797db1500c6543d620f20c9ce973ef7d917e7fb3e
6cfee0999e06c9dfff2d01bac5b3be0c47b2d5abc02e1f0f383588f430fa64bf
d5250e56da323c91f033c8f0f4e0f9cbb36eb8d4d25b127fda1bb032a7088cf6
fb34b617290de038198297f2af323602e5e96d475e4678e129d88aa15d5ad9cb
58e244028cd8d9a8210fb1aecfc3f29299986c1df1cb3ffa0fc203626e8e2f6f
3a6ab198963acb2b528d6bc06687d59efddb9c88535c1c69da5d81812b911c5e
f9985179796d2b2e4e92beec47a4075e306c8d26431d8e0732768dff70ef2270
d1fddddd4cca0f209ad05c9af2f26da7ca0acccdac0ea4f479b548c741193594
d515f614bda3f394c77bd7296981ac947ca0d6d6ccafd9a05547b28f0ce449ff
bde2744249af134a1d3629edfec122c615e4a74067a7f8358519bfac0f31d1a4
6d260a3db271750d02cd6a12d019ab6c1c2f9955ca205f12d8a03de3203bb5eb
869ed8b66b53d1c29eaa26b4d20f9460891b018031bf81eba788b77ccccc5ff9
9acb5b025a4dcbafafc1b34bb2adbd17cdd741da586af1b784cf74cf88603b20
d68afab47d21c1a0c6bee297777db1a8231237a40ec89aa97ce1c848c9da6804
d3b98c11590b239616e0e6d668fc5b987075d77769eaf4877f1a359217b40731
293574eae905bd7a5c46719ec7f8a97fac1c46dcd76b0344e8378fd61d02c990
5b194613df280648e2f86ef15a2dd8e6bec1cac0d90b8302b2846127b2d50d8f
fb7d210c7826fde88f2d165fa6afd755db04910140e070126a663f3d57ea417e
d6d2128bf21a7cc2911f8bf0f2668eadbe8e042a1cdcea38c5c9a71226f6f4ed
bc85ddf8c25d80933a42f5f303e5495c247e973df20e2195b07b60657205de14
9d86dbd56bb2594fea81688f21573a8210f6fbf48c82425bf58215b3d91d3255
012f7b2bc17357bfb35cd40b0c1d5536cde7bd0b29dea7674b32bc83cb453bbf
76807cf4a5aeece57fae3d291ae50098b85e357e9606694fcfe15cc48406012b
f12efcea89892d1811b5ef93abad0e929160090fad55766535e605ecb8381777
df5a2ac4a3e332a7e1b7ab9713a37619293bc7c8a69652ee28e50071a5d46c20
9d48e873d75b1c980fe488f8bb142bd1993ef79e988e9db967c5d0f438904bb9
43cbed9f6de937b6949c66ce7f12d6b4b708f818b1f1a690dfc2403014738048
55a6f009b04a7acb7b41191970c0f0e81dbef65787758d1ec8cf7f0bd32cfac7
ff3740e5c09934e72a666af611c0f78af2ed7368df9b2817b4400f7f84211388
92f4850aaebf23b7cab5c58aefba27dcc16b968c75d6832014e571ec1ee2367b
148d75d9a93a375c05ddbeb100bb6879dfe121f2e4fdaa03b63001e2115f8d3e
2a25226745d82323fdc64ab72cfbb35ddacbac2600b6731b5f0be6d67c56781e
13cc077ecda099f5ce3a4b146c170492702a71cd8c22db451dac6c48ce19bb37
12e2251d0f97aeeed8d3d292b18129d7e8dfe4fe17d296ecd8b4f0b64dcd2b72
601e5c7bbed1d25c3340e57737c9619dcbe2332331104812ada620ce6f52e760
e6af86e00005ad39d1a6fdbe5b3d84b6961c17e254952ce4b899502be9d890a8
70df487e31c30f6e749546ee718d53ea5e4ac20e3d8b1d4f9ae187e91b17a445
4982534cb8c1e8ed0799e2e459b82a6314aa317a53726dfb71ae392b2d3c19ba
455ab43b463a500d76c20956f895530c9bb98e7edef8bad056149948db6094e0
be857569fa92d423f012fe8290bcaf0edeea241f874176f3f697f3b3b7fe6282
5b3d7c393b1436ad3d9b6de580f406dec3e3e3270025483d3abc753a915696f1
2e942f49c24f9a90bb7b69adfa0a3454193a1cd04c9125de8442da144bc28088
9a888da8436c92be9561049f3f8f2dc316afdc4757c9308b325d9797f37a3a45
c6ce62cea40cd4c04d5715b9bef35dfa8d4f2faf794e3ee626d0046e74e2eb00
71729e006152b33ab6aac855cf35ccec4772c970432cbb5afcf7fecb1477b2f9
09d02d8dfcf015ef3180fc7613727deb131364d1a94b649e684dea7cc44341fe
81ddc97062e87d66c8c0247f4c75e388888f76a650ef660a61aca8b7e0cf44d6
2a582a3cd85d46c84c39de22ebff3567d4aa72bd93882835e6a63ae393a7a054
7527792806fdc4b1a8a80cdde76df3bdee7fcdada4891aec7ae25b1e5413c6c0
6baa14fef1caf668f20499c40af21ab6e4f996ed62ff90a71d8f321ea9cab966
c0f8d4c753a6d5a44652630a097b69ce7c351a9ba0b1b3a1ce7765424f10bd99
dd26f031461f66cfa5bb2f9156249279356b752884e2b5c020d6d966afd3a40c
8c8e1cd13112d028c558b8522e2e3d32d0d766623ae059f2447976eefb33ce9b
3bff461f6674f28e860f4d9a56e32bd23e409fc5aeb091f796c1bde295057e8d
d9e9e349fe7734293d97d1b365999444bf1669f2ea77da83d491625e9b55c769
397fa8654eb98a3651cd674d06d2dce744dc1d446f179c48c83f71cacc95ef4a
c0052c8c440378a6e7f6a4f0f92dfc69a117818b1d9e7c17884b243d1b91cdca
47a89aeb4dec626e6a758ea39184bdfca371768f184752e8e2bcb064821fa2df
cff86487d08efc51a36d590f89b4b8e8fe13ea352f8a34918514616e05443df3
fab5a013c437e856cc59c0dc5f4e5fb59c3c151804bcd2ae94c94d4fa38c36df
f048179610e78a469d42cdfe6391e81acc3bdf04a05761ebcab125b1f903f2f1
291ae45463ee0711a5eb2c85f7246f1cb84cfbfbe4b8b3463db9a271eb7b0700
bcc4130f6c11e193053b7d2a0d718dc5b6175dc051245e686a9da2be425fec71
eebad54774c32d1450a2f33a9c360b55556d3399dcf1a8255becb283a85b65d2
c0af612ccc2df6bf27a30874f31a386a7c633b8438be48963fed79d857b8d3fe
fb90d431833235a30cca382b6f5fe2878673cad1d0dc20f89b1c5a82a80f2c9a
624b57ad403c4951d2c0d752999c433f8ee40be4f45e3580be85af52b5a7a38e
4343239572ff2f28ea3bdf30dfa18b906d907ffc60e1e7d1f8feb1748a01aa38
4a28a01e5f530cdd330eb4ac0c80f57e1ca5d9915c9663a4b7da03bb967211c9
611c3c32cddac679200f9c7dea1cd0935aa509661fc10e3bcb201d5d1b389f54
f5d5b16f8e0190ddc7442e899bd9d0dec2e7c447b9c4f3abf171f93d7cdf75e0
8d1895e69326e970760c4764d4406cdf2120b25cd87c0e6c71f0699cc303e0bd
64bc8875b5e513b2a8a0a9d5e72210b320c6079a76ed77cf04f57294dab3e995
64cce8909094c1c948c3fa7243aa1b1995767d7c5202de0b630fb7467beaf2c0
aacddcb88c7be4e25dd661980eb7125fb46909d6f2f498d5cb75de9e1d024d36
7b15b39f74110ffcd6d0e8cb1c29bb08db2640007c46d47f0d16a6732c2e36ed
c0ba191f3f1eecc628ffcc9217a9f31694cec30accf6ba00624ec5002b493267
241dc16ba5e153ef5ae08db3f281483744ee906cb4f3e1a06e799487c50385d3
c38bfcaac9bf900a8a6a2b44b1cab4f3af5e81dc2f49ccd605d7cd688b163a3c
3f302196862ac08444854dc663b6846861148c7b07b0c865455796196434efa1
f3aafdbb5e4199bee390d7ed15a6c3f6f601281a122e33e19ca1c1448cbde803
c02b89832913ee5081c62b14f1c3b5939eb05792761c3cc9b5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark

%%EndFont 
%%BeginFont: MTSY
%!PS-AdobeFont-1.1: MTSY 1.1
%%CreationDate: 1993 May 30 16:26:28

% Copyright (c) 1992, 1993 The TeXplorators Corporation
% Hinting Copyright (c) 1992, 1993 Y&Y, Inc.

% MathTime is a trademark of The TeXplorators Corporation

11 dict begin
/FontInfo 9 dict dup begin
/version (1.1) readonly def
/Notice (Copyright (C) 1992, 1993 The TeXplorators Corporation. Hinting (c) 1992, 1993 Y&Y, Inc. (508) 371-3286. All Rights Reserved.) readonly def
/FullName (MTSY) readonly def
/FamilyName (MathTime) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /MTSY def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
dup 1 /periodcentered put
dup 3 /asteriskmath put
dup 15 /bullet put
dup 20 /lessequal put
dup 21 /greaterequal put
dup 24 /similar put
dup 28 /lessmuch put
dup 67 /plus put
dup 68 /equal put
dup 73 /semicolon put
dup 104 /angbracketleft put
dup 105 /angbracketright put
dup 112 /radical put
readonly def
/FontBBox{0 -954 1043 796}readonly def
/UniqueID 5018947 def
currentdict end
currentfile eexec
80347982ab3942d930e069a70d0d48311d70c1e2528f01045f8caec9829f31d6
48c8d0a29ea851af41c327a0d569abaafe5afe94dad818c312d3cee72f1acea0
b701b6a5608521a2866790bdd5776d6cd0c7d971b9a48b96aa970dcbb8b76edc
b90da356dc2529b665eb4bb80ac4f5b0f4c0ed76861e399638ad3db1be4759c7
8d4f2e81a2ff688d366b91d729d63ab5fc9556fe10a07b81904d879a7446da82
dc107ff41b0e3b7c2245d57b2ee9bab31eccfe9b79e3ec32cb1f10c622f4bce1
8df0e5c4b98ec714593d6f127c5cf6d719a79b83c627433d3aa39cb88ef85d27
4184c4b4c46ca5b496f20460ed75ccfb3d66073b710cc1ad2f2bec4ac64065ed
5e03930ed9ec97810f36845dd5048d90d724a88fd3c814ce17c417c84ba45c43
f5569a4d73739f71544ed91c657705e131f4d0c61752509fbe0212bde9c02a83
3910dff28f7c53f64b032c8e3cd2ba95c22177c3e0532f8699d106f119b80549
c45726d793b9aec38ff4c3120c259083fd13c644dea026e1e7c75dea2ec23419
83aff4d712c27c024393022797db1500c6543d620f20c9ce973ef7d917e7fb3e
6cfee0999e06c9dfff2d01bac5b3be0c47b2d5abc02e1f0f383588f430fa64bf
d5250e56da323c91f033c8f0f4e0f9cbb36eb8d4d25b127fda1bb032a7088cf6
fb34b617290de038198297f2af323602e5e96d475e4678e129d88aa15d5ad9cb
58e244028cd8d9a8210fb1aecfc3f29299986c1df1cb3ffa0fc203626e8e2f6f
3a6ab198963acb2b528d6bc06687d59efddb9c88535c1c69da5d81812b911c5e
f9985179796d2b2e4e92beec47a4075e306c8d26431d8e0732768dff70ef2270
d1fddddd4cca0f209ad05c9af2f26da7ca0accc0349d5548000499bc9c0876fe
d2523328acef33a054372366461b58782ad0500752724b16b7f03004badcd45c
aaf63fd86581c6f687cf45e07421e28845a4fd59c427a175a40b224f3b74baa0
375ea820c46604b594ecf69b30cd9bbc45a8df09c2b5f1a80d55920bd624c6ce
9fab9e8e18f82feab210ddc23dcda3888900abf812d6e67d866db8f095b48bab
37870a6352f10094e8693e8ddc41fd9e80e70388aaa4d601fdd19951eee31525
7364c2c66ed7478fcc949da0ec1db9de229a99a96b20156ad92aa9e665af8324
1b2faa32ec9256bdbbca71cb75b2175040af428a00cbed6c9e46c296f9715616
bd4769232bc9ab74fc8f6e0226db7cb8a5404c7a8f8587664226e17f50142fc6
6cdd58e56dd2e15d50c2cf80b3599d18f095111bcb2ee0f757474668f96fa849
ded5359f6eb2de907bbbc9926e08bfefd826d1b831c333cd6a02a9eabef3cb16
875f23401dbc341ca0f408f15803a406018b0201c985b83d99eb41c571437a30
89cd8c17dfeed6dd67cd94b1515ae677629c3f2c0765ba674cc8efff65199d85
d8924dfb404b0d2443a9305b8092ed6a2c6917ab8ab2aa7594914c8508b77c3a
9ce90c35b946a50f53ac3d2c65597aba898fd72da2df5049f6891d0e099fc657
22786db2baabbeecd5df72f40e1c91973f58dae73d1f6a5bd998056b67cb8cd6
f2fbc2ab919425e978678b1f55401d321e654f5009a3028ffaf1293e7106d2af
6ce37974a6f860982d87aa9dd8759eb2b116a6997fa9ecfa50628840271f561b
f06769fc610d18814254328035a9fe969e9b1652a34ccb2064c44eeb27424b26
ca8c6f8cd2da1a8258b0be72a2111eccdc619cf92afed25998fa67d970997d66
d069946329a67e3027c7d52049fdc80e3f5943e4728d195114981b2940d0b453
be811a5bdde4368917db5fc343c5b8374f824b63653b2df7c0a44ec77f5542bc
cc7d3605eb98557505a116bbeb4c2b0b507e561be7415f20edee21ec114318a6
294aced55a535e0b2c2f9f4b44af87d26a57fc6f18f3f2cc185638f6e31ba29d
28453d6855d2844afe41c6709e48728a48b36a7977789b7c7b210d1ae9b7fc62
b8b00c729774a76b1975c70a3f5a97f804bfa298f45dccba56f807f0f9b84877
b13580b1d84c79107dbe9a5b37523867ec8371b1c33af732dc13089b240a945a
57a728178ff667c2137247d3f2d3607075e99b86982dbcd5a514df8d4aa9877e
91308ba52d6dae17db8d5f031d4486594af4abed94c06f3a5947c81a26bac4ef
117a6b274b883049ddf88d86aee9a0bcd5a152e94bc18d374f9a75fe113769a9
875696579cc4d548f7405062ac9884504a525f9c576092f30f7abf0fc499f061
edbc19e9b52f1132ef9701fd72986fa5b613d209344fe966e5e8e3492421ef26
43b37262b123a6c11dbc72ac7871ac9150832fc1c889ad7a14ef8153e2e41c3d
c326daf23b4d465f1d685353fc0d91af297b27f7f00fe9b67cac1ccca6188196
4a432dc46a9b01e14a7288df6e8f8d5f61c43745ee8cbf301aa31b9d0ca39845
1c51e83a8241dbb0f7d6d2df717abf131f1a91c802a86a1dc6e11cb131c78627
1b0778eb2ae3e5152c4a5879aaa567dfb264bf5cc491304525d71dbc1b27bc19
5ccb1c9785cda7f2e00fe56217ab178d4e254a90d556447c51c5dfb6701bb4e1
f2c05687d097e20ba401ac84ffea649c6a1981339f16a764f8ba89422d87b3e1
5338ea91630f3c02d4b49aa5902e708e1c07c98dcaeb40e716686b7ef1d07445
039fed38d859885469cea2e02437ac2acd4e74f8f24cbb757b3de7d28878cda5
7bb0601f08509b84e2a6b1547bb0b3d68da59b8d74b056147e0866fd904e6c6d
489c7ae59296ef6291f3a1f6a75f80cca1a0c6aacbdb77189f40f15d00b464cc
460447b2a3bff213da6efc3c4475c606f954cbdd86c98ecdb13c4fc1ff360f81
22fc7a9303989dbb35686123b6a939236bd87eb89f1713e6cfa501ae436156a7
7b52fb0de6dc58d6f663f941aff824eec4041073125fd04cdf09b7085567bbca
672fe5eb39160ba4bf2c364757c6641dcd63066c5926342d851c65a4babfe284
a82f8b9cc38380c4b24fa248812ea9c2002de6e2ab56fa4e0d40de7a5d973ada
4e52e41e8cefe544352db50141f151f6078c2a1ac61b923bb240a0fd098ed25f
409b2e7ff252fb2eff5beba3fe29c66bdb2b0e870bc30097f17233508b668040
a514ce311f658e346d7961b87468134c5836d0ff135ce6c568d74d2e2e66a77f
c654775ad175b29c06ac7697927960ea3a5ca079c92d3707040ecc646d8ce2fb
06c6ecc3f265a4d44602eb46124e260087333b38e1ce4ff54c6d0bba82bdb4ad
be4331ba81523d92e7681d29d0f3e3ecafff399aa3df6eb5aa2ab7b26d361c21
84e0047d148861736726f7530056f49b6c464490b7509d92e48cf7e3a9ad6a59
d112bf0536176197122cb32b67daf69f1ac6f78a96a873cb9f0cdcf22fb0ddea
9cec395646bdb7d64eb487c68f07ccfde76acd0f5583c7d6ca600ea0b82ac6f7
d093f9e9e8809175127e604606a85773f32ee96864556b198cd47bf2c19705f4
1ed103e4c1d77e6ac7025f7c7ea3146ba775019b8de2690c56b5ac72e7364e1a
c20b10d39275410d5b82e0e947df896f060c2c4a5c7dd244d2aca05acdf1ed13
0553b2d51c24f2cc5fcae84ae4021dd9024ad9c7ab341ecd71e30e3c2782ecf3
5c78f03fb4523d699a93cc65e3ec8d407d08f25ad95b46a3012bd311d56b5f5c
310b18d264a9e0ea28415f768ae95f5c0cba14e47e88eaf9ef051e65de7fc6df
54aa2ef9fe7c810f8c82fe6c703d6d64519c7aeb0ea8a18df3bd9a4da87563f1
6e13215256d421917c929e3c6b131a35c592c21a207caf78f1d9bd3b8558c1b1
111ca862ce46e068890ad527228bfb071d6a8e74b80effcb2e892f2a6cfccf7d
72461e64724abf465c4d8617fbce8899a4daa04a6f1168f70f91db5956aa0cf5
0b340b8e39b49066763b804ec64238b28133984bac1d5fb8c6af31c526687d98
9bbdd5696804eec204426c32314c575afea12f86316476d56e23fb55792c667d
09bb4629773112c407de64c877190eba806454559a02594cdc920d74ab0bcd1d
0365081ab2c3cd1e85da22b173dbd222405cb9fcadfc4a67c3aa9aa2ec57ca05
7aa4c3954f8a93
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark

%%EndFont 
TeXDict begin 39158280 55380996 1000 600 600 (impl.dvi)
@start /Fa 140[25 115[{ TeXBase1Encoding ReEncodeFont }1
63.0968 /Times-Italic rf
%DVIPSBitmapFont: Fb cmr10 10.95 1
/Fb 1 44 df<1506150FB3A9007FB912E0BA12F0A26C18E0C8000FC9FCB3A915063C3C7B
B447>43 D E
%EndDVIPSBitmapFont
/Fc 139[23 1[32 1[42 1[42 1[23 2[23 42 42 23 37 42 37
1[42 30[51 66[{}14 83.022 /Times-Italic rf /Fe 187[60
68[{}1 76.3802 /MTSY rf /Ff 231[68 24[{}1 87.1731 /MTSY
rf
%DVIPSBitmapFont: Fg line10 10 4
/Fg 4 73 df<1718173CA21778A217F0A2EE01E0A2EE03C0A2EE0780A2EE0F00A2161EA2
5EA25EA25EA24B5AA24B5AA24B5AA24BC7FCA2151EA25DA25DA25DA24A5AA24A5A14075D
4AC8FCA2141EA25CA25CA25CA2495AA2495AA2495AA249C9FCA2131EA25BA25BA25BA248
5AA2485AA2485AA248CAFCA2121EA25AA25AA25AA212602E5782D42A>1
D<1C0C1C3E1CFEF303FCF30FF0F33FC0F3FF00F203FCF20FF0F23FC008FFC7FCF103FCF1
0FF0F13FC007FFC8FCF003FCF00FF0F03FC006FFC9FCEF03FCEF0FF0EF3FC04DCAFCEE01
FCEE07F0EE1FE0EE7F80DB01FECBFCED07F8ED1FE0ED7F80DA01FECCFCEC07F8EC1FE0EC
7F80D901FECDFCEB07F8EB1FE0EB7F80D801FECEFCEA07F8EA1FE0EA7F8000FECFFC12F8
1260572E82AB53>8 D<1A181A3C1A7C1A781AF01901F103E0F107C01A80F10F0061193E
6119786118014E5A4E5A614EC7FC60183E6018786017014D5A4D5A604DC8FC5F173E5F17
785F16014C5A4C5A5F4CC9FC5E163E5E16785E15014B5A5E4B5A150F4BCAFC153E153C5D
15F84A5A4A5A5D4A5A140F4ACBFC143E143C5C14F8495A495A5C495A130F49CCFC133E13
3C5B13F8485A485A5B485A120F48CDFC123E123C5A12F85A1260465782D442>28
D<126012F812FEEA7F80EA1FE0EA07F8EA01FE38007F80EB1FE0EB07F8EB01FE9038007F
80EC1FE0EC07F8EC01FE9138007F80ED1FE0ED07F8ED01FE9238007F80EE1FE0EE07F0EE
01FCEE007FEF3FC0EF0FF0EF03FCEF00FFF03FC0F00FF0F003FCF000FFF13FC0F10FF0F1
03FCF100FFF23FC0F20FF0F203FCF200FFF33FC0F30FF0F303FCF300FE1C3E1C0C572E82
AB53>72 D E
%EndDVIPSBitmapFont
/Fh 134[42 3[46 28 1[37 46 46 42 46 4[23 46 1[28 37 46
37 46 42 41[42 3[42 1[42 42 45[46 2[{ TeXBase1Encoding ReEncodeFont }21
83.022 /Times-Bold rf /Fi 135[39 14[24 20[48 84[{}3 87.1731
/Times-Italic rf /Fj 208[33 33 46[{}2 87.1731 /RMTMI
rf /Fk 137[39 44 24 34 34 44 44 44 44 63 24 2[24 44 44
1[39 44 39 44 44 97[{ TeXBase1Encoding ReEncodeFont }19
87.1731 /Times-Italic rf /Fl 133[39 44 44 63 44 44 24
34 29 44 44 44 44 68 24 44 1[24 44 44 29 39 44 39 44
39 3[29 1[29 3[82 1[63 53 48 5[77 53 2[29 63 2[53 63
58 1[63 1[39 4[24 2[44 44 44 44 44 44 44 2[22 29 22 5[68
35[48 2[{ TeXBase1Encoding ReEncodeFont }53 87.1731 /Times-Roman
rf /Fm 171[39 84[{}1 69.7384 /Times-Italic rf /Fo 182[25
69[36 3[{}2 69.7384 /MTSY rf /Fp 134[31 1[47 31 35 19
27 27 35 35 35 35 50 19 31 1[19 35 1[19 31 35 31 35 35
7[39 6[43 1[43 50 1[58 39 4[50 1[43 50 2[43 22[35 42[{
 TeXBase1Encoding ReEncodeFont }33 69.7384 /Times-Italic
rf /Fq 105[35 27[31 35 35 50 35 35 19 27 23 1[35 35 35
54 19 35 19 19 35 35 23 31 35 31 35 31 7[50 12[43 5[39
43 50 2[50 7[35 35 35 35 35 35 35 35 35 35 1[17 23 17
41[39 2[{ TeXBase1Encoding ReEncodeFont }46 69.7384 /Times-Roman
rf /Fr 188[49 63[33 2[49{}3 63.0968 /MTSY rf /Fs 133[25
5[18 4[32 32 2[28 18 18 2[18 28 101[{}9 63.0968 /Times-Italic
rf /Ft 208[24 24 46[{}2 63.0968 /RMTMI rf /Fu 199[32
3[32 32 32 32 32 48[{ TeXBase1Encoding ReEncodeFont }6
63.0968 /Times-Roman rf /Fv 133[35 40 45 2[50 25 35 35
1[45 45 50 70 25 2[25 50 45 30 40 45 40 45 45 10[60 65
55 50 2[55 65 2[55 2[35 70 1[60 60 65 60 60 60 7[45 1[45
45 45 45 45 1[45 2[22 30 22 44[{ TeXBase1Encoding ReEncodeFont }46
89.6638 /Times-BoldItalic rf /Fw 201[28 1[28 28 28 28
49[{ TeXBase1Encoding ReEncodeFont }5 56.455 /Times-Roman
rf /Fx 133[30 34 34 2[38 6[38 40[47 2[47 66[{}7 76.3802
/Times-Italic rf /Fy 196[25 59[{}1 76.3802 /RMTMI rf
%DVIPSBitmapFont: Fz cmtt9 9 3
/Fz 3 63 df<EB03C0A2497EAC007FB512FEA2B7FCA26C14FEA2390007E000AC6D5AA220
227DA727>43 D<153815F8EC01FC1407EC0FF8143FEC7FE0ECFFC001031300495AEB1FF8
495A495A3801FF804890C7FCEA0FFC485AEA7FF013C0485AA26C7E13F0EA1FF86C7EEA03
FF6C7F38007FE06D7E6D7EEB07FE6D7E010013C0EC7FE0EC3FF8140FEC07FC1401EC00F8
15381E287CAA27>60 D<1270127C12FE6C7E6C7E13F0EA1FF86C7EEA03FF6C7F38007FE0
6D7E6D7EEB07FE6D7E010013C0EC7FE0EC3FF8140FEC07FCA2EC0FF8143FEC7FE0ECFFC0
01031300495AEB1FF8495A495A3801FF804890C7FCEA0FFC485AEA7FF013C0485A48C8FC
127C12701E287CAA27>62 D E
%EndDVIPSBitmapFont
/FA 134[34 34 51 1[38 21 30 30 1[38 38 38 55 21 34 1[21
38 38 21 34 38 34 38 38 12[42 1[47 1[47 2[64 42 1[34
6[51 1[47 21[52 43[{ TeXBase1Encoding ReEncodeFont }31
76.3802 /Times-Italic rf /FB 138[42 2[34 5[21 2[21 1[38
1[34 2[42 38 12[51 13[47 14[38 38 38 38 38 38 38 2[19
46[{ TeXBase1Encoding ReEncodeFont }18 76.3802 /Times-Bold
rf /FC 133[37 42 42 2[42 1[32 28 6[42 5[37 42 37 1[37
7[60 3[60 51 46 55 1[46 60 60 2[60 1[28 3[51 60 55 55
60 7[42 1[42 42 42 1[42 42 42 42 3[21 2[28 28 40[{
 TeXBase1Encoding ReEncodeFont }37 83.022 /Times-Roman
rf /FD 143[76 6[33 33 30[32 4[70 70 38[88 3[70 2[68 68
4[45 11[47 1[25 70{}14 89.6638 /MTSY rf
%DVIPSBitmapFont: FE cmtt10 10 85
/FE 85 127 df<121C123E127FEAFF80B0EA7F00AF123EC7FCA8121C123E127FEAFF80A3
EA7F00123E121C09346FB32C>33 D<0018130C003C131E007E133FB4EB7F80A76C1400A8
007E7FA5003C131E191877B32C>I<010F133CA290381F807EA7013F13FE4A5AA4007FB6
12F0A2B712F8A26C15F06C15E03A007E01F800A5EBFE0301FC5BA6003FB612E04815F0B7
12F8A26C15F0A23A01F807E000A30003130F01F05BA76C486C5AA225337DB22C>I<EB07
C0EB1FE0497E497E497E803801FC7EEBF87F00037F13F0A65C91387E1FF89138FE3FFCEB
F1FCEA01F9EBFBF8D9FFF013F89138E07F00157E6C13C0EC80FE4A5A485A3803FF01485C
5A481383393FDFC3F0EB9FC7397F0FE7E0A238FF07FF486C5BA26D5B16306DEB00786E13
FC5C6C1480D87F0313C0018F13F13A3FFFF7FFF86C13E36C01C113F06C018013E06C9038
007FC0D801FCEB1F8026357EB32C>38 D<EA03C0EA07E0EA0FF0EA1FF8A213FC120F1207
12031200A5120113F81203A2EA07F013E0120FEA3FC0EA7F80EAFF00127E123C12180E1B
72B22C>I<147814FC13011307EB0FF8EB1FE0EB3FC0EB7F80140013FE485A12035B485A
120F5B121F5BA2485AA348C7FCA45A5AAC7E7EA46C7EA36C7EA27F120F7F12076C7E7F12
016C7E137F1480EB3FC0EB1FE0EB0FF8EB07FC130113001478164272B92C>I<1238127C
12FEEA7F806C7E6C7E6C7E6C7E12036C7E6C7E7F7FEB3F8014C0131F14E0130FA2EB07F0
A3EB03F8A414FC1301AC130314F8A4EB07F0A3EB0FE0A2131F14C0133F1480EB7F005B5B
485A485A1207485A485A485A485A00FEC7FC127C1238164279B92C>I<EB0380497E497E
A50030141800FC147E00FFEBE1FEEB8FE3EBEFEF90B5FC6C14FC001F14F06C14E0000314
80C6EBFE00A20003EBFF80000F14E04814F0007F14FCB612FEEBEFEFEB8FE3EB0FE100FC
EBE07E0030141800001400A56D5A6D5A1F247AAA2C>I<1478A214FCAE007FB612F0A2B7
12F8A26C15F0A2C700FCC7FCAE1478A225267DAB2C>I<EA07C0EA0FE0EA1FF0EA3FF813
FC13FEA3121F120F1207EA007E13FE13FC1201EA03F81207EA3FF0EA7FE0EAFFC0EA7F80
EA3E0012180F17728A2C>I<007FB6FCA2B71280A26C1500A221067B9B2C>I<121FEA3F80
EA7FC0EAFFE0A5EA7FC0EA3F80EA1F000B0B708A2C>I<15075DED1F80A2153F16005D15
7E15FE5D14015D14035DA214075D140F5D141F5D143F92C7FC5C147E14FE5CA213015C13
035C13075C130F5C131F5CA2133F91C8FC5B137E13FE5B12015B12035B12075BA2120F5B
121F5B123F90C9FC5A127E12FE5AA21278A221417BB92C>I<EB01FC90380FFF80497F01
7F13F090B57E488048EB07FEEBFC0148486C7E4848EB7F8049133F4848EB1FC0A24848EB
0FE0A348C7EA07F0A400FEEC03F8AC6C14076C15F0A36D130F003F15E0A26D131F001F15
C06D133F000F15806D137F6C6CEBFF006C6C485AEBFF076CEBFFFC6C5C6D5B011F13C06D
5BD901FCC7FC25357DB32C>I<EB0380497E130FA2131FA2133F137F13FF1203127FB5FC
A213DF139FEA7E1F1200B3AC003FB512E04814F0B612F8A26C14F06C14E01D3478B32C>
I<EB0FF8EB7FFF48B512C04814F048804880391FF01FFE393FC003FF4848C6138090C712
7F48EC3FC048141F6C15E0A2150FA2127E123CC8FCA2151F16C0A2153F1680ED7F005D4A
5A4A5A4A5A4A5A4A5A4A5A4A5A4AC7FCEB03FE495A495AEB1FE0495A495A4848C8FCD803
FCEB07C04848EB0FE0485A485A48B6FC5AB7FCA27E6C15C023347CB32C>I<EB0FFC9038
7FFF8048B512E0488048804880391FF807FE393FE001FF496C7E1680153FA26C5A6CC7FC
C8FC157F16005D4A5A4A5A143F90381FFFF8495B15C081816D7F90380007FCEC01FEEC00
7FED3F8016C0151F16E0150FA3123C127EB4FC151F16C048143F6C15806C6C137F9039C0
01FF00393FF807FE6CB55A6C5C6C5C00015C6C6C1380D90FFCC7FC23357CB32C>I<EC0F
F881141F143FA2147F14FEA2EB01FCEB03F8A2EB07F0EB0FE0A2EB1FC0EB3F80A2EB7F00
13FEA2485A485AA2485A120F5B485A123F5B48C7FC5A90B612FC16FEA46C15FCC8EAFC00
A991387FFFF891B512FCA46E13F827347EB32C>I<000FB512FE4880A45D01C0C8FCACEB
C3FE9038DFFF8090B512E08181819038FE07FE9038F000FF01C0EB7F8049133F16C06CC7
121FC8FC16E0150FA31218123C127EB4141F16C0153F5A6CEC7F806C6CEBFF009038C003
FE383FF80F6CB55A6C14F06C5C00015C6C91C7FCEB1FF823347CB22C>I<EC3FC0903801
FFF801077F497F013F7F5B9039FFE07F80481300485AEA07F85B000FEC3F004848131E49
90C7FC123F5BA2127FEB0030903807FF80013F7F484813F048B57EB67E819038F803FFEB
E00049EB7F8049EB3FC0A290C7121F16E0150FA37EA46C6C131F16C07F001F143F6DEB7F
80120F9039F801FF003907FE07FE6CB55A6C5C6C5C6D13C0011F5BD907FCC7FC23357CB3
2C>I<127CB712C016E0A416C048C7EA7F80EDFF004A5A007C5CC7485A4A5A140F5D4A5A
143F5D4AC7FCA214FE13015CA2495AA213075CA2495AA3495AA4495AA5137F91C8FCA913
3E131C23357CB32C>I<EB07FC90383FFF8090B512E0000314F848804880391FFC07FFEB
F00148486C138049137F4848EB3FC090C7121FA56D133F003F15806D137F6C6CEBFF0039
0FF803FE6CB55A000114F06C5C011F90C7FC90B512E048800007EBBFFC390FF803FE391F
E000FF4848EB7F8049133F48C7EA1FC0A200FEEC0FE0A66C141F6C15C06D133FA26C6CEB
7F803A1FF001FF00EBFC076CB55A6C5C000114F06C5C013F1380D907FCC7FC23357CB32C
>I<EB07FCEB3FFF4913C048B57E48804880390FFE0FFC391FF001FEEBE00048487F4848
7F90C71380153F5A48EC1FC0A416E0A37E7E6D133FA26C6C137F6C6C13FFEBF8036CB6FC
7E6C14EF6C14CF6C6C139F90393FFC1FC0EB018090C7FC153F1680157F1600000F5C486C
5B383FC0014A5A4A5AEC1FF09038E07FE06CB55A5D6C91C7FC6C5B000113F838007FC023
357CB32C>I<121FEA3F80EA7FC0EAFFE0A5EA7FC0EA3F80EA1F00C7FCAE121FEA3F80EA
7FC0EAFFE0A5EA7FC0EA3F80EA1F000B2470A32C>I<EA07C0EA0FE0EA1FF0EA3FF8A5EA
1FF0EA0FE0EA07C0C7FCAEEA0780EA0FC0EA1FE0EA3FF013F8A4121F120F120712011203
13F0120713E0120FEA3FC0EA7F80EAFF00127E123C12180D3072A32C>I<1507151FED3F
8015FF020313005CEC1FFC4A5AECFFE0491380010790C7FCEB0FFCEB3FF8EB7FE048485A
4890C8FCEA0FFEEA1FF8EA7FF013C0485AA26C7E13F0EA1FF8EA0FFEEA03FF6C13C06C6C
7EEB3FF8EB0FFC6DB4FC01017F6D13E0EC3FF86E7EEC07FF8002001380153FED1F001507
212A7BAD2C>I<007FB612F0A2B712F8A26C15F06C15E0CAFCA8003FB612E04815F0B712
F8A26C15F0A225147DA22C>I<1270127C12FE6C7EEA7FE07FEA1FFC6C7E3803FF80C67F
EB7FF0EB1FF8EB0FFEEB03FF6D13C06D6C7EEC3FF8EC0FFC6EB4FC14016E1380A24A1300
1407EC0FFCEC3FF8EC7FE049485A4990C7FCEB0FFEEB1FF8EB7FF0EBFFC000035BD80FFE
C8FC485AEA7FF05BEAFF8048C9FC127C1270212A7BAD2C>I<EB3FFE48B512C0000714F0
488048804880397FE007FF26FF8000138048C7127F6C143FA3007E147F003C903801FF00
C7EA07FE140F4A5AEC3FF04A5AECFF804990C7FCEB03FC5C13075C130F5CA76D5A90C9FC
A8EB0380497E497E497EA36D5A6D5A6D5A21337BB22C>I<14FE497EA2497FA5903807EF
C0A4010F7FA214C7A3011F7FA31483A2013F7FA490387F01FCA59038FE00FEA290B5FCA2
4880A49038FC007F0003158049133FA44848EB1FC0D83FFEEBFFF8486C4813FCB5008313
FEA26C010113FC6C486C13F827347EB32C>65 D<003FB512E04814FCB67EEDFF806C15C0
7E3A03F8003FE0ED1FF0150F150716F81503A5150716F0150FED1FE0ED3FC090B6128016
005DA2EDFF8016C09039F8007FE0ED0FF0ED07F81503ED01FCA2ED00FEA6150116FC1503
1507ED0FF8153F003FB612F04815E0B712C016806CECFE006C14F827337FB22C>I<02FF
13700107EBE0F84913F1013F13FF5B90B6FC4813C148EB003F01FC131F4848130F485A49
1307121F5B003F14035B127F90C7FCED01F092C7FC5A5AAB7E7EA2ED01F06DEB03F8123F
7F121F6D1307000F15F07F6C6C130F6C6CEB1FE001FFEB3FC06C9038C0FF806C90B5FC6D
14006D13FC010F5B6D13E0010090C7FC25357DB32C>I<007FB57EB612E015F881816C80
2607F0031380020013C0153FED1FE016F0150F150716F8150316FC1501A4ED00FEAB1501
16FCA3150316F81507A2ED0FF0A2ED1FE0153FEDFFC002031380007FB61200B65A5D5D15
E06C148027337FB22C>I<003FB612F84815FCB7FCA27E7E3903F80001A7ED00F81600A3
15F84A7EA490B5FCA6EBF801A46E5A92C7FCA3163E167FA8003FB7FC5AB8FCA27E6C15FE
28337FB22C>I<007FB612F8B712FCA47E3903F80001A7ED00F81600A315F84A7EA490B5
FCA6EBF801A46E5A92C7FCAC387FFFE0B57E80A25C6C5B26337EB22C>I<903901FC0380
90390FFF87C04913CF4913FF5B90B6FC4813873803FC0148487E4848137F5B001F143F5B
123F49131FA2127F90C7FCED0F8092C7FC5A5AA8913803FFF04A13F84A13FC7E6C6D13F8
6E13F09138001FC07F003F143FA27F121F6D137F120F6D13FF6C7E6C6C5A3801FF076C90
B5FC7F7F6D13DF6DEB0F80D901FCC7FC26357DB32C>I<3A7FFF01FFFCB5008313FEA46C
010113FC3A07F0001FC0AF90B6FCA69038F0001FB23A7FFF01FFFCB5008313FEA46C0101
13FC27337EB22C>I<007FB512FCB612FEA46C14FC39000FE000B3B3A3007FB512FCB612
FEA46C14FC1F337AB22C>I<D87FFEEBFFF8B54813FCA46C486C13F8D807E0EB7F00A215
FE4A5A4A5AA24A5A4A5A4A5AA24A5A4AC7FC14FEEBE1FCA213E313E7EBEFFEA290B5FC14
BFEC3F80141F01FE7F496C7E13F86E7E13F0496C7E140181140081157E157F811680ED1F
C0A2D87FFEEB3FFCB5EB7FFEA46C48EB3FFC27337EB22C>75 D<387FFFE0B57E80A25C6C
5BD803F8C8FCB3AC16F8ED01FCA8007FB6FCB7FCA46C15F826337EB22C>I<D87FF0EB07
FF486C4913806D5BA36C6C491300D80FDEEB3DF8A201DF137DA49038CF80F9A314C1A201
C713F1A214E3A201C313E1A214F701C113C1A39038C0FF81A4EC7F01A2143E1400ABD87F
F8EB0FFF486C491380A46C486D130029337FB22C>I<D87FF8EBFFFC486C4813FE13FEA3
6C6C6C13FCD807EFEB0FC0A21480A213E714C0A3EBE3E0A314F013E1A214F8A213E014FC
A2147C147EA2143E143FA2141FA2158F140FA3EC07CFA3140315EFA21401A2D87FFE13FF
B57EA3157F6C48EB3F8027337EB22C>I<EB7FFF0003B512E0000F14F848804880A2EBF0
07397FC001FF497E90C77EA348158048143FB3A86C147FA26C1500A36D5B6D5A393FF007
FE90B5FCA26C5C6C5C000314E0C66C90C7FC21357BB32C>I<003FB512E04814FCB67EED
FF806C15C06C15E03803F800ED1FF0150FED07F8150316FC1501A7150316F81507ED0FF0
151FEDFFE090B6FC16C01680EDFE005D15E001F8C8FCAE383FFF80487FB57EA26C5B6C5B
26337FB22C>I<EB7FFF0003B512E0000F14F848804880A2EBF007397FC001FF497E90C7
7EA348158048143FB3A7EB03F8A200FFEBFC7F007F1500EB01FEA20180B5FC7F393FF07F
FE90B5FCA26C5C6C5C000314E0C67E9038000FF0A26E7EA26E7EA26E7EA28180157E2140
7BB32C>I<387FFFFCB67E15E015F8816C803807F00FEC01FF6E7F157F153F82151FA415
3F5E157F15FF4A90C7FCEC0FFE90B5FC5D5D15E081819038F007FCEC01FE14008181A816
0E161FEE3F80A3D87FFFEB3FBFB50080EBFF00815E6F5A6C496C5AC8EA01F029347EB22C
>I<90381FF80790397FFF0F8048B5129F4814FF5A5A381FF01F383FC00348487E90C7FC
48147F5AA2153FA36CEC1F0092C7FC6C7E7FEA3FF06CB4FC6C13F06C13FF6C14E06C806C
80011F7F01017F9038001FFF02011380EC007FED3FC0151F16E0A2003C140F127E12FEA3
6C141F16C0A201C0EB3F806D137F9039FE03FF0090B55A5D5D00FD5CD8F83F13C0D87007
90C7FC23357CB32C>I<003FB612FC4815FEB7FCA439FE00FE00A7007C157CC71400B3AD
90383FFFF8497F90B57EA26D5B6D5B27337EB22C>I<3B3FFF800FFFE0486D4813F0B56C
4813F8A26C496C13F06C496C13E0D803F8C7EAFE00B3AE6D130100015DA26C6C495A6D13
076D5CECC01F90393FF07FE06DB55A6D5C6D91C7FC6D5B010013F8EC3FE02D3481B22C>
I<D87FF8EB0FFF486C491380A46C486D1300D81F80EB00FCA36D1301000F5DA86C6C495A
A2147FECFF83A301E113C3A200035D14F701F113C7A201F313E7A214E3A200015DA514C1
A201F713F700005DA29038FF80FFA5EC007F6D91C7FC013E133E29347FB22C>87
D<D87FFEEBFFFCB54813FEA46C486C13FCD807F8EB3FC0000315806D137FA26C6CEBFF00
A200005CEBFF01017F5B1483013F5BA290381FC7F0A390380FEFE0A201075B14FF6D5BA2
6D90C7FCA26D5AB090380FFFE0497FA46D5B27337EB22C>89 D<387FFFFCB512FEA414FC
48C7FCB3B3B1B512FC14FEA46C13FC17416FB92C>91 D<1278A212FCA27E127E127F7E7F
121F7F120F7F1207A27F12037F12017F12007F137E137F7F80131FA280130F8013078013
03801301801300A280147E147F8081141F81140F811407811403A281140181140081157E
157F811680151FA2ED0F008121417BB92C>I<387FFFFCB512FEA47EC7FCB3B3B1EA7FFF
B5FCA46C13FC17417DB92C>I<007FB6FCA2B71280A26C1500A221067B7D2C>95
D<3801FFF0000713FE486D7E48804880819038C01FF8391F8007FC380F0001000680C8FC
A2140FEB07FF137F48B5FC12075A4813F8383FFC00EA7FE0EAFF8090C7FC5AA36C1301A2
387F8007383FE03F90B612FC6C15FE7E6C143F0001EBFC1F3A007FC00FFC27247CA32C>
97 D<EA3FF8487E12FFA2127F123F1201A9EC0FF0EC7FFE01FDB5FC90B6128016C016E0
9138F03FF09138C00FF891380003FC5BED01FE491300A216FF167FA816FF6D14FE15017F
ED03FC91388007F8ECC00F9138F03FF091B512E016C001FD148001FC14000000EB7FFC90
38780FF0283380B22C>I<903803FFF0011F13FC017F7F90B6FC4815805A48EB007FD80F
F8EB3F00D81FE0131E4848130C4990C7FC127F90C9FCA25A5AA67E7EA26DEB0F806C6CEB
1FC07F6C6C133FD80FFCEB7F803907FF81FF6C90B512006C5C6C5C6D5B011F13E0010390
C7FC22247BA32C>I<EC07FF4A13805CA28080EC003FA9EB0FF8EB3FFE90B512BF4814FF
5A5A380FFC0F381FF00349C6FC4848137F485A153F90C7FC5A5AA87E6C147FA26D13FF6C
7E5C381FF007380FFC1F6CB612FC6C15FE6CECBFFF6C143FD97FFC13FE90390FF01FFC28
337DB22C>I<EB03FE90381FFFC0017F13F090B57E488048803907FE03FF260FF8001380
D81FE0137F4848EB3FC049131F127F90C713E0150FB7FCA516C048C9FC7E7E7FED07C06C
6CEB0FE07F6C6C131FD80FFCEB3FC03907FF80FF6C90B512806C15006C5C013F13F8010F
5B0101138023247CA32C>I<EC07F8EC3FFCECFFFE497F4914805B90380FF87F9138E03F
00011F131E4AC7FCA6003FB512FE4880B7FCA36C5C26001FC0C7FCB3A6007FB512F0B67E
A46C5C21337DB22C>I<ED03F0903907F81FFC90391FFE3FFE017FB5FC90B7FC5A48ECFE
7F3A07FE1FF87ED9F003133C000FECFC00EBE001001F80EBC000A5EBE001000F5CEBF003
00075CEBFE1F90B55A5D485C5DD9DFFEC7FCEBC7F801C0C8FCA27F6CB512E015FE6CECFF
80000F15C04815E04815F09039C0003FF848C7EA03FC007E140000FE15FE48157EA46C15
FE007E15FCD87F801303D83FE0EB0FF8D81FFEEBFFF06CB612E06C15C06C1580C6ECFE00
013F13F80103138028387EA42C>I<EA3FF8487E12FFA2127F123F1201A9EC07F8EC3FFE
91B5FC01FD8090B67E82ECF81F9138C00FF0EC800714005BA35BB13B3FFFE03FFF80486D
4813C0B56CB512E0A26C496C13C06C496C13802B3380B22C>I<EB0380497E497E497EA3
6D5A6D5A6D5A90C8FCA7383FFFE0487FB5FCA27E7EEA0007B3A6007FB512FCB612FE15FF
A215FE6C14FC20347AB32C>I<1407EC0F80EC1FC0EC3FE0A3EC1FC0EC0F80EC070091C7
FCA790B512C04814E05AA27E7EEB000FB3B3EC1FC0123C007E133FB4EB7F80903801FF00
EBFFFE5C6C5B6C5B6C5B000790C7FC1B467CB32C>I<EA7FF0487EA4127F1201A991381F
FFF84A13FC5CA2806E13F8913801FC004A5A4A5A4A5A4A5A4A5A4AC7FC14FEEBF9FCEBFB
FE90B5FC81A2EC9FC0EC0FE0496C7E13FC496C7E6E7EA26E7E157FED3F80A23A7FFFC07F
FEB56CB5FC14F1A214E06C9038C07FFE28337FB22C>I<383FFFF0487FB5FCA27E7EEA00
03B3B3A3003FB612804815C0B712E0A26C15C06C158023337CB22C>I<3A3FC1F803F03A
7FE7FC0FF8B538FE3FFC6E487E6C91B5FC7E3B07FE1FFC3F8001FC13F89039F80FF01F01
F013E0A301E013C0B2D83FFC01F813F03B7FFE1FFC3FF8B5393FFE7FFCA23B7FFE1FFC3F
F83B3FFC0FF81FF02E2481A32C>I<393FF807F8397FFC3FFE00FF90B5FC01FD806CB67E
6C810001EBF81F9138C00FF0EC800714005BA35BB13B3FFFE03FFF80486D4813C0B56CB5
12E0A26C496C13C06C496C13802B2480A32C>I<EB07FCEB1FFF017F13C048B512F04880
4880390FFC07FE391FF001FF497E4848EB7F8049133F48C7EA1FC0A300FEEC0FE0A76C14
1F6C15C0A26D133F003F15806D137F6C6CEBFF00EBF803390FFE0FFE6CB55A6C5C6C5C6C
6C13C0011F90C7FCEB07FC23247CA32C>I<393FF80FF0397FFC7FFED8FFFDB5FC90B612
806C15C06C15E000019038F03FF09138C00FF891380003FC5BED01FE491300A216FF167F
A816FF6D14FE15017FED03FC91388007F8ECC00F9138F03FF091B512E016C001FD148001
FC1400EC7FFCEC0FF091C8FCAC383FFFE0487FB57EA26C5B6C5B283680A32C>I<903907
F80F8090393FFF1FC049139F48B512DF4814FF5A380FFE07381FF801EBE0004848137F5B
007F143F90C7FC151F5A5AA77E6C143F7F157F6C7E6C6C13FFEBF003380FFC0F6CB6FC7E
6C14DF6C149F90383FFE1FEB0FF890C7FCAC0207B5FC4A1480A46E140029367DA32C>I<
D83FFFEB3FC048903881FFE0B5008713F0028F13F86C019F13FC6C13BF39003FFFE3ED01
F89138FC00F04A13604A1300A25CA25CA35CAD003FB512F04880B6FCA27E6C5C26247EA3
2C>I<90383FF8700003B512F85A5A5A5A387FC01F38FF000700FC1303A36CEB01F06C6C
C7FCEA7FFC383FFFF06C13FF6C14C06C14E0C614F0010F13F89038007FFCEC03FE003CEB
00FF007E143F12FE7EA26D137F6D13FEEBF00790B512FC15F815F015E000F8148039701F
FC0020247AA32C>I<130F497E133FA8003FB6FC481580B7FCA36C150026003F80C7FCAF
ED0380ED07C0ED0FE0A3151F02C013C0011F133F9138F07F806DB5FC16006D5B6D13F801
005BEC3FC0232E7EAD2C>I<D83FF8EBFFE0486C487F00FF5BA2007F7F003F7F00011407
B3A2150FA2153F01FF13FF6C90B6128017C06D15E07F6D01E713C00103010313802B2480
A32C>I<3A7FFF01FFFCB5008313FE14C7A214836C010113FC3A03F0001F806D133F0001
1500A26D5B0000147EA26D13FE017E5BA36D485AA31483011F5BA214C7010F5BA3903807
EFC0A214FF6D5BA36D90C7FCA26D5A27247EA32C>I<3A3FFF80FFFE4801C17FB51580A2
6C16006C01805B3A07E00003F0A66C6C495AA2147FECFF87A3D801F1EBC7C0A201F913CF
14F7A301FB13EF000001E35BA401FF13FF14C1017F91C7FCA3148090383F007E29247FA3
2C>I<3A3FFF03FFF048018713F802C713FCA2028713F86C010313F03A00FE01FC009038
7F03F8EB3F83EC87F090381FCFE090380FEFC0EB07FF5D6D90C7FC7F6D5A5C80497E5B49
7FECEFC090380FCFE0EB1FC7EC83F090383F03F8496C7EEBFE00497F3A3FFF03FFF84801
8713FCB500C713FEA26C018713FC6C010313F827247EA32C>I<3A3FFF01FFFC48018313
FEB512C7A26C13836C010113FC3A03F8001F800001143F6D140012005D6D137E137EA201
7F5B7FA2EC81F8131FA2EB0FC1ECC3F0A2EB07E35D14E71303ECF7C0130114FF5D7FA292
C7FC80A2147EA314FE5CA21301000C5BEA3F03387F87F0138F495AEBFFC0A26C5B6C48C8
FC6C5AEA07F027367EA32C>I<001FB612E04815F05AA316E090C7EA3FC0ED7F80EDFF00
4A5AEC07FC003E495AC7485A4A5A4A5A4A5A4990C7FC495A495A495A495A495A495A9039
FF8003E04890380007F0485AEA07F8485A485A485A48B6FCB7FCA46C15E024247DA32C>
I<EDFFC0020713E0141F147F91B5FC4914C0EDC000D903FCC7FC5CB31307EB3FF0383FFF
E0485BB55A91C8FC806C7F6C7F38003FF0EB07F81303B380903801FFC0EDFFC06D14E080
141F1407020013C023417CB92C>I<1278A212FCB3B3B3A71278A206416DB92C>I<EA3FE0
EA7FFCB5FC14C0806C7FEA007FEB07F81303B3806DB47E6DEBFF806E13C06E13E0805C4A
13C091B5128049EB8000D903FCC7FC5CB31307EB7FF0EA7FFFB55A5C91C8FCEA7FFCEA3F
E023417CB92C>I<01F81360D803FC13F03907FF03F848138748EBFFF04814E04814C0D8
FF0F1380486C1300387801FE383000F81D0B79B22C>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: FF cmsy10 10.95 1
/FF 1 18 df<007FB912E0BA12F0A26C18E0CDFCAE007FB912E0BA12F0A26C18E0CDFCAE
007FB912E0BA12F0A26C18E03C287BAA47>17 D E
%EndDVIPSBitmapFont
/FG 134[37 37 55 37 42 23 32 32 42 42 42 42 60 23 37
1[23 42 42 23 37 42 37 42 42 50[21 43[42 2[{
 TeXBase1Encoding ReEncodeFont }26 83.022 /Times-Italic
rf /FH 150[30 30 104[{}2 83.022 /MTSY rf /FI 133[35 40
40 3[25 35 35 45 45 45 45 65 1[40 25 25 45 2[40 1[40
14[50 45 2[55 65 2[50 60 1[30 65 65 55 55 65 60 55 66[{}31
89.6638 /Times-Italic rf /FJ 136[66 44 55[70 42 70 30
25 1[71 8[33 33 34[51 11[{}11 89.6638 /RMTMI rf /FK 105[38
1[34 34 24[34 38 38 55 38 38 21 30 25 38 38 38 38 59
21 38 21 21 38 38 25 34 38 34 38 34 3[25 1[25 3[72 55
1[47 42 51 55 42 55 1[68 47 1[30 25 55 1[42 47 55 51
51 55 5[21 21 38 38 38 38 38 38 38 38 38 38 21 19 25
19 2[25 25 37[42 2[{ TeXBase1Encoding ReEncodeFont }69
76.3802 /Times-Roman rf
%DVIPSBitmapFont: FL cmtt10 10.95 13
/FL 13 117 df<EB03C0EB1FF8497E137F8090B5FC3801FC3F13F8810003131F13F0A614
3F92C8FC91387F0FFF9038F87E1F000101FE1480EBF9FC02F8140001FB7FD9FFF013C06C
13E0151F02C05BEB7F809038FF003F4892C7FC485C48EB807E5A15FE391FDFC0FC383F8F
E0EB87E1397F07F1F8EB03F300FEEBFBF0EB01FF5D7F91387FC006160F91393F801F80A2
6CEB7FC06CEBFFE049EBF83F018701FC1300263FFFFBB5FC6C01F15B14E06C9038C03FFC
00039038001FF8D800F8EB03E0293A7DB830>38 D<141E143F14FF5BEB03FEEB07F8EB0F
F0EB1FE0EB3F80137FEBFF005B485A12035B485AA2485AA2485AA2123F5BA2127F90C7FC
A412FEAD127FA47F123FA27F121FA26C7EA26C7EA26C7E7F12016C7E7FEB7F80133FEB1F
E0EB0FF0EB07F8EB03FEEB01FF7F143F141E184771BE30>40 D<1238127CB4FC6C7E6C7E
6C7E6C7E6C7EEA01FC7F6C7E7FEB3F8014C0131FEB0FE0A2EB07F0A2EB03F8A214FC1301
A214FE1300A4147FAD14FEA4130114FCA2130314F8A2EB07F0A2EB0FE0A2EB1FC0133F14
80EB7F005B485A5BEA07F8485A485A485A485A48C7FC127C1238184778BE30>I<141C14
3E147FAF003FB612FE4881B81280A36C16006C5DC76CC8FCAF143E141C29297DAF30>43
D<16E0ED01F0ED07F8150F153FEDFFF04A13E0020713C04A1300EC3FFEEC7FF8903801FF
E0495B010F90C7FC495AEB7FF8495A000313C0485BD81FFEC8FC485AEA7FF0485A138013
E06C7EEA3FFC6C7E3807FF806C7FC613F06D7EEB1FFE6D7E010313C06D7F9038007FF8EC
3FFEEC0FFF6E13C0020113E06E13F0ED3FF8150F1507ED01F0ED00E0252F7BB230>60
D<1238127CB4FC7F13E0EA7FF86C7E6CB4FC00077F6C13E0C67FEB3FFC6D7E903807FF80
6D7F010013F06E7EEC1FFE6E7E020313C06E13E09138007FF0ED3FF8150F153FED7FF091
3801FFE04A13C0020F13004A5AEC7FF84A5A010313C0495BD91FFEC7FC495AEBFFF00003
5B481380001F90C8FCEA3FFC485AEAFFE0138090C9FC127C1238252F7BB230>62
D<003FB712C05AB812E0A43AFE003F800FA7007CED07C0A2C791C7FCB3B1011FB5FC4980
A46D91C7FC2B387EB730>84 D<ECFFC0010713F8011F13FE017F7F90B612805A48018013
C03907FC007F485A13E0001FEC3F804848EB1F0049130E007F91C7FC90C9FCA25A5AA87E
7EA27F003FEC07C06DEB0FE06C7E6D131F6C6C14C0D807FE133F3A03FFC0FF806C90B512
006C5C6D5B011F5B01075B01011380232A7AA830>99 D<EC01FE3A3FFC0FFF80007F013F
13E0486C487F90B67E7E6C9038FE07FCC6EBF00102E07F14C0EC8000A291C7FCA25BB3A2
3B3FFFF81FFFF84801FC14FCB56C4813FEA26C496C13FC6C01F814F82F2880A730>110
D<49B4FC010F13E0013F13F8497F90B57E0003ECFF8014013A07FC007FC04848EB3FE0D8
1FE0EB0FF0A24848EB07F8491303007F15FC90C71201A300FEEC00FEA86C14016C15FCA2
6D1303003F15F86D13076D130F6C6CEB1FF06C6CEB3FE06D137F3A07FF01FFC06C90B512
806C15006C6C13FC6D5B010F13E0010190C7FC272A7CA830>I<EC03FE3A3FFC1FFF8000
7F4913E0486CB57E90B67E6C816C9038FE07FEC69038F001FFDAC00013804A137FEE3FC0
91C7121F4915E0160FA217F01607A8160FA217E07F161F6E14C0163F6EEB7F806EEBFF00
ECF0039138FC0FFE91B55A5E495C023F13C06E90C7FCEC03FC91C9FCAD383FFFF8487FB5
7EA26C5B6C5B2C3C80A730>I<90381FFC0E48B5129F000714FF5A5A5A387FF007EB0001
00FE7F4880A46C143E007F91C7FC13E06CB4FC6C13FC6CEBFF806C14E0000114F86C6C7F
01037F9038000FFF02001380003C143F007EEC1FC012FE150F7EA27F151F6D14806D137F
9039FC03FF0090B55A5D00FD5C00FC5CD8F83F13C026700FFEC7FC222A79A830>115
D<EB0780130F497EA9003FB612E05AB712F0A26C15E0A226001FC0C7FCB216F8A2ED01FC
A4ECE003010F14F8ECF0079138FC1FF06DB512E06D14C06D14806D1400EC7FFCEC1FF026
337EB130>I E
%EndDVIPSBitmapFont
/FM 204[91 1[91 49[{ TeXBase1Encoding ReEncodeFont }2
182.648 /Times-Roman rf /FN 107[40 40 24[40 45 45 65
45 45 25 35 30 45 45 45 45 70 25 45 25 25 45 45 30 40
45 40 45 40 3[30 1[30 1[65 1[85 65 65 55 50 60 65 50
65 65 80 55 65 1[30 65 65 50 55 65 60 60 65 1[40 1[51
1[25 25 45 45 45 45 45 45 45 45 45 45 25 22 30 22 2[30
30 30 70 34[50 50 2[{ TeXBase1Encoding ReEncodeFont }77
89.6638 /Times-Roman rf /FO 133[35 40 40 60 40 45 25
35 35 45 45 45 45 65 25 40 25 25 45 45 25 40 45 40 45
45 6[50 50 55 75 1[65 50 45 55 1[55 65 60 75 50 60 1[30
65 65 55 55 65 60 1[55 14[45 45 2[22 30 22 2[30 37[45
45 2[{ TeXBase1Encoding ReEncodeFont }56 89.6638 /Times-Italic
rf /FP 133[40 45 45 2[50 30 35 40 1[50 45 50 75 25 50
1[25 50 45 30 40 50 40 50 45 12[60 50 1[70 55 70 1[85
60 2[35 70 70 55 60 65 65 60 65 1[45 4[30 6[45 1[45 4[22
2[30 30 37[50 2[{ TeXBase1Encoding ReEncodeFont }46 89.6638
/Times-Bold rf /FQ 134[91 91 3[61 71 81 1[102 91 102
152 51 2[51 102 91 61 81 102 1[102 91 17[142 2[122 2[71
3[122 132 132 122 132 65[{ TeXBase1Encoding ReEncodeFont }26
182.648 /Times-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: a4

%%EndSetup
%%Page: 44 1
44 43 bop 399 399 a FK(44)2172 b(On)20 b(the)f(Implementation)j(of)e
(LED)m(A)489 805 y FE(list)p 670 805 27 4 v 30 w(item)42
b(it;)489 897 y(forall)p 758 897 V 29 w(items\(it,L\))d(if)k(\(L[it])e
(==)i(x\))g(L.del)p 2228 897 V 29 w(item\(it\);)489 1059
y FN(The)22 b(follo)n(wing)f(piece)h(of)g(code)g(remo)o(v)o(es)e
(self-loops)h(from)h(a)g(graph)i FI(G)5 b FN(:)489 1212
y FE(edge)42 b(e;)489 1303 y(forall)p 758 1303 V 29 w(adj)p
919 1303 V 30 w(edges\(e,G\))e(if)j(\(source\(e\))c(==)k(target\(e\)\))
c(G.del)p 2869 1303 V 30 w(edge\(e\);)399 1582 y Fv(Ex)o(ercises)21
b(f)o(or)h(13.9)399 1689 y Fl(1)156 b(Design)21 b(a)h(forall)f(macro)g
(allo)n(wing)g(insertions)f(at)i(the)f(end)g(of)g(the)h(collection.)399
1797 y(2)156 b(Implement)28 b(an)g(iteration)g(macro)f(for)i(the)f
(binary)f(tree)i(class)f Fk(bin)p 2663 1797 V 19 w(tr)m(ee)g
Fl(tra)n(v)o(ersing)f(the)h(nodes)g(in)599 1905 y(in-order)-5
b(.)399 2428 y FN(13.10)96 b FP(Priority)22 b(Queues)f(by)h(Fibonacci)f
(Heaps)h(\(A)g(Complete)f(Example\))399 2607 y FN(W)-7
b(e)27 b(gi)n(v)o(e)h(a)g(comprehensi)n(v)o(e)e(e)o(xample)h(that)h
(illustrates)g(most)g(of)g(the)g(concepts)f(introduced)g(in)i(this)399
2723 y(chapter)l(,)34 b(the)d(implementation)f(of)i(the)g(priority)f
(queue)g(data)g(type)h FO(p)p 2655 2723 V 20 w(queue)o
FL(<)8 b FI(P)d FJ(;)21 b FI(I)11 b FL(>)32 b FN(by)g(Fibonacci)399
2839 y(heaps.)59 b(The)32 b(data)h(type)f FO(p)p 1266
2839 V 21 w(queue)o FL(<)7 b FI(P)e FJ(;)21 b FI(I)11
b FL(>)33 b FN(w)o(as)g(discussed)f(in)g(Section)g(5.4)i(and)e(is)h
(de\002ned)f(in)h(the)399 2956 y(header)e(\002le)h FL(<)p
FO(LED)m(A)o FJ(=)p FO(p)p 1167 2956 V 20 w(queue)-9
b FJ(:)p FI(h)5 b FL(>)p FN(.)58 b(W)-7 b(e)32 b(sho)n(w)f(the)i
(header)e(\002le)h(belo)n(w)-6 b(,)35 b(b)n(ut)d(without)f(the)h
(manual)399 3072 y(comments)21 b(that)g(generate)h(the)g(manual)f
(page.)489 3188 y(W)-7 b(e)21 b(call)g(the)g(implementation)e(class)i
FO(PRIO)p 1889 3188 V 19 w(IMPL)p FN(.)28 b(There)20
b(is)h(one)g(slight)g(anomaly)f(in)h(the)g(deri)n(v)n(a-)399
3304 y(tion)k(of)g FO(p)p 703 3304 V 21 w(queue)o FL(<)7
b FI(P)e FJ(;)21 b FI(I)11 b FL(>)26 b FN(from)f FO(PRIO)p
1624 3304 V 20 w(IMPL)o FN(:)35 b(What)25 b(is)g(called)g
FO(prio)o FN(rity)h(in)f(the)g(data)g(type)h(template)399
3421 y(is)d(called)g FO(k)o(e)m(y)h FN(in)f(the)h(implementation)d
(class,)j(since)f(in)h(the)f(\002rst)g(v)o(ersion)g(of)g(LED)l(A)h
(priorities)e(were)399 3537 y(called)f(k)o(e)o(ys)h(and)f(this)h(still)
g(sho)n(ws)g(in)g(the)g(implementation)e(class.)399 3769
y(13.10.1)29 b Fv(The)22 b(Data)g(T)m(ype)f(T)-8 b(emplate)399
3885 y FN(W)h(e)21 b(start)h(with)g(the)g(data)g(type)f(template.)399
4060 y FH(h)p FG(p)p 476 4060 25 4 v 29 w(queue)o(.h)p
FH(i)n FF(\021)489 4179 y FE(#define)41 b(PRIO_IMPL)f(f_heap)489
4297 y(typedef)h(PRIO_IMPL::item)c(pq_item;)489 4416
y(template<class)h(P,)43 b(class)e(I>)489 4507 y(class)h(p_queue:)e
(private)h(PRIO_IMPL)489 4599 y({)577 4690 y(int)86 b(key_type_id\(\))
474 b(const)41 b({)i(return)e(leda_type_id\(\(P*\))o(0\);)c(})577
4781 y(int)86 b(cmp\(GenPtr)39 b(x,)k(GenPtr)e(y\))i(const)795
4873 y({)g(return)e(compare\(LEDA_ACC)o(ES)o(S\(P)o(,x)o(\),)o(LED)o
(A_)o(ACC)o(ES)o(S\()o(P,y)o(\)\))o(;)d(})577 4991 y(void)k
(clear_key\(GenPt)o(r&)37 b(x\))174 b(const)41 b({)i
(leda_clear\(LEDA_A)o(CC)o(ESS)o(\(P)o(,x\))o(\);)37
b(})577 5083 y(void)42 b(clear_inf\(GenPt)o(r&)37 b(x\))174
b(const)41 b({)i(leda_clear\(LEDA_A)o(CC)o(ESS)o(\(I)o(,x\))o(\);)37
b(})577 5174 y(void)42 b(copy_key\(GenPtr)o(&)37 b(x\))218
b(const)41 b({)i(x)g(=)h(leda_copy\(LEDA_)o(ACC)o(ES)o(S\(P)o(,x)o
(\)\))o(;)38 b(})577 5265 y(void)k(copy_inf\(GenPtr)o(&)37
b(x\))218 b(const)41 b({)i(x)g(=)h(leda_copy\(LEDA_)o(ACC)o(ES)o(S\(I)o
(,x)o(\)\))o(;)38 b(})489 5384 y(public:)577 5475 y(p_queue\(\))83
b({})p eop
%%Page: 45 2
45 44 bop 399 399 a FK(13.10)39 b(Priority)21 b(Queues)e(by)h
(Fibonacci)g(Heaps)f(\(A)h(Complete)g(Example\))1135
b(45)577 714 y FE(p_queue\(const)38 b(p_queue<P,I>&)g
(Q\):PRIO_IMPL\(Q\))f({})533 805 y(~p_queue\(\))83 b({)43
b(PRIO_IMPL::clear\()o(\);)37 b(})577 924 y(p_queue<P,I>&)h
(operator=\(const)f(p_queue<P,I>&)h(Q\))925 1015 y({)43
b(PRIO_IMPL::operat)o(or=)o(\(Q)o(\);)37 b(return)k(*this;)g(})577
1134 y(P)304 b(prio\(pq_item)39 b(it\))j(const)925 1225
y({)h(return)f(LEDA_CONST_ACCE)o(SS\()o(P,)o(PR)o(IO_)o(IM)o(PL:)o(:k)o
(ey)o(\(it)o(\)\))o(;)c(})577 1316 y(I)304 b(inf\(pq_item)39
b(it\))86 b(const)925 1408 y({)43 b(return)f(LEDA_CONST_ACCE)o(SS\()o
(I,)o(PR)o(IO_)o(IM)o(PL:)o(:i)o(nf)o(\(it)o(\)\))o(;)c(})577
1499 y(pq_item)i(find_min\(\))301 b(const)42 b({)h(return)e
(PRIO_IMPL::find_)o(min)o(\(\))o(;)d(})577 1590 y(void)172
b(del_min\(\))607 b({)43 b(PRIO_IMPL::del_m)o(in)o(\(\);)37
b(})577 1682 y(void)172 b(del_item\(pq_item)37 b(it\))130
b({)43 b(PRIO_IMPL::del_i)o(te)o(m\(i)o(t\))o(;)38 b(})577
1800 y(pq_item)i(insert\(const)f(P&)k(x,)f(const)g(I&)h(i\))925
1891 y({)g(return)f(PRIO_IMPL::inse)o(rt\()o(le)o(da)o(_ca)o(st)o
(\(x\))o(,l)o(ed)o(a_c)o(as)o(t\(i)o(\)\))o(;)c(})577
2010 y(void)172 b(change_inf\(pq_ite)o(m)37 b(it,)43
b(const)e(I&)i(i\))925 2101 y({)g(PRIO_IMPL::change)o(_in)o(f\()o(it,)o
(le)o(da)o(_ca)o(st)o(\(i\))o(\);)37 b(})577 2220 y(void)172
b(decrease_p\(pq_ite)o(m)37 b(it,)43 b(const)e(P&)i(x\))925
2311 y({)g(PRIO_IMPL::decrea)o(se_)o(ke)o(y\(i)o(t,)o(le)o(da_)o(ca)o
(st\()o(x\))o(\);)37 b(})577 2430 y(int)216 b(size\(\))85
b(const)41 b({)j(return)d(PRIO_IMPL::size\()o(\);)c(})577
2521 y(bool)172 b(empty\(\))41 b(const)g({)j(return)d(\(size\(\)==0\))e
(?)k(true)f(:)h(false;)e(})577 2612 y(void)172 b(clear\(\))302
b({)44 b(PRIO_IMPL::clea)o(r\(\))o(;)37 b(})577 2731
y(pq_item)j(first_item\(\))431 b(const)42 b({)h(return)e
(PRIO_IMPL::first)o(_it)o(em)o(\(\))o(;)d(})577 2822
y(pq_item)i(next_item\(pq_item)d(it\))42 b(const)g({)h(return)e
(PRIO_IMPL::next_)o(ite)o(m\()o(it)o(\);)c(})489 2913
y(};)489 3140 y FN(Ev)o(ery)22 b(implementation)f(class)h
FO(PRIO)p 1707 3140 27 4 v 19 w(IMPL)g FN(for)h FO(p)p
2131 3140 V 20 w(queue)o FL(<)8 b FI(P)d FJ(;)21 b FI(I)11
b FL(>)23 b FN(has)f(to)g(pro)o(vide)g(the)g(follo)n(wing)399
3256 y(operations)e(and)i(de\002nitions.)489 3408 y FE(class)42
b(PRIO)p 932 3408 V 30 w(IMPL)489 3500 y({)577 3591 y(virtual)e(int)86
b(key)p 1280 3591 V 30 w(type)p 1486 3591 V 30 w(id\(\))304
b(const)41 b(=)i(0;)577 3682 y(virtual)d(int)86 b(cmp\(GenPtr,)39
b(GenPtr\))i(const)g(=)j(0;)577 3774 y(virtual)c(void)i(clear)p
1368 3774 V 30 w(key\(GenPtr&\))82 b(const)41 b(=)i(0;)577
3865 y(virtual)d(void)i(clear)p 1368 3865 V 30 w(inf\(GenPtr&\))82
b(const)41 b(=)i(0;)577 3956 y(virtual)d(void)i(copy)p
1324 3956 V 30 w(key\(GenPtr&\))126 b(const)41 b(=)i(0;)577
4048 y(virtual)d(void)i(copy)p 1324 4048 V 30 w(inf\(GenPtr&\))126
b(const)41 b(=)i(0;)489 4166 y(public:)577 4285 y(typedef)d(...)j
(item;)489 4403 y(protected:)577 4522 y(PRIO)p 758 4522
V 29 w(IMPL\(\);)577 4613 y(PRIO)p 758 4613 V 29 w(IMPL\(const)d(PRIO)p
1443 4613 V 29 w(IMPL&\);)577 4731 y(virtual)g(~PRIO)p
1150 4731 V 30 w(IMPL\(\);)577 4850 y(PRIO)p 758 4850
V 29 w(IMPL&)i(operator=\(const)37 b(PRIO)p 1922 4850
V 30 w(IMPL&\);)577 4968 y(item)42 b(insert\(GenPtr,G)o(en)o(Ptr)o(\);)
577 5060 y(item)g(find)p 976 5060 V 29 w(min\(\))g(const;)577
5178 y(GenPtr)f(key\(item\))f(const;)577 5270 y(GenPtr)h(inf\(item\))f
(const;)577 5388 y(void)i(del)p 932 5388 V 30 w(min\(\);)577
5479 y(void)g(del)p 932 5479 V 30 w(item\(item\);)p eop
%%Page: 46 3
46 45 bop 399 399 a FK(46)2172 b(On)20 b(the)f(Implementation)j(of)e
(LED)m(A)1121 1641 y @beginspecial @setspecial
%%BeginDocument: ./figs/heap.ps
%!PS-Adobe-2.0
%%Creator: LEDA GraphWin
%%CreationDate: Sat Nov 28 12:25:17 1998
%%Pages:  1
%%BoundingBox:  -20 -20 274.541 142.67
%%EndComments
/LEDA_dict 100 dict def
LEDA_dict begin
%%
%% COLORS
/white { 1.000 1.000 1.000 } def
/black { 0.000 0.000 0.000 } def
/red { 1.000 0.000 0.000 } def
/green { 0.000 0.933 0.000 } def
/blue { 0.000 0.000 0.804 } def
/yellow { 1.000 1.000 0.000 } def
/violet { 0.627 0.125 0.941 } def
/orange { 1.000 0.549 0.000 } def
/cyan { 0.000 1.000 1.000 } def
/brown { 0.627 0.322 0.176 } def
/pink { 1.000 0.000 1.000 } def
/green2 { 0.047 0.702 0.627 } def
/blue2 { 0.392 0.584 0.929 } def
/grey1 { 0.851 0.851 0.851 } def
/grey2 { 0.702 0.702 0.702 } def
/grey3 { 0.451 0.451 0.451 } def
/ivory { 1.000 1.000 0.894 } def
%%
%% FONTS
/font_dict 2 dict def
/set_font {
  font_dict
  begin
    /font_size exch def /font_name exch def
    font_name cvn findfont font_size scalefont setfont
  end
} def
%%
%% POLYGONS
/polygon_dict 1 dict def
/poly_line {
  polygon_dict
  begin
    /points exch def
    points 2 mul dup 2 sub roll
    moveto
    points 1 sub
    dup { dup 2 mul 1 add -2 roll lineto 1 sub} repeat
    pop
  end
} def
/polygon { newpath poly_line closepath } def
%%
%% ELLIPSES
/ellipse_dict 4 dict def
/ellipse {
  ellipse_dict
  begin
    /yrad exch def /xrad exch def /ypos exch def /xpos exch def
    matrix currentmatrix
    xpos ypos translate
    xrad yrad scale
    0 0 1 0 360 arc
    setmatrix
  end
} def
%%
%% hatching
/hatch1_dict 4 dict def
/hatch1_rect {
 hatch1_dict
 begin
  0.25 units setlinewidth
  /ymax exch def /xmax exch def /ymin exch def /xmin exch def
  xmin ymax ymin sub sub 3 units xmax 
  { ymin moveto ymax ymin sub dup rlineto stroke } for
 end
} def
%
/hatch2_dict 4 dict def
/hatch2_rect {
 hatch2_dict
 begin
  0.25 units setlinewidth
  /ymax exch def /xmax exch def /ymin exch def /xmin exch def
  xmax ymax ymin sub add -3 units xmin 
  { ymin moveto ymin ymax sub ymax ymin sub rlineto stroke } for
 end
} def
%%
%% TEXT
/draw_text {
  3 dict begin
    /label exch def /ypos exch def /xpos exch def
    xpos ypos moveto
    label show
  end
} def
%%
/draw_ctext {
  8 dict begin
   /sz exch def /label exch def /ypos exch def /xpos exch def
   xpos ypos moveto
   label stringwidth pop -2 div sz -0.32 mul rmoveto
   label show
  end
} def
%%
%% PIXMAPS
/draw_pixmap {
 10 dict begin
   /ly exch def /lx exch def /h exch def /w exch def /y exch def /x exch def
   /pix w 3 mul string def
   x y translate
   lx ly scale
   w h 8 [w 0 0  0 h sub  0 h]
   {currentfile pix readhexstring pop}
   false 3 colorimage
 end
} def
%%
%% LINESTYLES
/units  { f_scale div } def
/solid  { [ ] } def
/dashed { [ 3 units 2 units] } def
/dotted { [ 0.5 units 2 units ] } def
/dashed_dotted { [ 3 units 2 units 0.5 units 2 units ] } def
/set_line_style { 0 setdash } def
%%
%% INIT
1 1 scale
1 setlinewidth
(Helvetica) 12.0 set_font
%%EndProlog
%%
%%BeginProgram
-40.585954 -140.205755 translate
/f_scale 1.000000  def
1.000000 1.000000 scale
(Times-Roman) 10.396400 set_font
0.740741 setlinewidth
64.834599 246.189049 65.101912 239.401717 63.027647 242.753816 59.090254 242.563883 4 polygon fill
54.008301 225.606951 63.027647 242.753816 2 poly_line stroke
209.414978 246.189008 209.682368 239.401679 207.608065 242.753754 203.670674 242.563776 4 polygon fill
198.589022 225.606992 207.608065 242.753754 2 poly_line stroke
216.661179 246.189090 222.405566 242.563990 218.468170 242.753878 216.393944 239.401756 4 polygon fill
227.487821 225.606910 218.468170 242.753878 2 poly_line stroke
234.734022 211.831008 240.478326 208.205776 236.540935 208.395754 234.466632 205.043679 4 polygon fill
245.559978 191.248992 236.540935 208.395754 2 poly_line stroke
227.487821 211.831090 227.755056 205.043756 225.680830 208.395878 221.743434 208.205990 4 polygon fill
216.661179 191.248910 225.680830 208.395878 2 poly_line stroke
209.414813 177.473094 209.682040 170.685760 207.607817 174.037884 203.670422 173.848001 4 polygon fill
198.589187 156.892906 207.607817 174.037884 2 poly_line stroke
216.661345 177.473177 222.405818 173.848215 218.468418 174.038008 216.394272 170.685836 4 polygon fill
227.487655 156.892823 218.468418 174.038008 2 poly_line stroke
72.080817 246.189057 77.825170 242.563904 73.887776 242.753828 71.813519 239.401725 4 polygon fill
82.907183 225.606943 73.887776 242.753828 2 poly_line stroke
86.530300 210.936280 89.926597 205.053722 86.530300 207.054798 83.134003 205.053722 4 polygon fill
86.530300 192.143720 86.530300 207.054798 2 poly_line stroke
285.328000 245.294280 288.724297 239.411722 285.328000 241.412798 281.931703 239.411722 4 polygon fill
285.328000 226.501720 285.328000 241.412798 2 poly_line stroke
(Times-Roman) 11.995900 set_font
white setrgbcolor
140.747000 253.077000 7.782720 7.782720 ellipse fill
black setrgbcolor
140.747000 253.077000 7.782720 7.782720 ellipse stroke
white setrgbcolor
68.457700 253.077000 7.782720 7.782720 ellipse fill
black setrgbcolor
68.457700 253.077000 7.782720 7.782720 ellipse stroke
white setrgbcolor
50.385200 218.719000 7.782720 7.782720 ellipse fill
black setrgbcolor
50.385200 218.719000 7.782720 7.782720 ellipse stroke
white setrgbcolor
213.038000 253.077000 7.782720 7.782720 ellipse fill
black setrgbcolor
213.038000 253.077000 7.782720 7.782720 ellipse stroke
white setrgbcolor
194.966000 218.719000 7.782720 7.782720 ellipse fill
black setrgbcolor
194.966000 218.719000 7.782720 7.782720 ellipse stroke
white setrgbcolor
231.111000 218.719000 7.782720 7.782720 ellipse fill
black setrgbcolor
231.111000 218.719000 7.782720 7.782720 ellipse stroke
white setrgbcolor
249.183000 184.361000 7.782720 7.782720 ellipse fill
black setrgbcolor
249.183000 184.361000 7.782720 7.782720 ellipse stroke
white setrgbcolor
213.038000 184.361000 7.782720 7.782720 ellipse fill
black setrgbcolor
213.038000 184.361000 7.782720 7.782720 ellipse stroke
white setrgbcolor
194.966000 150.005000 7.782720 7.782720 ellipse fill
black setrgbcolor
194.966000 150.005000 7.782720 7.782720 ellipse stroke
white setrgbcolor
231.111000 150.005000 7.782720 7.782720 ellipse fill
black setrgbcolor
231.111000 150.005000 7.782720 7.782720 ellipse stroke
white setrgbcolor
86.530300 218.719000 7.782720 7.782720 ellipse fill
black setrgbcolor
86.530300 218.719000 7.782720 7.782720 ellipse stroke
white setrgbcolor
86.530300 184.361000 7.782720 7.782720 ellipse fill
black setrgbcolor
86.530300 184.361000 7.782720 7.782720 ellipse stroke
white setrgbcolor
285.328000 218.719000 7.782720 7.782720 ellipse fill
black setrgbcolor
285.328000 218.719000 7.782720 7.782720 ellipse stroke
white setrgbcolor
285.328000 253.077000 7.782720 7.782720 ellipse fill
black setrgbcolor
285.328000 253.077000 7.782720 7.782720 ellipse stroke

%%EndProgram

showpage
end %% LEDA_dict
%%EOF

%%EndDocument
 @endspecial 1911 731 a FC(99)-663 b(7)1161 1017 y(13)2532
732 y(3)2361 1017 y(20)237 b(5)2812 1302 y(10)-364 b(6)2361
1588 y(12)2662 1587 y(15)1482 1017 y(7)1461 1302 y(10)3112
1017 y(30)3112 731 y(19)697 1894 y FB(Figur)o(e)19 b(13.4)39
b FK(A)20 b(heap-ordered)h(forest.)577 2168 y FE(void)42
b(decrease)p 1152 2168 27 4 v 28 w(key\(item,GenPtr)o(\);)577
2260 y(void)g(change)p 1064 2260 V 28 w(inf\(item,GenPtr\);)577
2351 y(void)g(clear\(\);)577 2442 y(int)86 b(size\(\))e(const;)577
2561 y(//iteration)577 2652 y(item)42 b(first)p 1020
2652 V 29 w(item\(\))f(const;)577 2744 y(item)h(next)p
976 2744 V 29 w(item\(item\))e(const;)489 2835 y(};)399
3113 y FN(13.10.2)29 b Fv(F)l(ibonacci)22 b(Heaps)399
3229 y FN(In)g(the)g(remainder)f(of)h(this)g(section)f(we)h(gi)n(v)o(e)
f(the)h(Fibonacci)f(heap)h(realization)f(of)h FO(PRIO)p
3236 3229 V 20 w(IMPL)o FN(.)399 3453 y FP(De\002nition)17
b(and)i(Header)f(File:)44 b FN(Fibonacci)17 b(heaps)h(\(class)h
FO(f)p 2333 3453 V 33 w(heap)p FN(\))f(are)h(one)f(of)h(the)g(best)f
(realizations)399 3570 y(of)32 b(priority)g(queues)f([FT87].)59
b(The)o(y)31 b(represent)h(priority)g(queues)f(as)i(heap-ordered)e
(forests.)58 b(The)399 3686 y(items)20 b(of)g(the)h(priority)f(queue)g
(are)h(in)f(one-to-one)g(correspondence)e(to)j(the)g
FO(nodes)f FN(of)h(the)f(forest;)h(so)f(it)399 3802 y(mak)o(es)k(sense)
g(to)h(talk)g(about)f(the)h(k)o(e)o(y)f(and)h(the)g(information)e(of)i
(a)g(node.)36 b(A)25 b(forest)f(is)h FO(heap-or)m(der)m(ed)399
3918 y FN(if)c(each)h(tree)f(in)h(the)f(forest)h(is)f
FO(heap-or)m(der)m(ed)p FN(,)f(and)i(a)g(tree)f(is)h(heap-ordered)e(if)
i(the)f(k)o(e)o(y)h(of)f(e)n(v)o(ery)g(non-)399 4035
y(root)i(node)g(is)h(no)g(less)f(than)g(the)h(k)o(e)o(y)f(of)h(the)f
(parent)g(of)h(the)g(node.)32 b(In)23 b(other)h(w)o(ords,)g(the)f
(sequence)g(of)399 4151 y(k)o(e)o(ys)18 b(along)i(an)o(y)f(root)g(to)g
(leaf)h(path)f(is)h(non-decreasing.)25 b(Figure)19 b(13.4)g(sho)n(ws)g
(a)h(heap-ordered)e(forest.)489 4267 y(In)28 b(the)g(storage)f
(representation)f(of)i FO(f)p 1688 4267 V 34 w(heap)o
FN(s)g(e)n(v)o(ery)f(node)h(contains)f(a)h(pointer)f(to)h(its)g(parent)
f(\(the)399 4383 y(parent)e(pointer)g(of)g(a)h(root)g(is)g
FO(nil)p FN(\))f(and)h(to)g(one)f(of)h(its)g(children.)38
b(The)25 b(child-pointer)g(is)g FO(nil)h FN(if)g(a)g(node)399
4499 y(has)e(no)g(children.)34 b(The)24 b(children)g(of)g(each)g(node)g
(and)g(also)g(the)h(roots)f(of)g(the)g(trees)g(in)h(a)f
FO(f)p 3258 4499 V 34 w(heap)g FN(form)399 4616 y(a)j(doubly-link)o(ed)
e(circular)h(list)h(\(pointers)g FO(left)h FN(and)f FO(right)q
FN(\).)43 b(In)27 b(addition,)h(e)n(v)o(ery)e(node)h(contains)f(the)399
4732 y(four)e(\002elds)h FO(r)o(ank)p FN(,)h FO(mark)o(ed)r
FN(,)g FO(ne)n(xt)q FN(,)g(and)f FO(pr)m(ed)r FN(.)36
b(The)25 b FO(r)o(ank)g FN(\002eld)g(of)g(each)f(node)h(contains)f(the)
g(number)399 4848 y(of)g(children)f(of)h(the)g(node)g(and)f(the)h
FO(mark)o(ed)i FN(\002eld)e(is)g(a)g(boolean)g(\003ag)f(whose)h
(purpose)f(will)h(be)g(made)399 4964 y(clear)j(belo)n(w)-6
b(.)43 b(The)28 b FO(ne)n(xt)h FN(and)e FO(pr)m(ed)i
FN(\002elds)f(are)f(used)g(to)h(k)o(eep)f(all)h(nodes)f(of)g(a)h
(Fibonacci)f(heap)g(in)h(a)399 5081 y(doubly-link)o(ed)d(linear)i
(list.)43 b(This)27 b(list)g(is)g(needed)g(for)g(the)g
FO(for)o(all)p 2490 5081 V 20 w(items)o FN(-iteration.)42
b(An)27 b FO(f)p 3268 5081 V 34 w(heap)o FN(-item)399
5197 y(\(type)c FO(F)p 659 5197 V 24 w(heap)8 b FN(::)t
FO(item)p FN(\))24 b(is)g(a)g(pointer)g(to)g(a)g(node.)34
b(Figure)23 b(13.5)i(sho)n(ws)e(the)h(storage)f(representation)g(of)399
5313 y(the)e(heap-ordered)g(forest)g(of)i(Figure)e(13.4.)489
5429 y(The)g(constructor)f(of)h(class)g FO(f)p 1399 5429
V 33 w(heap)p 1594 5429 V 20 w(node)g FN(creates)f(a)h(ne)n(w)g(node)f
FD(h)p FI(k)6 b FJ(;)14 b FI(i)9 b FD(i)20 b FN(and)h(initializes)f
(some)h(of)g(the)p eop
%%Page: 47 4
47 46 bop 399 399 a FK(13.10)39 b(Priority)21 b(Queues)e(by)h
(Fibonacci)g(Heaps)f(\(A)h(Complete)g(Example\))1135
b(47)907 2637 y @beginspecial @setspecial
%%BeginDocument: ./figs/storage.ps
%!PS-Adobe-2.0
%%Creator: LEDA GraphWin
%%CreationDate: Sat Nov 28 16:42:49 1998
%%Pages:  1
%%BoundingBox:  -20 -20 326.18 262.6
%%EndComments
/LEDA_dict 100 dict def
LEDA_dict begin
%%
%% COLORS
/white { 1.000 1.000 1.000 } def
/black { 0.000 0.000 0.000 } def
/red { 1.000 0.000 0.000 } def
/green { 0.000 0.933 0.000 } def
/blue { 0.000 0.000 0.804 } def
/yellow { 1.000 1.000 0.000 } def
/violet { 0.627 0.125 0.941 } def
/orange { 1.000 0.549 0.000 } def
/cyan { 0.000 1.000 1.000 } def
/brown { 0.627 0.322 0.176 } def
/pink { 1.000 0.000 1.000 } def
/green2 { 0.047 0.702 0.627 } def
/blue2 { 0.392 0.584 0.929 } def
/grey1 { 0.851 0.851 0.851 } def
/grey2 { 0.702 0.702 0.702 } def
/grey3 { 0.451 0.451 0.451 } def
/ivory { 1.000 1.000 0.894 } def
%%
%% FONTS
/font_dict 2 dict def
/set_font {
  font_dict
  begin
    /font_size exch def /font_name exch def
    font_name cvn findfont font_size scalefont setfont
  end
} def
%%
%% POLYGONS
/polygon_dict 1 dict def
/poly_line {
  polygon_dict
  begin
    /points exch def
    points 2 mul dup 2 sub roll
    moveto
    points 1 sub
    dup { dup 2 mul 1 add -2 roll lineto 1 sub} repeat
    pop
  end
} def
/polygon { newpath poly_line closepath } def
%%
%% ELLIPSES
/ellipse_dict 4 dict def
/ellipse {
  ellipse_dict
  begin
    /yrad exch def /xrad exch def /ypos exch def /xpos exch def
    matrix currentmatrix
    xpos ypos translate
    xrad yrad scale
    0 0 1 0 360 arc
    setmatrix
  end
} def
%%
%% hatching
/hatch1_dict 4 dict def
/hatch1_rect {
 hatch1_dict
 begin
  0.25 units setlinewidth
  /ymax exch def /xmax exch def /ymin exch def /xmin exch def
  xmin ymax ymin sub sub 3 units xmax 
  { ymin moveto ymax ymin sub dup rlineto stroke } for
 end
} def
%
/hatch2_dict 4 dict def
/hatch2_rect {
 hatch2_dict
 begin
  0.25 units setlinewidth
  /ymax exch def /xmax exch def /ymin exch def /xmin exch def
  xmax ymax ymin sub add -3 units xmin 
  { ymin moveto ymin ymax sub ymax ymin sub rlineto stroke } for
 end
} def
%%
%% TEXT
/draw_text {
  3 dict begin
    /label exch def /ypos exch def /xpos exch def
    xpos ypos moveto
    label show
  end
} def
%%
/draw_ctext {
  8 dict begin
   /sz exch def /label exch def /ypos exch def /xpos exch def
   xpos ypos moveto
   label stringwidth pop -2 div sz -0.32 mul rmoveto
   label show
  end
} def
%%
%% PIXMAPS
/draw_pixmap {
 10 dict begin
   /ly exch def /lx exch def /h exch def /w exch def /y exch def /x exch def
   /pix w 3 mul string def
   x y translate
   lx ly scale
   w h 8 [w 0 0  0 h sub  0 h]
   {currentfile pix readhexstring pop}
   false 3 colorimage
 end
} def
%%
%% LINESTYLES
/units  { f_scale div } def
/solid  { [ ] } def
/dashed { [ 3 units 2 units] } def
/dotted { [ 0.5 units 2 units ] } def
/dashed_dotted { [ 3 units 2 units 0.5 units 2 units ] } def
/set_line_style { 0 setdash } def
%%
%% INIT
1 1 scale
1 setlinewidth
(Helvetica) 12.0 set_font
%%EndProlog
%%
%%BeginProgram
45.880981 -42.914020 translate
/f_scale 0.585536  def
0.585536 0.585536 scale
(Times-Roman) 11.031100 set_font
0.740741 setlinewidth
228.821200 268.629014 220.359711 263.753735 223.240912 268.633945 220.368340 273.519238 4 polygon fill
137.178800 268.709986 223.240912 268.633945 2 poly_line stroke
283.178800 251.429439 291.115977 257.118583 288.732154 251.977070 292.074332 247.400214 4 polygon fill
82.821200 251.398547 75.783604 252.097393 69.735948 252.773695 64.645755 253.427456 60.480551 254.058675 57.207861 254.667354 54.795209 255.253494 53.210120 255.817094 52.420118 256.358157 52.392729 256.876681 53.095477 257.372669 54.495887 257.846121 56.561483 258.297038 59.259791 258.725421 62.558335 259.131269 66.424639 259.514585 70.826230 259.875368 75.730630 260.213620 81.105366 260.529341 86.917961 260.822532 93.135941 261.093194 99.726830 261.341327 106.658153 261.566932 113.897434 261.770010 121.412199 261.950562 129.169973 262.108588 137.138279 262.244089 145.284643 262.357067 153.576589 262.447521 161.981642 262.515452 170.467327 262.560861 179.001169 262.583749 187.550692 262.584117 196.083421 262.561965 204.566881 262.517295 212.968596 262.450106 221.256092 262.360399 229.396893 262.248176 237.358523 262.113437 245.108508 261.956183 252.614372 261.776414 259.843640 261.574131 266.763837 261.349336 273.342487 261.102028 279.547115 260.832209 285.345247 260.539878 290.704405 260.225038 295.592117 259.887689 299.975905 259.527831 303.823295 259.145465 307.101812 258.740592 309.778980 258.313213 311.822323 257.863328 313.199368 257.390939 313.877638 256.896045 313.824659 256.378648 313.007954 255.838748 311.395050 255.276347 308.953469 254.691444 305.650738 254.084041 301.454381 253.454138 296.331922 252.801736 290.250887 252.126837 288.732154 251.977070 64 poly_line stroke
57.010016 199.975562 52.140111 208.440145 57.018490 205.555846 61.905607 208.425315 4 polygon fill
82.821200 228.880373 57.053100 228.346000 57.018490 205.555846 3 poly_line stroke
82.821200 271.709038 73.860282 267.827405 77.277657 272.348390 74.979148 277.528604 4 polygon fill
283.178800 271.402873 290.250887 272.171580 296.331922 272.917345 301.454381 273.640086 305.650738 274.339719 308.953469 275.016160 311.395050 275.669326 313.007954 276.299133 313.824659 276.905498 313.877638 277.488337 313.199368 278.047567 311.822323 278.583103 309.778980 279.094863 307.101812 279.582763 303.823295 280.046719 299.975905 280.486647 295.592117 280.902465 290.704405 281.294088 285.345247 281.661433 279.547115 282.004416 273.342487 282.322954 266.763837 282.616964 259.843640 282.886361 252.614372 283.131062 245.108508 283.350984 237.358523 283.546042 229.396893 283.716154 221.256092 283.861236 212.968596 283.981204 204.566881 284.075974 196.083421 284.145464 187.550692 284.189589 179.001169 284.208266 170.467327 284.201412 161.981642 284.168942 153.576589 284.110773 145.284643 284.026822 137.138279 283.917005 129.169973 283.781239 121.412199 283.619439 113.897434 283.431523 106.658153 283.217407 99.726830 282.977007 93.135941 282.710239 86.917961 282.417021 81.105366 282.097267 75.730630 281.750896 70.826230 281.377824 66.424639 280.977966 62.558335 280.551239 59.259791 280.097560 56.561483 279.616844 54.495887 279.109010 53.095477 278.573972 52.392729 278.011648 52.420118 277.421953 53.210120 276.804804 54.795209 276.160118 57.207861 275.487812 60.480551 274.787800 64.645755 274.060001 69.735948 273.304330 75.783604 272.520703 77.277657 272.348390 64 poly_line stroke
137.178800 248.848935 145.634372 253.734469 142.759090 248.850770 145.637582 243.968962 4 polygon fill
228.821200 248.879065 142.759090 248.850770 2 poly_line stroke
257.654670 190.346900 252.771916 198.804078 257.654670 195.927190 262.537424 198.804078 4 polygon fill
257.654670 219.191100 257.654670 195.927190 2 poly_line stroke
228.821200 144.615055 219.801563 140.871891 223.288162 145.339708 221.069706 150.554708 4 polygon fill
283.178800 145.115611 289.424839 146.054762 294.961440 146.961756 299.812215 147.836672 304.000778 148.679588 307.550740 149.490584 310.485714 150.269738 312.829312 151.017130 314.605147 151.732838 315.836831 152.416942 316.547978 153.069520 316.762198 153.690651 316.503105 154.280415 315.794311 154.838890 314.659429 155.366155 313.122070 155.862290 311.205849 156.327372 308.934376 156.761483 306.331264 157.164699 303.420126 157.537101 300.224575 157.878767 296.768222 158.189776 293.074681 158.470207 289.167563 158.720139 285.070481 158.939652 280.807048 159.128823 276.400875 159.287733 271.875577 159.416459 267.254764 159.515082 262.562049 159.583680 257.821046 159.622332 253.055365 159.631116 248.288620 159.610113 243.544424 159.559401 238.846388 159.479058 234.218125 159.369165 229.683248 159.229799 225.265369 159.061040 220.988100 158.862967 216.875054 158.635659 212.949843 158.379195 209.236080 158.093653 205.757378 157.779113 202.537348 157.435654 199.599603 157.063355 196.967756 156.662294 194.665419 156.232551 192.716205 155.774205 191.143725 155.287334 189.971593 154.772018 189.223421 154.228335 188.922822 153.656365 189.093407 153.056187 189.758789 152.427879 190.942581 151.771521 192.668395 151.087191 194.959844 150.374968 197.840539 149.634933 201.334095 148.867162 205.464122 148.071736 210.254234 147.248733 215.728042 146.398233 221.909160 145.520314 223.288162 145.339708 64 poly_line stroke
283.178800 126.330889 290.819544 132.412350 288.697548 127.157362 292.265872 122.754541 4 polygon fill
228.821200 125.831725 221.909160 126.733202 215.728042 127.607460 210.254234 128.454421 205.464122 129.274004 201.334095 130.066131 197.840539 130.830723 194.959844 131.567701 192.668395 132.276986 190.942581 132.958500 189.758789 133.612163 189.093407 134.237896 188.922822 134.835620 189.223421 135.405257 189.971593 135.946728 191.143725 136.459953 192.716205 136.944854 194.665419 137.401351 196.967756 137.829366 199.599603 138.228820 202.537348 138.599634 205.757378 138.941729 209.236080 139.255026 212.949843 139.539446 216.875054 139.794910 220.988100 140.021339 225.265369 140.218654 229.683248 140.386777 234.218125 140.525628 238.846388 140.635128 243.544424 140.715199 248.288620 140.765761 253.055365 140.786736 257.821046 140.778044 262.562049 140.739607 267.254764 140.671346 271.875577 140.573182 276.400875 140.445036 280.807048 140.286828 285.070481 140.098481 289.167563 139.879914 293.074681 139.631050 296.768222 139.351809 300.224575 139.042112 303.420126 138.701880 306.331264 138.331035 308.934376 137.929497 311.205849 137.497187 313.122070 137.034027 314.659429 136.539938 315.794311 136.014840 316.503105 135.458655 316.762198 134.871304 316.547978 134.252707 315.836831 133.602786 314.605147 132.921463 312.829312 132.208657 310.485714 131.464290 307.550740 130.688284 304.000778 129.880558 299.812215 129.041035 294.961440 128.169635 289.424839 127.266279 288.697548 127.157362 64 poly_line stroke
302.794302 77.323862 297.903517 85.776398 302.789002 82.904150 307.669020 85.785674 4 polygon fill
283.178800 102.913864 302.770000 102.908000 302.789002 82.904150 3 poly_line stroke
210.900600 418.351032 219.045356 423.738803 216.470572 418.690214 219.638925 413.991352 4 polygon fill
155.765400 418.213628 145.282611 418.799376 135.896067 419.367960 127.569874 419.919298 120.268136 420.453307 113.954958 420.969907 108.594447 421.469016 104.150707 421.950552 100.587844 422.414434 97.869962 422.860579 95.961168 423.288907 94.825566 423.699335 94.427261 424.091782 94.730360 424.466167 95.698967 424.822407 97.297187 425.160421 99.489127 425.480127 102.238890 425.781445 105.510583 426.064291 109.268310 426.328584 113.476177 426.574244 118.098289 426.801187 123.098751 427.009333 128.441670 427.198600 134.091149 427.368906 140.011294 427.520169 146.166211 427.652309 152.520005 427.765242 159.036781 427.858888 165.680644 427.933165 172.415700 427.987992 179.206054 428.023286 186.015810 428.038966 192.809076 428.034950 199.549954 428.011157 206.202552 427.967505 212.730974 427.903912 219.099326 427.820298 225.271712 427.716579 231.212239 427.592675 236.885011 427.448504 242.254133 427.283983 247.283711 427.099033 251.937851 426.893570 256.180656 426.667513 259.976234 426.420781 263.288688 426.153292 266.082125 425.864964 268.320649 425.555716 269.968366 425.225466 270.989381 424.874132 271.347800 424.501633 271.007727 424.107887 269.933268 423.692813 268.088528 423.256328 265.437612 422.798351 261.944626 422.318801 257.573675 421.817595 252.288865 421.294653 246.054300 420.749892 238.834085 420.183231 230.592327 419.594589 221.293130 418.983883 216.470572 418.690214 64 poly_line stroke
155.765400 437.856915 147.036242 433.478909 150.194728 438.184409 147.609357 443.227585 4 polygon fill
210.900600 438.006269 221.248517 438.671102 230.506939 439.312636 238.711643 439.930959 245.898405 440.526158 252.103002 441.098321 257.361210 441.647534 261.708807 442.173886 265.181570 442.677463 267.815274 443.158353 269.645697 443.616643 270.708616 444.052421 271.039806 444.465773 270.675046 444.856788 269.650111 445.225552 268.000779 445.572153 265.762826 445.896679 262.972028 446.199216 259.664164 446.479851 255.875009 446.738673 251.640340 446.975768 246.995933 447.191225 241.977567 447.385129 236.621016 447.557569 230.962059 447.708632 225.036472 447.838405 218.880031 447.946976 212.528514 448.034431 206.017696 448.100859 199.383356 448.146346 192.661269 448.170980 185.887212 448.174849 179.096962 448.158039 172.326296 448.120637 165.610990 448.062732 158.986822 447.984411 152.489568 447.885760 146.155004 447.766868 140.018908 447.627821 134.117056 447.468707 128.485225 447.289614 123.159192 447.090628 118.174733 446.871836 113.567626 446.633328 109.373646 446.375188 105.628571 446.097506 102.368177 445.800368 99.628242 445.483861 97.444541 445.148073 95.852852 444.793092 94.888951 444.419004 94.588616 444.025897 94.987622 443.613858 96.121747 443.182975 98.026767 442.733335 100.738459 442.265025 104.292600 441.778132 108.724967 441.272745 114.071335 440.748950 120.367483 440.206834 127.649187 439.646486 135.952223 439.067991 145.312369 438.471438 150.194728 438.184409 64 poly_line stroke
175.512266 387.218900 173.855715 377.594921 171.942778 382.929565 166.349380 383.841525 4 polygon fill
118.558031 318.778900 171.942778 382.929565 2 poly_line stroke
192.051526 387.218900 201.156227 383.687674 195.548263 382.870053 193.545745 377.568385 4 polygon fill
247.731120 317.970900 195.548263 382.870053 2 poly_line stroke
254.345330 219.191100 259.228084 210.733922 254.345330 213.610810 249.462576 210.733922 4 polygon fill
254.345330 190.346900 254.345330 213.610810 2 poly_line stroke
109.863523 318.778900 104.909962 327.194800 109.816689 324.358994 114.675125 327.276760 4 polygon fill
156.356400 397.108941 154.859829 397.077460 153.387729 397.006887 151.940099 396.897223 150.516939 396.748466 149.118251 396.560617 147.744033 396.333676 146.394285 396.067643 145.069009 395.762518 143.768203 395.418301 142.491867 395.034992 141.240002 394.612591 140.012608 394.151098 138.809684 393.650513 137.631231 393.110836 136.477248 392.532067 135.347736 391.914205 134.242695 391.257252 133.162124 390.561207 132.106024 389.826069 131.074395 389.051840 130.067236 388.238518 129.084548 387.386105 128.126330 386.494599 127.192583 385.564001 126.283307 384.594312 125.398501 383.585530 124.538165 382.537656 123.702301 381.450690 122.890907 380.324633 122.103983 379.159483 121.341531 377.955241 120.603549 376.711907 119.890037 375.429481 119.200996 374.107963 118.536426 372.747353 117.896326 371.347650 117.280697 369.908856 116.689538 368.430970 116.122850 366.913992 115.580633 365.357921 115.062886 363.762759 114.569610 362.128505 114.100805 360.455158 113.656470 358.742720 113.236606 356.991189 112.841212 355.200566 112.470289 353.370852 112.123837 351.502045 111.801855 349.594146 111.504344 347.647156 111.231303 345.661073 110.982733 343.635898 110.758634 341.571631 110.559005 339.468272 110.383847 337.325821 110.233159 335.144278 110.106942 332.923643 110.005196 330.663916 109.927920 328.365097 109.875115 326.027186 109.846780 323.650183 109.842916 321.234087 109.816689 324.358994 64 poly_line stroke
231.344240 458.109562 226.475768 466.574969 231.353659 463.689844 236.241262 466.558486 4 polygon fill
210.958600 475.747535 231.375000 476.333000 231.353659 463.689844 3 poly_line stroke
(Times-Roman) 12.134200 set_font
white setrgbcolor
82.821200 278.279100 137.178800 278.279100 137.178800 298.846900 82.821200 298.846900 4 polygon fill
black setrgbcolor
82.821200 278.279100 137.178800 278.279100 137.178800 298.846900 82.821200 298.846900 4 polygon stroke
white setrgbcolor
82.821200 258.450100 137.178800 258.450100 137.178800 279.017900 82.821200 279.017900 4 polygon fill
black setrgbcolor
82.821200 258.450100 137.178800 258.450100 137.178800 279.017900 82.821200 279.017900 4 polygon stroke
white setrgbcolor
82.821200 238.556100 137.178800 238.556100 137.178800 259.123900 82.821200 259.123900 4 polygon fill
black setrgbcolor
82.821200 238.556100 137.178800 238.556100 137.178800 259.123900 82.821200 259.123900 4 polygon stroke
white setrgbcolor
82.821200 219.160100 137.178800 219.160100 137.178800 239.727900 82.821200 239.727900 4 polygon fill
black setrgbcolor
82.821200 219.160100 137.178800 219.160100 137.178800 239.727900 82.821200 239.727900 4 polygon stroke
white setrgbcolor
228.821200 277.967100 283.178800 277.967100 283.178800 298.534900 228.821200 298.534900 4 polygon fill
black setrgbcolor
228.821200 277.967100 283.178800 277.967100 283.178800 298.534900 228.821200 298.534900 4 polygon stroke
white setrgbcolor
228.821200 258.321100 283.178800 258.321100 283.178800 278.888900 228.821200 278.888900 4 polygon fill
black setrgbcolor
228.821200 258.321100 283.178800 258.321100 283.178800 278.888900 228.821200 278.888900 4 polygon stroke
white setrgbcolor
228.821200 238.604100 283.178800 238.604100 283.178800 259.171900 228.821200 259.171900 4 polygon fill
black setrgbcolor
228.821200 238.604100 283.178800 238.604100 283.178800 259.171900 228.821200 259.171900 4 polygon stroke
white setrgbcolor
228.821200 219.191100 283.178800 219.191100 283.178800 239.758900 228.821200 239.758900 4 polygon fill
black setrgbcolor
228.821200 219.191100 283.178800 219.191100 283.178800 239.758900 228.821200 239.758900 4 polygon stroke
45.990500 198.506438 68.027300 198.506438 68.027300 199.975562 45.990500 199.975562 4 polygon fill
45.990500 198.506438 68.027300 198.506438 68.027300 199.975562 45.990500 199.975562 4 polygon stroke
white setrgbcolor
228.821200 149.856100 283.178800 149.856100 283.178800 170.423900 228.821200 170.423900 4 polygon fill
black setrgbcolor
228.821200 149.856100 283.178800 149.856100 283.178800 170.423900 228.821200 170.423900 4 polygon stroke
white setrgbcolor
228.821200 130.903100 283.178800 130.903100 283.178800 151.470900 228.821200 151.470900 4 polygon fill
black setrgbcolor
228.821200 130.903100 283.178800 130.903100 283.178800 151.470900 228.821200 151.470900 4 polygon stroke
white setrgbcolor
228.821200 112.134100 283.178800 112.134100 283.178800 132.701900 228.821200 132.701900 4 polygon fill
black setrgbcolor
228.821200 112.134100 283.178800 112.134100 283.178800 132.701900 228.821200 132.701900 4 polygon stroke
white setrgbcolor
228.821200 92.638100 283.178800 92.638100 283.178800 113.205900 228.821200 113.205900 4 polygon fill
black setrgbcolor
228.821200 92.638100 283.178800 92.638100 283.178800 113.205900 228.821200 113.205900 4 polygon stroke
white setrgbcolor
155.765400 406.621900 210.900600 406.621900 210.900600 426.838100 155.765400 426.838100 4 polygon fill
black setrgbcolor
155.765400 406.621900 210.900600 406.621900 210.900600 426.838100 155.765400 426.838100 4 polygon stroke
white setrgbcolor
155.765400 426.187900 210.900600 426.187900 210.900600 446.404100 155.765400 446.404100 4 polygon fill
black setrgbcolor
155.765400 426.187900 210.900600 426.187900 210.900600 446.404100 155.765400 446.404100 4 polygon stroke
white setrgbcolor
155.765400 445.495900 210.900600 445.495900 210.900600 465.712100 155.765400 465.712100 4 polygon fill
black setrgbcolor
155.765400 445.495900 210.900600 445.495900 210.900600 465.712100 155.765400 465.712100 4 polygon stroke
0.725325 setlinewidth
white setrgbcolor
82.821200 298.211100 137.178800 298.211100 137.178800 318.778900 82.821200 318.778900 4 polygon fill
black setrgbcolor
82.821200 298.211100 137.178800 298.211100 137.178800 318.778900 82.821200 318.778900 4 polygon stroke
white setrgbcolor
228.821200 297.403100 283.178800 297.403100 283.178800 317.970900 228.821200 317.970900 4 polygon fill
black setrgbcolor
228.821200 297.403100 283.178800 297.403100 283.178800 317.970900 228.821200 317.970900 4 polygon stroke
white setrgbcolor
228.821200 169.779100 283.178800 169.779100 283.178800 190.346900 228.821200 190.346900 4 polygon fill
black setrgbcolor
228.821200 169.779100 283.178800 169.779100 283.178800 190.346900 228.821200 190.346900 4 polygon stroke
white setrgbcolor
156.356400 387.218900 211.491600 387.218900 211.491600 407.435100 156.356400 407.435100 4 polygon fill
black setrgbcolor
156.356400 387.218900 211.491600 387.218900 211.491600 407.435100 156.356400 407.435100 4 polygon stroke
white setrgbcolor
155.823400 464.848900 210.958600 464.848900 210.958600 485.065100 155.823400 485.065100 4 polygon fill
black setrgbcolor
155.823400 464.848900 210.958600 464.848900 210.958600 485.065100 155.823400 485.065100 4 polygon stroke
0.734562 setlinewidth
291.776600 75.854738 313.813400 75.854738 313.813400 77.323862 291.776600 77.323862 4 polygon fill
291.776600 75.854738 313.813400 75.854738 313.813400 77.323862 291.776600 77.323862 4 polygon stroke
220.324600 456.640438 242.361400 456.640438 242.361400 458.109562 220.324600 458.109562 4 polygon fill
220.324600 456.640438 242.361400 456.640438 242.361400 458.109562 220.324600 458.109562 4 polygon stroke

%%EndProgram

showpage
end %% LEDA_dict
%%EOF

%%EndDocument
 @endspecial 1781 1618 a Fh(13)1725 1706 y Fc(r)8 b(i)g(g)s(h)t(t)1748
1803 y(l)e(e)k(f)17 b(t)1727 1905 y(c)r(h)s(i)7 b(l)f(d)2512
1620 y Fh(7)2435 1707 y Fc(r)i(i)g(g)s(h)t(t)2458 1803
y(l)e(e)k(f)17 b(t)2437 1905 y(c)r(h)s(i)7 b(l)f(d)2491
2243 y Fh(10)2435 2326 y Fc(r)i(i)g(g)s(h)t(t)2458 2417
y(l)e(e)k(f)17 b(t)2437 2520 y(c)r(h)s(i)7 b(l)f(d)2105
987 y(l)g(e)k(f)17 b(t)2082 892 y(r)8 b(i)g(g)s(h)t(t)2158
806 y Fh(7)1706 1508 y Fc(p)r(a)r(r)h(e)r(n)s(t)2416
1512 y(p)r(a)r(r)g(e)r(n)s(t)2416 2132 y(p)r(a)r(r)g(e)r(n)s(t)2087
1089 y(c)r(h)s(i)e(l)f(d)2063 699 y(p)r(a)r(r)j(e)r(n)s(t)697
2865 y FB(Figur)o(e)19 b(13.5)39 b FK(The)19 b(storage)h
(representation)h(of)e(the)h(heap-ordered)h(forest)f(of)g(Figure)g
(13.4.)25 b(The)18 b FA(k)o(e)n(y)p FK(,)h FA(r)o(ank)p
FK(,)697 2956 y FA(mark)o(ed)p FK(,)h FA(ne)n(xt)p FK(,)g(and)f
FA(pr)m(ed)j FK(\002elds)d(are)g(not)h(sho)n(wn,)g(informations)h(are)f
(inte)o(gers)f(and)h(nil-pointers)h(are)e(sho)n(wn)697
3048 y(as)g(pointing)i(to)e(\223ground\224.)399 3322
y FN(\002elds)h(to)i(their)f(ob)o(vious)f(v)n(alues.)27
b(It)21 b(also)g(adds)g(the)h(ne)n(w)f(item)g(to)g(the)g(front)g(of)h
(the)f(list)g(of)g(all)h(items)f(of)399 3438 y(the)g(heap.)28
b(The)22 b(LED)l(A)g(memory)f(management)g(is)h(used)g(for)g
FO(f)p 2400 3438 27 4 v 33 w(heap)p 2595 3438 V 20 w(node)o
FN(s)h(\(cf.)f(Section)f(13.8\).)399 3612 y FH(h)p FG(f)p
457 3612 25 4 v 30 w(heap.h)p FH(i)n FF(\021)489 3731
y FE(#include)41 b(<LEDA/basic.h>)489 3850 y(class)h(f_heap_node;)489
3968 y(typedef)f(f_heap_node*)e(f_heap_item;)489 4087
y(class)j(f_heap_node)d({)577 4206 y(friend)i(class)g(f_heap;)577
4325 y(f_heap_item)e(left;)215 b(//)43 b(left)f(and)h(right)e(siblings)
f(\(circular)g(list\))577 4416 y(f_heap_item)f(right;)577
4507 y(f_heap_item)g(parent;)127 b(//)43 b(parent)e(node)577
4599 y(f_heap_item)e(child;)171 b(//)43 b(a)g(child)577
4690 y(f_heap_item)c(next;)215 b(//)43 b(list)f(of)h(all)f(items)577
4781 y(f_heap_item)d(pred;)577 4900 y(int)86 b(rank;)520
b(//)43 b(number)e(of)i(children)577 4991 y(bool)f(marked;)432
b(//)43 b(mark)f(bit)577 5110 y(GenPtr)f(key;)477 b(//)43
b(key)577 5201 y(GenPtr)e(inf;)477 b(//)43 b(information)489
5347 y(f_heap_node\(GenPt)o(r)38 b(k,)k(GenPtr)f(info,)h(f_heap_item)d
(n\))489 5439 y({)p eop
%%Page: 48 5
48 47 bop 399 399 a FK(48)2172 b(On)20 b(the)f(Implementation)j(of)e
(LED)m(A)577 714 y FE(//)42 b(the)h(third)e(argument)f(n)k(is)e(always)
g(the)g(first)f(item)h(in)h(the)f(list)577 805 y(//)g(of)h(all)f(items)
g(of)h(a)g(Fibonacci)d(heap.)h(The)i(new)f(item)g(is)h(added)577
897 y(//)f(at)h(the)f(front)g(of)h(the)f(list)577 1015
y(key)g(=)h(k;)577 1107 y(inf)f(=)h(info;)577 1198 y(rank)f(=)h(0;)577
1289 y(marked)e(=)i(false;)577 1381 y(parent)e(=)i(child)e(=)j(nil;)577
1472 y(next)e(=)h(n;)577 1563 y(if)f(\(n\))h(n->pred)d(=)k(this;)489
1655 y(})577 1773 y(LEDA_MEMORY\(f_h)o(eap)o(_n)o(od)o(e\))489
1865 y(};)399 2091 y FN(The)21 b(storage)h(representation)e(of)i(an)g
FO(f)p 1608 2091 27 4 v 34 w(heap)g FN(consists)f(of)h(\002)n(v)o(e)f
(\002elds:)539 2214 y FA(number)p 768 2214 23 4 v 20
w(of)p 857 2214 V 29 w(nodes)100 b FK(the)19 b(number)i(of)e(nodes)h
(in)f(the)h(heap)539 2313 y FA(power)428 b FK(the)19
b(smallest)h(po)n(wer)g(of)g(tw)o(o)f(greater)i(than)e(or)h(equal)f(to)
h FA(number)p 2920 2313 V 20 w(of)p 3009 2313 V 29 w(nodes)539
2413 y(lo)o(gp)485 b FK(the)19 b(binary)i(logarithm)f(of)g(po)n(wer)539
2513 y FA(minptr)416 b FK(a)19 b(pointer)h(to)g(a)f(root)h(with)g
(minimum)h(k)o(e)o(y)539 2612 y FA(node)p 682 2612 V
18 w(list)360 b FK(\002rst)20 b(element)g(in)f(the)h(list)f(of)h(all)f
(nodes)399 2790 y FH(h)p FG(f)p 457 2790 25 4 v 30 w(heap.h)p
FH(i)n Fb(+)p FF(\021)489 2909 y FE(class)42 b(f_heap)85
b({)577 3028 y(int)42 b(number_of_nodes;)577 3119 y(int)g(power;)577
3210 y(int)g(logp;)577 3329 y(f_heap_item)d(minptr;)577
3420 y(f_heap_item)g(node_list;)577 3539 y FH(h)p FG(virtual)20
b(functions)f(r)m(elated)h(to)h(k)o(e)n(ys)f(and)f(infs)p
FH(i)577 3630 y(h)p FG(auxiliary)h(functions)p FH(i)489
3749 y FE(public:)577 3868 y(typedef)40 b(f_heap_item)f(item;)489
3987 y(protected:)577 4105 y(//)j(constructors,)d(destructor,)g
(assignment)577 4197 y(f_heap\(\);)577 4288 y(f_heap\(const)f
(f_heap&\);)577 4379 y(f_heap&)i(operator=\(const)e(f_heap&\);)577
4471 y(virtual)i(~f_heap\(\);)577 4589 y(//)i(priority)f(queue)g
(operations)577 4681 y(f_heap_item)e(insert\(GenPtr,)e(GenPtr\);)577
4772 y(f_heap_item)i(find_min\(\))83 b(const;)577 4891
y(void)129 b(del_min\(\);)577 4982 y(void)g(decrease_key\(f_)o(hea)o
(p_)o(ite)o(m,)o(Gen)o(Pt)o(r\))o(;)577 5073 y(void)g(change_inf\(f_he)
o(ap_)o(it)o(em,)o(Ge)o(nPt)o(r\))o(;)577 5165 y(void)g
(del_item\(f_heap)o(_it)o(em)o(\);)577 5256 y(void)g(clear\(\);)577
5375 y(GenPtr)41 b(key\(f_heap_item)o(\))d(const;)577
5466 y(GenPtr)j(inf\(f_heap_item)o(\))d(const;)p eop
%%Page: 49 6
49 48 bop 399 399 a FK(13.10)39 b(Priority)21 b(Queues)e(by)h
(Fibonacci)g(Heaps)f(\(A)h(Complete)g(Example\))1135
b(49)577 714 y FE(int)173 b(size\(\))41 b(const;)577
805 y(bool)129 b(empty\(\))40 b(const;)577 923 y(//)i(iteration)577
1015 y(f_heap_item)d(first_item\(\))f(const;)577 1106
y(f_heap_item)h(next_item\(f_hea)o(p_i)o(te)o(m\))e(const;)489
1197 y(};)489 1423 y FN(W)-7 b(e)25 b(turn)g(to)g(the)g(implementation)
f(of)h(the)g(member)f(functions.)36 b(The)25 b(\002le)p
2878 1423 27 4 v 57 w(f)p 2940 1423 V 33 w(heap.c)f(contains)h(the)399
1539 y(implementations)20 b(of)i(all)g(operations)f(on)h
FO(f)p 1768 1539 V 34 w(heap)o FN(s.)399 1761 y FP(Construction:)42
b FN(T)-7 b(o)22 b(create)g(an)g(empty)g FO(f)p 1714
1761 V 34 w(heap)g FN(set)g FO(number)p 2331 1761 V 22
w(of)p 2434 1761 V 33 w(nodes)g FN(to)g(zero,)h FO(power)h
FN(to)e(one,)h FO(lo)o(gp)399 1877 y FN(to)f(zero,)g(and)g
FO(minptr)h FN(and)f FO(node)p 1426 1877 V 20 w(list)i
FN(to)e FO(nil)p FN(.)399 2051 y FH(h)p 434 2051 25 4
v 30 w FG(f)p 487 2051 V 30 w(heap.c)p FH(i)n FF(\021)489
2169 y FE(#include)41 b(<LEDA/basic.h>)489 2260 y(#include)g
("f_heap.h")489 2378 y(f_heap::f_heap\(\))489 2470 y({)j
(number_of_nodes)37 b(=)43 b(0;)577 2561 y(power)e(=)i(1;)577
2652 y(logp)f(=)h(0;)577 2744 y(minptr)e(=)i(nil;)577
2835 y(node_list)c(=)44 b(nil;)489 2926 y(})399 3230
y FP(Simple)37 b(Operations)g(on)h(Heaps:)44 b FN(W)-7
b(e)37 b(discuss)h(create,)k(\002ndmin,)g(size,)g(empty)-6
b(,)42 b(k)o(e)o(y)-6 b(,)42 b(inf,)h(and)399 3347 y(change)p
659 3347 27 4 v 31 w(k)o(e)o(y)-6 b(.)30 b(A)23 b FO(\002nd)p
1078 3347 V 22 w(min)g FN(operation)f(simply)h(returns)f(the)h(item)f
(pointed)h(to)g(by)g FO(minptr)q FN(.)30 b(The)23 b(empty)399
3463 y(operation)15 b(compares)h FO(number)p 1386 3463
V 21 w(of)p 1488 3463 V 34 w(nodes)g FN(to)h(zero,)h(and)e(the)h
FO(size)f FN(operation)g(returns)g FO(number)p 3340 3463
V 22 w(of)p 3443 3463 V 33 w(nodes)o FN(.)399 3579 y(Both)21
b(operations)g(tak)o(e)h(constant)f(time.)489 3695 y(The)i
FO(k)o(e)m(y)g FN(and)f FO(inf)36 b FN(operations)22
b(apply)g(to)h(an)f(item)h(and)f(return)h(the)f(appropriate)g
(component)f(of)i(the)399 3811 y(item.)489 3928 y(The)k
FO(c)o(hang)o(e)p 908 3928 V 19 w(inf)40 b FN(operations)26
b(applies)g(to)h(an)g(item)h FI(x)35 b FN(and)27 b(an)g(information)e
FO(inf)40 b FN(and)27 b(changes)f(the)399 4044 y(information)e
(associated)h(with)j FI(x)34 b FN(to)26 b(a)h(cop)o(y)e(of)h
FO(inf)13 b FN(.)40 b(It)26 b(also)g(clears)f(the)h(memory)f(used)h
(for)g(the)g(old)399 4160 y(information.)399 4334 y FH(h)p
434 4334 25 4 v 30 w FG(f)p 487 4334 V 30 w(heap.c)p
FH(i)n Fb(+)p FF(\021)489 4452 y FE(f_heap_item)39 b
(f_heap::find_min\()o(\))386 b(const)42 b({)h(return)e(minptr;)g(})489
4543 y(int)391 b(f_heap::size\(\))561 b(const)42 b({)h(return)e
(number_of_nodes;)c(})489 4662 y(bool)347 b(f_heap::empty\(\))517
b(const)2233 4753 y({)43 b(return)e(number_of_nodes)d(==)k(0;)h(})489
4871 y(GenPtr)259 b(f_heap::key\(f_hea)o(p_i)o(te)o(m)38
b(x\))k(const)g({)h(return)e(x->key;)g(})489 4962 y(GenPtr)259
b(f_heap::inf\(f_hea)o(p_i)o(te)o(m)38 b(x\))k(const)g({)h(return)e
(x->inf;)g(})489 5080 y(void)h(f_heap::change_in)o(f\()o(f_h)o(ea)o
(p_i)o(te)o(m)c(x,)k(GenPtr)f(i\))489 5172 y({)j(clear_inf\(x->in)o
(f\);)577 5263 y(copy_inf\(i\);)577 5354 y(x->inf)d(=)i(i;)489
5446 y(})p eop
%%Page: 50 7
50 49 bop 399 399 a FK(50)2172 b(On)20 b(the)f(Implementation)j(of)e
(LED)m(A)399 714 y FN(W)-7 b(e)25 b(ha)n(v)o(e)g(used)h(functions)f
FO(clear)p 1466 714 27 4 v 22 w(k)o(e)m(y)h FN(and)g
FO(copy)p 1954 714 V 20 w(k)o(e)m(y)g FN(without)f(de\002ning)g(them.)
39 b(Both)26 b(functions)f(be-)399 830 y(long)e(to)h(the)g(set)g(of)g
(virtual)g(functions)f(of)h(class)g FO(f)p 1980 830 V
33 w(heap)g FN(which)g(we)f(need)h(to)g(mak)o(e)g FO(f)p
3115 830 V 34 w(heap)f FN(a)h(param-)399 946 y(eterized)j(data)h
(structure.)46 b(W)-7 b(e)28 b(declare)g(these)g(functions)f(as)i(pure)
f(virtual)g(and)g(de\002ne)g(them)g(in)h(the)399 1063
y(de\002nition)21 b(of)h(the)g(class)f FO(p)p 1229 1063
V 21 w(queue)o FL(<)5 b FI(K)10 b FJ(;)21 b FI(I)11 b
FL(>)23 b FN(as)f(discussed)f(in)h(Section)f(13.4.)489
1179 y(The)f(six)f(virtual)g(functions)g(are:)26 b FO(cmp)19
b FN(compares)g(tw)o(o)g(k)o(e)o(ys)g(\(of)h(type)27
b FI(P)7 b FN(\),)21 b FO(clear)p 3033 1179 V 22 w(k)o(e)m(y)e
FN(and)h FO(clear)p 3525 1179 V 22 w(inf)399 1295 y FN(deallocate)28
b(a)h(k)o(e)o(y)g(and)g(an)g(information,)h(respecti)n(v)o(ely)-6
b(,)30 b FO(copy)p 2410 1295 V 20 w(k)o(e)m(y)f FN(and)g
FO(copy)p 2904 1295 V 20 w(inf)43 b FN(return)28 b(a)i(cop)o(y)f(of)399
1411 y(their)k(ar)n(gument,)k(and)d FO(k)o(e)m(y)p 1268
1411 V 20 w(type)p 1438 1411 V 20 w(id)s FJ(.)25 b(/)35
b FN(determines)e(whether)g(its)h(ar)n(gument)f(belongs)h(to)g(a)g(b)n
(uilt-in)399 1528 y(type)19 b(as)i(discussed)e(in)h(Section)g(13.5.)27
b(It)21 b(is)f(used)g(to)g(bypass)g(the)g(calls)g(to)g(compare)f
(function)h(for)g(such)399 1644 y(types.)399 1818 y FH(h)p
FG(virtual)g(functions)f(r)m(elated)h(to)h(k)o(e)n(ys)f(and)f(infs)p
FH(i)q FF(\021)489 1937 y FE(virtual)41 b(int)173 b(cmp\(GenPtr,GenPtr)
o(\))212 b(const)41 b(=)i(0;)489 2028 y(virtual)e(void)129
b(clear_key\(GenPtr&)o(\))212 b(const)41 b(=)i(0;)489
2120 y(virtual)e(void)129 b(clear_inf\(GenPtr&)o(\))212
b(const)41 b(=)i(0;)489 2211 y(virtual)e(GenPtr)g(copy_key\(GenPtr&\))
255 b(const)41 b(=)i(0;)489 2302 y(virtual)e(GenPtr)g
(copy_inf\(GenPtr&\))255 b(const)41 b(=)i(0;)489 2394
y(virtual)e(int)173 b(key_type_id\(\))431 b(const)41
b(=)i(0;)399 2701 y FP(Some)21 b(Theory:)44 b FN(The)22
b(non-tri)n(vial)f(operations)g(are)i FO(insert)q FN(,)g
FO(decr)m(ease)p 2636 2701 V 19 w(inf)35 b FN(and)22
b FO(del)p 3047 2701 V 21 w(min)o FN(.)29 b(W)-7 b(e)22
b(discuss)399 2817 y(them)j(in)h(some)g(detail)g(no)n(w)-6
b(.)39 b(The)26 b(discussion)f(will)h(be)g(on)g(the)g(le)n(v)o(el)f(of)
h(heap-ordered)f(forests.)39 b(All)399 2933 y(implementation)20
b(details)h(will)h(be)g(gi)n(v)o(en)f(later)-5 b(.)489
3049 y(An)22 b(insert)f(adds)h(a)g(ne)n(w)f(single)g(node)h(tree)f(to)h
(the)f(Fibonacci)g(heap)h(and,)g(if)f(necessary)-6 b(,)22
b(adjusts)f(the)399 3166 y FO(minptr)q FN(.)37 b(So)25
b(a)g(sequence)f(of)h FI(n)30 b FN(inserts)24 b(into)h(an)g(initially)g
(empty)f(heap)h(will)g(simply)f(create)h FI(n)k FN(single)399
3282 y(node)21 b(trees.)28 b(The)22 b(cost)f(of)i(an)f(insert)f(is)h
(clearly)28 b FI(O)6 b FJ(.)p FN(1)p FJ(/)p FN(.)489
3423 y(A)32 b FO(del)p 690 3423 V 20 w(min)f FN(operation)g(remo)o(v)o
(es)f(the)h(node)g(indicated)g(by)g FO(minptr)q FN(.)56
b(This)32 b(turns)f(all)g(children)g(of)399 3539 y(the)c(remo)o(v)o(ed)
e(node)i(into)g(roots.)43 b(W)-7 b(e)27 b(then)g(scan)g(the)g(set)h(of)
f(roots)g(\(old)g(and)g(ne)n(w\))g(to)g(\002nd)g(the)g(ne)n(w)399
3655 y(minimum.)e(T)-7 b(o)17 b(\002nd)g(the)g(ne)n(w)f(minimum)g(we)h
(need)g(to)g(inspect)f(all)h(roots)g(\(old)g(and)g(ne)n(w\),)h(a)f
(potentially)399 3772 y(v)o(ery)27 b(costly)h(process.)45
b(W)-7 b(e)28 b(mak)o(e)g(the)g(process)g(e)n(v)o(en)f(more)h(e)o
(xpensi)n(v)o(e)e(\(by)i(a)h(constant)e(f)o(actor\))h(by)399
3888 y(doing)35 b(some)g(useful)g(w)o(ork)g(on)h(the)f(side,)k(namely)c
(combining)f(trees)i(of)f(equal)g(rank)g(into)h(lar)n(ger)399
4004 y(trees.)60 b(A)33 b(simple)g(method)f(to)h(combine)g(trees)f(of)i
(equal)e(rank)h(is)g(as)g(follo)n(ws.)60 b(Let)33 b FO(max)p
3349 4004 V 21 w(r)o(ank)h FN(be)399 4120 y(the)c(maximal)f(rank)i(of)f
(an)o(y)g(node.)52 b(Maintain)30 b(a)h(set)f(of)g(b)n(uck)o(ets,)j
(initially)d(empty)g(and)g(numbered)399 4237 y(from)22
b(0)h(to)g FO(max)p 901 4237 V 20 w(r)o(ank)q FN(.)30
b(Then)23 b(step)f(through)g(the)h(list)g(of)g(old)f(and)h(ne)n(w)f
(roots.)30 b(When)22 b(a)h(root)g(of)g(rank)e FI(i)399
4353 y FN(is)j(considered)g(inspect)g(the)g FI(i)9 b
FN(-th)25 b(b)n(uck)o(et.)36 b(If)25 b(the)e FI(i)9 b
FN(-th)25 b(b)n(uck)o(et)g(is)g(empty)f(then)h(put)f(the)h(root)g
(there.)36 b(If)399 4469 y(the)25 b(b)n(uck)o(et)g(is)g(non-empty)f
(then)h(combine)f(the)i(tw)o(o)f(trees)g(into)g(one)g(\(by)g(making)g
(the)g(root)g(with)g(the)399 4585 y(lar)n(ger)c(information)g(a)i
(child)e(of)i(the)f(other)f(root\).)28 b(This)22 b(empties)f(the)g
FI(i)9 b FN(-th)22 b(b)n(uck)o(et)g(and)g(creates)g(a)g(root)399
4702 y(of)i(rank)f FI(i)30 b FD(C)21 b FN(1.)35 b(T)m(ry)23
b(to)i(thro)n(w)e(the)h(ne)n(w)g(tree)g(into)g(the)f
FI(i)30 b FD(C)22 b FN(1st)i(b)n(uck)o(et.)34 b(If)24
b(it)g(is)g(occupied,)h(combine)399 4818 y(.)13 b(.)g(.)g(.)45
b(When)27 b(all)g(roots)g(ha)n(v)o(e)g(been)f(processed)g(in)i(this)f
(w)o(ay)-6 b(,)28 b(we)f(ha)n(v)o(e)g(a)g(collection)f(of)i(trees)e
(whose)399 4934 y(roots)21 b(ha)n(v)o(e)h(pairwise)f(distinct)g(ranks.)
28 b(What)22 b(is)g(the)g(running)f(time)h(of)g(the)g
FO(del)p 2893 4934 V 20 w(min)g FN(operation?)489 5050
y(Let)28 b FI(K)36 b FN(denote)22 b(the)g(number)g(of)h(roots)g(before)
f(the)g(call)h(of)f FO(del)p 2463 5050 V 21 w(min)o FN(.)30
b(The)23 b(cost)f(of)h(the)g(operation)f(is)405 5166
y FI(O)6 b FJ(.)f FI(K)36 b FD(C)23 b FO(max)p 847 5166
V 21 w(r)o(ank)p FJ(/)28 b FN(\(since)e(the)h(deleted)f(node)g(has)g
(at)h(most)g FO(max)p 2548 5166 V 20 w(r)o(ank)h FN(children)d(and)i
(hence)f(there)399 5283 y(are)20 b(at)h(most)26 b FI(K)h
FD(C)16 b FO(max)p 1133 5283 V 20 w(r)o(ank)22 b FN(roots)e(to)h(start)
g(with.)27 b(Moreo)o(v)o(er)l(,)20 b(e)n(v)o(ery)g(combine)g(reduces)g
(the)g(number)399 5399 y(of)29 b(roots)g(by)h(one\).)49
b(After)29 b(the)h(call)f(there)g(will)g(be)h(at)f(most)g
FO(max)p 2516 5399 V 21 w(r)o(ank)h FN(roots)f(\(since)g(the)o(y)g(all)
g(ha)n(v)o(e)p eop
%%Page: 51 8
51 50 bop 399 399 a FK(13.10)39 b(Priority)21 b(Queues)e(by)h
(Fibonacci)g(Heaps)f(\(A)h(Complete)g(Example\))1135
b(51)887 1239 y @beginspecial @setspecial
%%BeginDocument: ./figs/binom_tree.ps
%!PS-Adobe-2.0
%%Creator: LEDA GraphWin
%%CreationDate: Sat Nov 28 12:27:13 1998
%%Pages:  1
%%BoundingBox:  -20 -20 330.925 94.2803
%%EndComments
/LEDA_dict 100 dict def
LEDA_dict begin
%%
%% COLORS
/white { 1.000 1.000 1.000 } def
/black { 0.000 0.000 0.000 } def
/red { 1.000 0.000 0.000 } def
/green { 0.000 0.933 0.000 } def
/blue { 0.000 0.000 0.804 } def
/yellow { 1.000 1.000 0.000 } def
/violet { 0.627 0.125 0.941 } def
/orange { 1.000 0.549 0.000 } def
/cyan { 0.000 1.000 1.000 } def
/brown { 0.627 0.322 0.176 } def
/pink { 1.000 0.000 1.000 } def
/green2 { 0.047 0.702 0.627 } def
/blue2 { 0.392 0.584 0.929 } def
/grey1 { 0.851 0.851 0.851 } def
/grey2 { 0.702 0.702 0.702 } def
/grey3 { 0.451 0.451 0.451 } def
/ivory { 1.000 1.000 0.894 } def
%%
%% FONTS
/font_dict 2 dict def
/set_font {
  font_dict
  begin
    /font_size exch def /font_name exch def
    font_name cvn findfont font_size scalefont setfont
  end
} def
%%
%% POLYGONS
/polygon_dict 1 dict def
/poly_line {
  polygon_dict
  begin
    /points exch def
    points 2 mul dup 2 sub roll
    moveto
    points 1 sub
    dup { dup 2 mul 1 add -2 roll lineto 1 sub} repeat
    pop
  end
} def
/polygon { newpath poly_line closepath } def
%%
%% ELLIPSES
/ellipse_dict 4 dict def
/ellipse {
  ellipse_dict
  begin
    /yrad exch def /xrad exch def /ypos exch def /xpos exch def
    matrix currentmatrix
    xpos ypos translate
    xrad yrad scale
    0 0 1 0 360 arc
    setmatrix
  end
} def
%%
%% hatching
/hatch1_dict 4 dict def
/hatch1_rect {
 hatch1_dict
 begin
  0.25 units setlinewidth
  /ymax exch def /xmax exch def /ymin exch def /xmin exch def
  xmin ymax ymin sub sub 3 units xmax 
  { ymin moveto ymax ymin sub dup rlineto stroke } for
 end
} def
%
/hatch2_dict 4 dict def
/hatch2_rect {
 hatch2_dict
 begin
  0.25 units setlinewidth
  /ymax exch def /xmax exch def /ymin exch def /xmin exch def
  xmax ymax ymin sub add -3 units xmin 
  { ymin moveto ymin ymax sub ymax ymin sub rlineto stroke } for
 end
} def
%%
%% TEXT
/draw_text {
  3 dict begin
    /label exch def /ypos exch def /xpos exch def
    xpos ypos moveto
    label show
  end
} def
%%
/draw_ctext {
  8 dict begin
   /sz exch def /label exch def /ypos exch def /xpos exch def
   xpos ypos moveto
   label stringwidth pop -2 div sz -0.32 mul rmoveto
   label show
  end
} def
%%
%% PIXMAPS
/draw_pixmap {
 10 dict begin
   /ly exch def /lx exch def /h exch def /w exch def /y exch def /x exch def
   /pix w 3 mul string def
   x y translate
   lx ly scale
   w h 8 [w 0 0  0 h sub  0 h]
   {currentfile pix readhexstring pop}
   false 3 colorimage
 end
} def
%%
%% LINESTYLES
/units  { f_scale div } def
/solid  { [ ] } def
/dashed { [ 3 units 2 units] } def
/dotted { [ 0.5 units 2 units ] } def
/dashed_dotted { [ 3 units 2 units 0.5 units 2 units ] } def
/set_line_style { 0 setdash } def
%%
%% INIT
1 1 scale
1 setlinewidth
(Helvetica) 12.0 set_font
%%EndProlog
%%
%%BeginProgram
-36.199320 1.398591 translate
/f_scale 1.000000  def
1.000000 1.000000 scale
(Times-Roman) 7.777780 set_font
0.574074 setlinewidth
73.547900 64.769990 73.547900 51.649210 2 poly_line stroke
99.543300 51.812790 99.543300 38.692310 2 poly_line stroke
114.345216 66.036769 102.072084 56.860831 2 poly_line stroke
116.874000 64.769990 116.874000 51.649210 2 poly_line stroke
142.869000 38.855890 142.869000 25.735310 2 poly_line stroke
157.671179 53.079618 145.397821 43.903882 2 poly_line stroke
160.200000 51.812790 160.200000 38.692310 2 poly_line stroke
163.157515 56.075797 191.903485 66.821803 2 poly_line stroke
180.059748 56.860880 192.332252 66.036720 2 poly_line stroke
177.531000 51.812790 177.531000 38.692310 2 poly_line stroke
194.861000 64.769990 194.861000 51.649210 2 poly_line stroke
220.857000 25.898990 220.857000 12.778440 2 poly_line stroke
223.385821 30.946982 235.659179 40.122718 2 poly_line stroke
238.188000 38.855890 238.188000 25.735310 2 poly_line stroke
241.145513 43.118903 269.890487 53.864597 2 poly_line stroke
255.517000 38.855890 255.517000 25.735310 2 poly_line stroke
272.848000 51.812790 272.848000 38.692310 2 poly_line stroke
270.319179 53.079618 258.045821 43.903882 2 poly_line stroke
dotted set_line_style
275.951660 55.550315 339.066340 67.347285 2 poly_line stroke
solid set_line_style
290.179000 38.855890 290.179000 25.735310 2 poly_line stroke
dotted set_line_style
292.707769 43.903952 304.980231 53.079548 2 poly_line stroke
307.509000 51.812790 307.509000 38.923100 2 poly_line stroke
310.466515 56.075797 339.212485 66.821803 2 poly_line stroke
solid set_line_style
324.839000 51.812790 324.839000 38.692310 2 poly_line stroke
327.367800 56.860810 339.641200 66.036790 2 poly_line stroke
342.170000 64.769990 342.170000 51.649210 2 poly_line stroke
(Times-Roman) 7.777780 set_font
grey2 setrgbcolor
47.552300 67.927400 3.157410 3.157410 ellipse fill
black setrgbcolor
47.552300 67.927400 3.157410 3.157410 ellipse stroke
grey2 setrgbcolor
73.547900 67.927400 3.157410 3.157410 ellipse fill
black setrgbcolor
73.547900 67.927400 3.157410 3.157410 ellipse stroke
grey2 setrgbcolor
73.547900 48.491800 3.157410 3.157410 ellipse fill
black setrgbcolor
73.547900 48.491800 3.157410 3.157410 ellipse stroke
grey2 setrgbcolor
99.543300 54.970200 3.157410 3.157410 ellipse fill
black setrgbcolor
99.543300 54.970200 3.157410 3.157410 ellipse stroke
grey2 setrgbcolor
116.874000 67.927400 3.157410 3.157410 ellipse fill
black setrgbcolor
116.874000 67.927400 3.157410 3.157410 ellipse stroke
grey2 setrgbcolor
99.543300 35.534900 3.157410 3.157410 ellipse fill
black setrgbcolor
99.543300 35.534900 3.157410 3.157410 ellipse stroke
grey2 setrgbcolor
116.874000 48.491800 3.157410 3.157410 ellipse fill
black setrgbcolor
116.874000 48.491800 3.157410 3.157410 ellipse stroke
grey2 setrgbcolor
142.869000 42.013300 3.157410 3.157410 ellipse fill
black setrgbcolor
142.869000 42.013300 3.157410 3.157410 ellipse stroke
grey2 setrgbcolor
160.200000 54.970200 3.157410 3.157410 ellipse fill
black setrgbcolor
160.200000 54.970200 3.157410 3.157410 ellipse stroke
grey2 setrgbcolor
177.531000 54.970200 3.157410 3.157410 ellipse fill
black setrgbcolor
177.531000 54.970200 3.157410 3.157410 ellipse stroke
grey2 setrgbcolor
194.861000 67.927400 3.157410 3.157410 ellipse fill
black setrgbcolor
194.861000 67.927400 3.157410 3.157410 ellipse stroke
grey2 setrgbcolor
142.869000 22.577900 3.157410 3.157410 ellipse fill
black setrgbcolor
142.869000 22.577900 3.157410 3.157410 ellipse stroke
grey2 setrgbcolor
160.200000 35.534900 3.157410 3.157410 ellipse fill
black setrgbcolor
160.200000 35.534900 3.157410 3.157410 ellipse stroke
grey2 setrgbcolor
177.531000 35.534900 3.157410 3.157410 ellipse fill
black setrgbcolor
177.531000 35.534900 3.157410 3.157410 ellipse stroke
grey2 setrgbcolor
194.861000 48.491800 3.157410 3.157410 ellipse fill
black setrgbcolor
194.861000 48.491800 3.157410 3.157410 ellipse stroke
grey2 setrgbcolor
220.857000 9.621030 3.157410 3.157410 ellipse fill
black setrgbcolor
220.857000 9.621030 3.157410 3.157410 ellipse stroke
grey2 setrgbcolor
220.857000 29.056400 3.157410 3.157410 ellipse fill
black setrgbcolor
220.857000 29.056400 3.157410 3.157410 ellipse stroke
grey2 setrgbcolor
238.188000 22.577900 3.157410 3.157410 ellipse fill
black setrgbcolor
238.188000 22.577900 3.157410 3.157410 ellipse stroke
grey2 setrgbcolor
238.188000 42.013300 3.157410 3.157410 ellipse fill
black setrgbcolor
238.188000 42.013300 3.157410 3.157410 ellipse stroke
grey2 setrgbcolor
255.517000 42.013300 3.157410 3.157410 ellipse fill
black setrgbcolor
255.517000 42.013300 3.157410 3.157410 ellipse stroke
grey2 setrgbcolor
255.517000 22.577900 3.157410 3.157410 ellipse fill
black setrgbcolor
255.517000 22.577900 3.157410 3.157410 ellipse stroke
grey2 setrgbcolor
272.848000 54.970200 3.157410 3.157410 ellipse fill
black setrgbcolor
272.848000 54.970200 3.157410 3.157410 ellipse stroke
grey2 setrgbcolor
272.848000 35.534900 3.157410 3.157410 ellipse fill
black setrgbcolor
272.848000 35.534900 3.157410 3.157410 ellipse stroke
grey2 setrgbcolor
290.179000 22.577900 3.157410 3.157410 ellipse fill
black setrgbcolor
290.179000 22.577900 3.157410 3.157410 ellipse stroke
grey2 setrgbcolor
290.179000 42.013300 3.157410 3.157410 ellipse fill
black setrgbcolor
290.179000 42.013300 3.157410 3.157410 ellipse stroke
grey2 setrgbcolor
307.509000 54.970200 3.157410 3.157410 ellipse fill
black setrgbcolor
307.509000 54.970200 3.157410 3.157410 ellipse stroke
307.509000 35.534900 3.388200 3.388200 ellipse stroke
grey2 setrgbcolor
324.839000 54.970200 3.157410 3.157410 ellipse fill
black setrgbcolor
324.839000 54.970200 3.157410 3.157410 ellipse stroke
grey2 setrgbcolor
324.839000 35.534900 3.157410 3.157410 ellipse fill
black setrgbcolor
324.839000 35.534900 3.157410 3.157410 ellipse stroke
grey2 setrgbcolor
342.170000 67.927400 3.157410 3.157410 ellipse fill
black setrgbcolor
342.170000 67.927400 3.157410 3.157410 ellipse stroke
grey2 setrgbcolor
342.170000 48.491800 3.157410 3.157410 ellipse fill
black setrgbcolor
342.170000 48.491800 3.157410 3.157410 ellipse stroke
1.133260 setlinewidth

%%EndProgram

showpage
end %% LEDA_dict
%%EOF

%%EndDocument
 @endspecial 941 1223 a Fc(B)992 1235 y Fu(0)1157 1223
y Fc(B)1208 1235 y Fu(1)1445 1223 y Fc(B)1496 1235 y
Fu(2)1949 1223 y Fc(B)2000 1235 y Fu(3)2884 1223 y Fc(B)2935
1235 y Fu(4)697 1414 y FB(Figur)o(e)19 b(13.6)39 b FK(Binomial)21
b(trees.)j(Deletion)c(of)g(the)f(high-lighted)j(node)d(and)h(all)f
(high-lighted)j(edges)697 1505 y(decomposes)k Fx(B)1143
1516 y Fw(4)1193 1505 y FK(into)20 b(binomial)h(trees.)399
1779 y FN(dif)n(ferent)i(ranks\))i(and)f(hence)h(the)g(number)f(of)h
(roots)g(decreases)f(by)g(at)i(least)j FI(K)35 b FD(\000)22
b FO(max)p 3207 1779 27 4 v 20 w(r)o(ank)q FN(.)37 b(Thus,)399
1895 y(if)22 b(we)g(use)g(the)g(potential)f(function)g
FJ(8)1605 1908 y Fu(1)1663 1895 y FN(with)1629 2070 y
FJ(8)1700 2083 y Fu(1)1761 2070 y FD(D)j FN(number)e(of)g(roots)399
2244 y(then)28 b(the)g(amortized)f(cost)i(of)f(a)h FO(delete)p
1662 2244 V 19 w(min)g FN(operation)e(is)35 b FI(O)6
b FJ(.)p FO(max)p 2561 2244 V 21 w(r)o(ank)p FJ(/)p FN(.)48
b(The)28 b(amortized)f(cost)i(of)399 2360 y(an)c(insert)h(is)32
b FI(O)6 b FJ(.)p FN(1)p FJ(/)p FN(;)29 b(note)d(that)f
FI(n)30 b FN(inserts)c(increase)f(the)g(potential)g FJ(8)2606
2373 y Fu(1)2669 2360 y FN(by)g(one.)40 b(W)-7 b(e)25
b(will)h(e)o(xtend)f(the)399 2476 y(potential)c(by)h(a)g(second)f(term)
h FJ(8)1438 2489 y Fu(2)1497 2476 y FN(belo)n(w)-6 b(.)489
2617 y(What)22 b(can)f(we)h(say)f(about)h(the)f(maximal)g(rank)g(of)h
(a)g(node)f(in)h(a)g(Fibonacci)f(heap?)26 b(Let)c(us)g(consider)399
2734 y(a)29 b(v)o(ery)g(simple)g(situation)f(\002rst.)50
b(Suppose)29 b(that)g(we)g(perform)g(a)h(sequence)e(of)i(inserts)e
(follo)n(wed)h(by)399 2850 y(a)d(single)g FO(del)p 810
2850 V 21 w(min)o FN(.)42 b(In)26 b(this)g(situation,)i(we)e(start)g
(with)h(a)f(certain)g(number)g(of)h(single)f(node)g(trees)g(and)399
2966 y(all)i(trees)f(formed)h(by)g(combining)f(are)h(so-called)f
FO(binomial)h(tr)m(ees)f FN(as)h(sho)n(wn)g(in)g(Figure)g(13.6.)46
b(The)399 3082 y(binomial)20 b(tree)28 b FI(B)957 3095
y Fu(0)1014 3082 y FN(consists)21 b(of)g(a)h(single)f(node)g(and)g(the)
h(binomial)e(tree)29 b FI(B)2752 3095 y Fs(i)t Fr(C)p
Fu(1)2881 3082 y FN(is)21 b(obtained)g(by)g(joining)399
3199 y(tw)o(o)27 b(copies)f(of)h(the)g(tree)34 b FI(B)1279
3212 y Fs(i)1305 3199 y FN(.)43 b(This)27 b(implies)g(that)g(the)g
(root)f(of)h(the)g(tree)34 b FI(B)2782 3212 y Fs(i)2836
3199 y FN(has)27 b(rank)f FI(i)36 b FN(and)27 b(that)g(the)399
3315 y(tree)35 b FI(B)624 3328 y Fs(i)680 3315 y FN(contains)28
b(e)o(xactly)f(2)1339 3282 y Fs(i)1396 3315 y FN(nodes.)47
b(W)-7 b(e)29 b(conclude)e(that)i(the)g(maximal)f(rank)g(in)h(a)g
(binomial)f(tree)399 3431 y(is)j(logarithmic)e(in)i(the)g(size)f(of)h
(the)g(tree.)55 b(If)31 b(we)f(could)h(guarantee)f(in)h(general)f(that)
h(the)g(maximal)399 3547 y(rank)21 b(of)h(an)o(y)f(node)g(is)h
(logarithmic)e(in)i(the)g(size)f(of)h(the)f(tree)h(then)f(the)h
(amortized)f(cost)g(of)h(the)g FO(del)p 3498 3547 V 20
w(min)399 3664 y FN(operation)f(w)o(ould)g(be)h(logarithmic.)489
3805 y(W)-7 b(e)27 b(turn)g(to)g(the)f FO(decr)m(ease)p
1350 3805 V 19 w(k)o(e)m(y)h FN(operation)f(ne)o(xt.)42
b(It)27 b(is)g(gi)n(v)o(en)f(a)h(node)f FJ(v)31 b FN(and)c(a)g(ne)n(w)f
(information)399 3921 y FO(ne)o(wk)o(e)m(y)20 b FN(and)h(decreases)f
(the)i(information)e(of)h FJ(v)k FN(to)c FO(ne)o(wk)o(e)m(y)o
FN(.)28 b(Of)21 b(course,)h FO(ne)o(wk)o(e)m(y)e FN(must)h(not)h(be)f
(lar)n(ger)399 4037 y(than)27 b(the)g(old)g(information)f(associated)h
(with)g FJ(v)t FN(.)43 b(Decreasing)26 b(the)i(information)e
(associated)g(with)h FJ(v)399 4153 y FN(will)c(in)i(general)e(destro)o
(y)g(the)h(heap)g(property)-6 b(.)33 b(In)24 b(order)g(to)g(maintain)f
(the)h(heap)g(property)f(we)h(delete)399 4270 y(the)i(edge)g
(connecting)f FJ(v)30 b FN(to)c(its)h(parent)e(and)h(turn)h
FJ(v)i FN(into)e(a)f(root.)41 b(This)26 b(has)g(the)g(side)g(ef)n(fect)
g(that)g(for)399 4386 y(an)o(y)f(ancestor)g FJ(w)j FN(of)e
FJ(v)k FN(dif)n(ferent)24 b(from)i FJ(v)t FN(')-5 b(s)25
b(parent)g(the)h(size)f(of)h FJ(w)s FN(')-5 b(s)25 b(subtree)h
(decreases)e(by)i(one)g(b)n(ut)399 4502 y FJ(w)s FN(')-5
b(s)22 b(rank)h(is)g(unchanged.)29 b(Thus,)23 b(if)g(we)f(w)o(ant)h(to)
g(maintain)f(the)h(property)f(that)g(the)h(maximal)f(rank)h(of)399
4618 y(an)o(y)k(node)g(is)h(logarithmic)e(in)h(the)h(size)f(of)h(the)g
(subtree)e(rooted)i(at)f(the)h(node,)h(we)e(need)h(to)f(do)h(more)399
4735 y(than)21 b(just)h(cutting)g FJ(v)t FN(')-5 b(s)21
b(link)h(to)g(its)h(parent.)489 4851 y(An)f(old)g(solution)f(suggested)
g(by)g(V)-7 b(uillemin)21 b([V)-7 b(ui78])22 b(is)g(to)f(k)o(eep)h(all)
g(trees)f(in)h(the)g(heap)f(binomial.)399 4967 y(This)27
b(can)h(be)g(done)g(as)g(follo)n(ws:)38 b(for)28 b(an)o(y)f(proper)h
(ancestor)h FI(z)j FN(of)c FJ(v)k FN(delete)27 b(the)h(edge)g(into)i
FI(z)i FN(on)c(the)399 5083 y(path)19 b(from)h FJ(v)j
FN(to)f FI(z)t FN(,)f(call)f(it)g FI(e)r FN(,)h(and)e(all)h(edges)g
(into)h FI(z)j FN(that)c(were)g(created)f(later)g(than)h
FI(e)r FN(.)27 b(In)20 b(Figure)f(13.6)i(a)399 5199 y(node)h(and)g(a)h
(set)f(of)h(edges)f(is)g(high-lighted)f(in)i(the)f(tree)30
b FI(B)2246 5212 y Fu(4)2280 5199 y FN(.)g(If)22 b(all)h(high-lighted)e
(edges)h(are)g(remo)o(v)o(ed)399 5316 y(then)32 b FI(B)641
5329 y Fu(4)702 5316 y FN(decomposes)24 b(into)i(tw)o(o)f(copies)g(of)
33 b FI(B)1909 5329 y Fu(0)1970 5316 y FN(and)25 b(one)h(cop)o(y)f
(each)h(of)33 b FI(B)2834 5329 y Fu(1)2868 5316 y FN(,)i
FI(B)2980 5329 y Fu(2)3014 5316 y FN(,)28 b(and)k FI(B)3281
5329 y Fu(3)3316 5316 y FN(.)39 b(It)26 b(is)g(not)399
5432 y(too)j(hard)g(to)h(see)f(that)h(at)f(most)h FI(k)35
b FN(edges)29 b(are)g(remo)o(v)o(ed)f(when)h(a)37 b FI(B)2585
5445 y Fs(k)2650 5432 y FN(is)30 b(disassembled)e(\(since)h(a)36
b FI(B)3623 5445 y Fs(k)p eop
%%Page: 52 9
52 51 bop 399 399 a FK(52)2172 b(On)20 b(the)f(Implementation)j(of)e
(LED)m(A)1401 1930 y @beginspecial @setspecial
%%BeginDocument: ./figs/decrease_key.ps
%!PS-Adobe-2.0
%%Creator: LEDA GraphWin
%%CreationDate: Sat Nov 28 18:17:58 1998
%%Pages:  1
%%BoundingBox:  -20 -20 207.11 177.447
%%EndComments
/LEDA_dict 100 dict def
LEDA_dict begin
%%
%% COLORS
/white { 1.000 1.000 1.000 } def
/black { 0.000 0.000 0.000 } def
/red { 1.000 0.000 0.000 } def
/green { 0.000 0.933 0.000 } def
/blue { 0.000 0.000 0.804 } def
/yellow { 1.000 1.000 0.000 } def
/violet { 0.627 0.125 0.941 } def
/orange { 1.000 0.549 0.000 } def
/cyan { 0.000 1.000 1.000 } def
/brown { 0.627 0.322 0.176 } def
/pink { 1.000 0.000 1.000 } def
/green2 { 0.047 0.702 0.627 } def
/blue2 { 0.392 0.584 0.929 } def
/grey1 { 0.851 0.851 0.851 } def
/grey2 { 0.702 0.702 0.702 } def
/grey3 { 0.451 0.451 0.451 } def
/ivory { 1.000 1.000 0.894 } def
%%
%% FONTS
/font_dict 2 dict def
/set_font {
  font_dict
  begin
    /font_size exch def /font_name exch def
    font_name cvn findfont font_size scalefont setfont
  end
} def
%%
%% POLYGONS
/polygon_dict 1 dict def
/poly_line {
  polygon_dict
  begin
    /points exch def
    points 2 mul dup 2 sub roll
    moveto
    points 1 sub
    dup { dup 2 mul 1 add -2 roll lineto 1 sub} repeat
    pop
  end
} def
/polygon { newpath poly_line closepath } def
%%
%% ELLIPSES
/ellipse_dict 4 dict def
/ellipse {
  ellipse_dict
  begin
    /yrad exch def /xrad exch def /ypos exch def /xpos exch def
    matrix currentmatrix
    xpos ypos translate
    xrad yrad scale
    0 0 1 0 360 arc
    setmatrix
  end
} def
%%
%% hatching
/hatch1_dict 4 dict def
/hatch1_rect {
 hatch1_dict
 begin
  0.25 units setlinewidth
  /ymax exch def /xmax exch def /ymin exch def /xmin exch def
  xmin ymax ymin sub sub 3 units xmax 
  { ymin moveto ymax ymin sub dup rlineto stroke } for
 end
} def
%
/hatch2_dict 4 dict def
/hatch2_rect {
 hatch2_dict
 begin
  0.25 units setlinewidth
  /ymax exch def /xmax exch def /ymin exch def /xmin exch def
  xmax ymax ymin sub add -3 units xmin 
  { ymin moveto ymin ymax sub ymax ymin sub rlineto stroke } for
 end
} def
%%
%% TEXT
/draw_text {
  3 dict begin
    /label exch def /ypos exch def /xpos exch def
    xpos ypos moveto
    label show
  end
} def
%%
/draw_ctext {
  8 dict begin
   /sz exch def /label exch def /ypos exch def /xpos exch def
   xpos ypos moveto
   label stringwidth pop -2 div sz -0.32 mul rmoveto
   label show
  end
} def
%%
%% PIXMAPS
/draw_pixmap {
 10 dict begin
   /ly exch def /lx exch def /h exch def /w exch def /y exch def /x exch def
   /pix w 3 mul string def
   x y translate
   lx ly scale
   w h 8 [w 0 0  0 h sub  0 h]
   {currentfile pix readhexstring pop}
   false 3 colorimage
 end
} def
%%
%% LINESTYLES
/units  { f_scale div } def
/solid  { [ ] } def
/dashed { [ 3 units 2 units] } def
/dotted { [ 0.5 units 2 units ] } def
/dashed_dotted { [ 3 units 2 units 0.5 units 2 units ] } def
/set_line_style { 0 setdash } def
%%
%% INIT
1 1 scale
1 setlinewidth
(Helvetica) 12.0 set_font
%%EndProlog
%%
%%BeginProgram
-3.124793 -61.791714 translate
/f_scale 0.386719  def
0.386719 0.386719 scale
(Times-Roman) 10.954800 set_font
0.740741 setlinewidth
25.000000 238.070900 31.726594 226.420098 25.000000 230.383364 18.273406 226.420098 4 polygon fill
25.000000 186.929100 25.000000 230.383364 2 poly_line stroke
25.000000 311.366700 31.726594 299.715898 25.000000 303.679164 18.273406 299.715898 4 polygon fill
25.000000 261.929100 25.000000 303.679164 2 poly_line stroke
25.000000 386.366700 31.726594 374.715898 25.000000 378.679164 18.273406 374.715898 4 polygon fill
25.000000 338.633300 25.000000 378.679164 2 poly_line stroke
dashed set_line_style
25.000000 536.366700 31.726594 524.715898 25.000000 528.679164 18.273406 524.715898 4 polygon fill
25.000000 413.633300 25.000000 528.679164 2 poly_line stroke
solid set_line_style
258.567800 400.000000 246.916998 393.273406 250.880264 400.000000 246.916998 406.726594 4 polygon fill
91.432200 400.000000 250.880264 400.000000 2 poly_line stroke
dashed set_line_style
325.000000 536.366700 331.726594 524.715898 325.000000 528.679164 318.273406 524.715898 4 polygon fill
325.000000 413.633300 325.000000 528.679164 2 poly_line stroke
solid set_line_style
(Times-Roman) 15.336700 set_font
1.095480 setlinewidth
ivory setrgbcolor
25.000000 175.000000 11.929100 11.929100 ellipse fill
black setrgbcolor
25.000000 175.000000 11.929100 11.929100 ellipse stroke
grey2 setrgbcolor
25.000000 250.000000 11.929100 11.929100 ellipse fill
black setrgbcolor
25.000000 250.000000 11.929100 11.929100 ellipse stroke
grey2 setrgbcolor
25.000000 325.000000 13.633300 13.633300 ellipse fill
black setrgbcolor
25.000000 325.000000 13.633300 13.633300 ellipse stroke
ivory setrgbcolor
25.000000 400.000000 13.633300 13.633300 ellipse fill
black setrgbcolor
25.000000 400.000000 13.633300 13.633300 ellipse stroke
ivory setrgbcolor
25.000000 550.000000 13.633300 13.633300 ellipse fill
black setrgbcolor
25.000000 550.000000 13.633300 13.633300 ellipse stroke
grey2 setrgbcolor
325.000000 400.000000 13.633300 13.633300 ellipse fill
black setrgbcolor
325.000000 400.000000 13.633300 13.633300 ellipse stroke
ivory setrgbcolor
325.000000 550.000000 13.633300 13.633300 ellipse fill
black setrgbcolor
325.000000 550.000000 13.633300 13.633300 ellipse stroke
ivory setrgbcolor
375.000000 550.000000 13.633300 13.633300 ellipse fill
black setrgbcolor
375.000000 550.000000 13.633300 13.633300 ellipse stroke
ivory setrgbcolor
425.000000 550.000000 13.633300 13.633300 ellipse fill
black setrgbcolor
425.000000 550.000000 13.633300 13.633300 ellipse stroke
ivory setrgbcolor
475.000000 550.000000 13.633300 13.633300 ellipse fill
black setrgbcolor
475.000000 550.000000 13.633300 13.633300 ellipse stroke

%%EndProgram

showpage
end %% LEDA_dict
%%EOF

%%EndDocument
 @endspecial 1435 1900 a FC(x)1435 1650 y(y)1437 1418
y(z)1435 1177 y(u)1442 696 y(r)2398 1177 y(u)2405 696
y(r)125 b(x)2719 687 y(y)2882 696 y(z)1672 1214 y(decrease)p
1964 1214 25 4 v 29 w(k)o(e)o(y\(x\))697 2158 y FB(Figur)o(e)19
b(13.7)39 b FK(A)20 b(decrease)f(k)o(e)o(y)g(on)j Fx(x)j
FK(is)19 b(performed)j(and)i Fx(y)f FK(and)d Fx(z)j FK(are)c(mark)o(ed)
i(b)n(ut)f Fx(u)j FK(is)c(not;)j Fx(x)7 b FK(,)24 b Fx(y)5
b FK(,)18 b(and)j Fx(z)697 2249 y FK(become)f(roots,)g(roots)g(are)f
(unmark)o(ed,)i(and)e Fx(u)24 b FK(becomes)19 b(mark)o(ed.)25
b(Mark)o(ed)20 b(nodes)f(are)h(sho)n(wn)f(shaded.)24
b(A)697 2341 y(dashed)c(edge)f(stands)g(for)h(a)f(path)h(of)f(edges.)
399 2615 y FN(decomposes)f(into)h(tw)o(o)27 b FI(B)1242
2628 y Fs(j)1269 2615 y FN(')-5 b(s)20 b(and)g(one)f(each)h(of)26
b FI(B)1999 2628 y Fs(j)7 b Fr(C)p Fu(1)2107 2615 y FJ(;)15
b(:)g(:)g(:)f(;)22 b FI(B)2378 2628 y Fs(k)s Fr(\000)p
Fu(1)2513 2615 y FN(for)e(some)34 b FI(j)10 b FN(,)19
b(with)h(0)25 b FD(\024)39 b FI(j)34 b FD(\024)24 b FI(k)17
b FD(\000)11 b FN(1\))399 2731 y(and)21 b(hence)h(this)g(strate)o(gy)f
(gi)n(v)o(es)g(a)h(logarithmic)f(time)g(bound)h(for)g(the)g
FO(decr)m(ease)p 2943 2731 27 4 v 19 w(k)o(e)m(y)g FN(operation.)489
2847 y(In)i(some)f(graph)g(algorithms)g(the)g FO(decr)m(ease)p
1881 2847 V 19 w(k)o(e)m(y)h FN(operation)e(is)i(e)o(x)o(ecuted)e(f)o
(ar)h(more)g(often)h(than)f(the)399 2963 y(other)31 b(priority)g(queue)
g(operations,)j(e.g.,)h(Dijkstra')-5 b(s)31 b(shortest-path)f
(algorithm)h(\(cf.)57 b(Section)31 b(6.6\))399 3080 y(e)o(x)o(ecutes)18
b FI(m)26 b FO(decr)m(ease)p 1127 3080 V 19 w(k)o(e)m(y)p
FN(s)20 b(and)h(only)f FI(n)k FO(insert)q FN(s)d(and)f
FO(del)p 2239 3080 V 20 w(min)p FN(s,)h(where)f FI(m)26
b FN(and)20 b FI(n)25 b FN(are)20 b(the)g(number)g(of)399
3196 y(edges)k(and)i(nodes)f(of)g(the)h(graph,)g(respecti)n(v)o(ely)-6
b(.)36 b(Since)25 b FI(m)31 b FN(might)25 b(be)h(as)f(lar)n(ge)h(as)f
FI(n)3112 3163 y Fu(2)3173 3196 y FN(it)h(is)g(desirable)399
3312 y(to)d(mak)o(e)h(the)g FO(decr)m(ease)p 1155 3312
V 19 w(k)o(e)m(y)g FN(operation)e(cheaper)h(than)h(the)g(other)f
(operations.)32 b(Fredman)23 b(and)h(T)-7 b(arjan)399
3428 y(sho)n(wed)19 b(ho)n(w)h(to)g(decrease)f(its)h(cost)g(to)27
b FI(O)6 b FJ(.)p FN(1)p FJ(/)21 b FN(without)f(increasing)f(the)h
(cost)g(of)g(the)h(other)e(operations.)399 3545 y(Their)i(solution)h
(is)g(surprisingly)f(simple)g(and)h(we)g(describe)f(it)h(ne)o(xt.)489
3686 y(When)28 b(a)g(node)h FI(x)37 b FN(loses)27 b(a)h(child)g
(because)f FO(decr)m(ease)p 2187 3686 V 19 w(k)o(e)m(y)h
FN(is)g(applied)f(to)h(the)g(child)g(the)g(node)h FI(x)37
b FN(is)399 3802 y(mark)o(ed;)26 b(this)g(assumes)f(that)i
FI(x)34 b FN(has)26 b(not)g(already)e(been)i(mark)o(ed.)38
b(When)25 b(a)h(mark)o(ed)f(node)i FI(x)34 b FN(loses)26
b(a)399 3918 y(child,)31 b(we)e(turn)i FI(x)38 b FN(into)30
b(a)f(root,)j(remo)o(v)o(e)c(the)h(mark)g(from)i FI(x)38
b FN(and)29 b(attempt)g(to)h(mark)h FI(x)8 b FN(')-5
b(s)29 b(parent.)50 b(If)401 4034 y FI(x)8 b FN(')-5
b(s)25 b(parent)g(is)g(mark)o(ed)g(already)f(then)h(.)13
b(.)g(.)g(.)41 b(In)25 b(other)g(w)o(ords,)h(suppose)e(that)i(we)f
(apply)g FO(decr)m(ease)p 3518 4034 V 19 w(k)o(e)m(y)399
4151 y FN(to)g(a)g(node)f FJ(v)29 b FN(and)c(that)g(the)f
FI(k)6 b FN(-nearest)24 b(ancestors)g(of)h FJ(v)j FN(are)d(mark)o(ed,)h
(then)e(turn)h FJ(v)k FN(and)24 b(the)h FI(k)6 b FN(-nearest)399
4267 y(ancestors)30 b(of)h FJ(v)k FN(into)c(roots)g(and)h(mark)f(the)g
FI(k)h FD(C)27 b FN(1st-nearest)j(ancestor)g(of)h FJ(v)k
FN(\(if)d(it)f(is)h(not)f(a)h(root\).)399 4383 y(Also)24
b(unmark)g(all)h(the)g(nodes)g(that)f(were)h(turned)f(into)h(roots,)h
(cf.)f(Figure)f(13.7.)37 b(Why)24 b(is)h(this)g(a)g(good)399
4499 y(strate)o(gy?)489 4616 y(First,)f(a)g FO(decr)m(ease)p
1075 4616 V 19 w(k)o(e)m(y)g FN(marks)f(at)g(most)g(one)h(node)f(and)g
(unmarks)g(some)g(number)g FI(k)29 b FN(of)23 b(nodes.)32
b(No)399 4732 y(other)c(operation)g(marks)h(a)g(node)g(and)g(hence)f
(in)i(an)f(amortized)f(sense)g FI(k)35 b FN(can)29 b(be)g(at)g(most)g
(one)g(\(we)399 4848 y(cannot)22 b(unmark)g(more)h(nodes)g(than)g(we)g
(mark\).)30 b(Ho)n(we)n(v)o(er)l(,)22 b(we)h(also)g(increase)f(the)h
(number)g(of)g(roots)399 4964 y(by)30 b FI(k)36 b FN(which)30
b(in)g(turn)g(increases)g(the)g(potential)g FJ(8)2036
4977 y Fu(1)2102 4964 y FN(by)h FI(k)36 b FN(and)30 b(therefore)f(we)h
(ha)n(v)o(e)g(to)h(ar)n(gue)f(more)399 5080 y(carefully)-6
b(.)27 b(Let)1414 5226 y FJ(8)1485 5239 y Fu(2)1546 5226
y FD(D)d FN(2)c FD(\001)g FN(number)h(of)h(mark)o(ed)g(nodes)399
5400 y(and)h(let)h FJ(8)k FD(D)g FJ(8)934 5413 y Fu(1)991
5400 y FD(C)22 b FJ(8)1154 5413 y Fu(2)1190 5400 y FN(.)33
b(A)24 b FO(decr)m(ease)p 1645 5400 V 19 w(k)o(e)m(y)g
FN(operation)f(where)g(the)h(node)f FJ(v)28 b FN(has)23
b FI(k)30 b FN(mark)o(ed)23 b(ancestors)p eop
%%Page: 53 10
53 52 bop 399 399 a FK(13.10)39 b(Priority)21 b(Queues)e(by)h
(Fibonacci)g(Heaps)f(\(A)h(Complete)g(Example\))1135
b(53)399 714 y FN(has)20 b(actual)h(cost)26 b FI(O)6
b FJ(.)p FI(k)22 b FD(C)16 b FN(1)p FJ(/)21 b FN(and)g(decreases)f(the)
h(potential)f(by)h(at)g(least)g(2)p FJ(.)p FI(k)g FD(\000)16
b FN(1)p FJ(/)g FD(\000)f FJ(.)p FI(k)22 b FD(C)15 b
FN(1)p FJ(/)26 b FD(D)e FI(k)d FD(\000)16 b FN(3.)399
830 y(Note)26 b(that)g(the)g(number)g(of)g(mark)o(ed)g(nodes)g(is)g
(decreased)g(by)g(at)h(least)f FI(k)i FD(\000)23 b FN(1)k(\(at)f(least)
g FI(k)32 b FN(nodes)26 b(are)399 946 y(unmark)o(ed)i(and)i(at)g(most)f
(one)h(node)g(is)g(mark)o(ed\))f(and)g(that)h(the)g(number)f(of)g
(roots)h(is)g(increased)f(by)399 1063 y FI(k)g FD(C)23
b FN(1.)44 b(The)28 b(amortized)e(cost)h(of)g(a)h FO(decr)m(ease)p
1879 1063 27 4 v 19 w(k)o(e)m(y)g FN(is)f(therefore)32
b FI(O)6 b FJ(.)p FN(1)p FJ(/)p FN(.)46 b FO(insert)p
FN(s)28 b(do)f(not)h(change)e FJ(8)3622 1076 y Fu(2)399
1179 y FN(and)32 b FO(del)p 665 1179 V 20 w(min)p FN(s)g(do)h(not)g
(increase)e FJ(8)1561 1192 y Fu(2)1630 1179 y FN(\(it)i(may)f(decrease)
g(it)g(because)g(the)g(mark)o(ed)g(children)g(of)h(the)399
1295 y(remo)o(v)o(ed)18 b(node)h(become)g(unmark)o(ed)g(roots\))g(and)g
(hence)g(their)h(amortized)e(cost)i(does)f(not)h(increase)f(by)399
1411 y(the)i(introduction)g(of)h FJ(8)1159 1424 y Fu(2)1195
1411 y FN(.)489 1553 y(Ho)n(w)29 b(does)g(the)g(strate)o(gy)g(af)n
(fect)f(the)h(maximal)g(rank.)49 b(W)-7 b(e)29 b(sho)n(w)g(that)g(it)h
(stays)f(logarithmic.)48 b(In)399 1669 y(order)20 b(to)i(do)f(so)g(we)g
(need)g(some)g(notation.)27 b(Let)g FI(F)1983 1682 y
Fu(0)2043 1669 y FD(D)e FN(0,)j FI(F)2284 1682 y Fu(1)2344
1669 y FD(D)d FN(1,)d(and)27 b FI(F)2736 1682 y Fs(i)2788
1669 y FD(D)k FI(F)2940 1682 y Fs(i)t Fr(\000)p Fu(1)3064
1669 y FD(C)23 b FI(F)3208 1682 y Fs(i)t Fr(\000)p Fu(2)3337
1669 y FN(for)d FI(i)34 b FD(\025)25 b FN(2)399 1785
y(be)c(the)g(sequence)f(of)h(Fibonacci)f(numbers.)27
b(It)21 b(is)h(well-kno)n(wn)d(that)27 b FI(F)2634 1798
y Fs(i)t Fr(C)p Fu(1)2767 1785 y FD(\025)e FJ(.)p FN(1)16
b FD(C)3041 1710 y(p)p 3117 1710 45 5 v 75 x FN(5)p FJ(=)p
FN(2)p FJ(/)3282 1752 y Fs(i)3334 1785 y FD(\025)25 b
FN(1)p FJ(:)p FN(618)3632 1752 y Fs(i)399 1901 y FN(for)c(all)h
FI(i)33 b FD(\025)25 b FN(0.)399 2117 y FP(Lemma)18 b(1)h
FO(Let)h FJ(v)i FO(be)e(any)f(node)g(in)g(a)h(F)l(ibonacci)e(heap)h
(and)g(let)f FI(i)29 b FO(be)19 b(the)g(r)o(ank)g(of)g
FJ(v)t FO(.)27 b(Then)19 b(the)g(subtr)m(ee)399 2233
y(r)l(ooted)27 b(at)h FJ(v)k FO(contains)27 b(at)h(least)34
b FI(F)1516 2246 y Fs(i)t Fr(C)p Fu(2)1652 2233 y FO(nodes.)45
b(In)28 b(a)g(F)l(ibonacci)f(heap)g(with)h FI(n)k FO(nodes)c(all)g(r)o
(anks)f(ar)m(e)399 2350 y(bounded)21 b(by)h FN(1)p FJ(:)p
FN(4404)15 b(log)e FI(n)t FO(.)399 2574 y(Pr)l(oof)46
b FN(Consider)22 b(an)h(arbitrary)f(node)h FJ(v)k FN(of)c(rank)f
FI(i)9 b FN(.)32 b(Order)22 b(the)h(children)g(of)g FJ(v)k
FN(by)c(the)g(time)g(at)g(which)399 2690 y(the)o(y)j(were)g(made)g
(children)g(of)h FJ(v)t FN(.)41 b(Let)27 b FJ(w)1758
2703 y Fs(j)1813 2690 y FN(be)g(the)41 b FI(j)10 b FN(-th)25
b(child,)j(1)34 b FD(\024)48 b FI(j)42 b FD(\024)32 b
FI(i)9 b FN(.)42 b(When)26 b FJ(w)3243 2703 y Fs(j)3299
2690 y FN(w)o(as)g(made)399 2806 y(child)d(of)g FJ(v)28
b FN(both)23 b(nodes)g(had)h(the)f(same)g(rank.)33 b(Also,)24
b(since)f(at)h(least)f(the)g(nodes)h FJ(w)3032 2819 y
Fu(1)3067 2806 y FJ(;)15 b(:)g(:)g(:)f(;)h(w)3352 2819
y Fs(j)7 b Fr(\000)p Fu(1)3484 2806 y FN(were)399 2922
y(nodes)18 b(of)h FJ(v)k FN(at)c(that)f(time,)i(the)f(rank)g(of)g
FJ(v)j FN(w)o(as)d(at)g(least)34 b FI(j)17 b FD(\000)8
b FN(1)19 b(at)g(the)g(time)g(when)f FJ(w)3001 2935 y
Fs(j)3049 2922 y FN(w)o(as)g(made)h(a)g(child)399 3039
y(of)j FJ(v)t FN(.)27 b(The)22 b(rank)g(of)g FJ(w)1110
3052 y Fs(j)1160 3039 y FN(has)g(decreased)f(by)h(at)g(most)g(1)g
(since)g(then)f(because)h(otherwise)f FJ(w)3278 3052
y Fs(j)3328 3039 y FN(w)o(ould)h(be)399 3155 y(a)g(root.)27
b(Thus)22 b(the)g(current)f(rank)h(of)g FJ(w)1620 3168
y Fs(j)1671 3155 y FN(is)g(at)g(least)37 b FI(j)28 b
FD(\000)20 b FN(2.)489 3271 y(W)-7 b(e)22 b(can)g(no)n(w)g(set)g(up)g
(a)g(recurrence)f(for)h(the)g(minimal)f(number)26 b FI(S)2572
3284 y Fs(i)2622 3271 y FN(of)c(nodes)g(in)g(a)h(tree)e(whose)h(root)
399 3387 y(has)g(rank)f FI(i)9 b FN(.)28 b(Clearly)f
FI(S)1141 3400 y Fu(0)1202 3387 y FD(D)e FN(1,)j FI(S)1435
3400 y Fu(1)1496 3387 y FD(D)d FN(2,)e(and)k FI(S)1881
3400 y Fs(i)1934 3387 y FD(\025)e FN(2)20 b FD(C)25 b
FI(S)2230 3400 y Fu(0)2286 3387 y FD(C)g FI(S)2424 3400
y Fu(1)2480 3387 y FD(C)20 b FJ(:)15 b(:)g(:)j FD(C)25
b FI(S)2831 3400 y Fs(i)t Fr(\000)p Fu(2)2940 3387 y
FN(.)k(The)22 b(last)g(inequality)399 3504 y(follo)n(ws)28
b(from)h(the)g(f)o(act)g(that)g(for)44 b FI(j)i FD(\025)38
b FN(2,)32 b(the)d(number)f(of)h(nodes)g(in)g(the)g(subtree)g(with)g
(root)g FJ(w)3541 3517 y Fs(j)3599 3504 y FN(is)399 3620
y(at)d(least)31 b FI(S)739 3633 y Fs(j)7 b Fr(\000)p
Fu(2)848 3620 y FN(,)28 b(and)e(that)g(we)g(can)g(also)g(count)g(the)g
(nodes)g FJ(v)k FN(and)c FJ(w)2562 3633 y Fu(1)2597 3620
y FN(.)41 b(The)26 b(recurrence)f(abo)o(v)o(e)g(\(with)399
3736 y(=)h(instead)h(of)g FD(\025)p FN(\))f(generates)g(the)h(sequence)
f(1,)j(2,)g(3,)f(5,)h(8,.)13 b(.)g(.)g(which)30 b(is)d(identical)f(to)h
(the)g(Fibonacci)399 3852 y(sequence)21 b(\(minus)g(its)h(\002rst)g(tw)
o(o)g(elements\).)489 3968 y(Let')-5 b(s)28 b(v)o(erify)f(this)g(by)h
(induction.)43 b(Let)30 b FI(T)1814 3981 y Fu(0)1885
3968 y FD(D)36 b FN(1,)31 b FI(T)2135 3981 y Fu(1)2207
3968 y FD(D)k FN(2,)29 b(and)h FI(T)2614 3981 y Fs(i)2677
3968 y FD(D)35 b FN(2)24 b FD(C)i FI(T)2993 3981 y Fu(0)3053
3968 y FD(C)e FJ(:)15 b(:)g(:)23 b FD(C)j FI(T)3417 3981
y Fs(i)t Fr(\000)p Fu(2)3554 3968 y FN(for)398 4085 y
FI(i)33 b FD(\025)25 b FN(2.)j(Then,)21 b(for)g FI(i)33
b FD(\025)25 b FN(2,)f FI(T)1286 4098 y Fs(i)t Fr(C)p
Fu(1)1412 4085 y FD(\000)19 b FI(T)1547 4098 y Fs(i)1600
4085 y FD(D)25 b FN(2)17 b FD(C)i FI(T)1892 4098 y Fu(0)1946
4085 y FD(C)e FJ(:)e(:)g(:)h FD(C)j FI(T)2289 4098 y
Fs(i)t Fr(\000)p Fu(1)2415 4085 y FD(\000)f FN(2)f FD(\000)i
FI(T)2700 4098 y Fu(0)2753 4085 y FD(\000)f FJ(:)d(:)g(:)h
FD(\000)j FI(T)3097 4098 y Fs(i)t Fr(\000)p Fu(2)3231
4085 y FD(D)27 b FI(T)3374 4098 y Fs(i)t Fr(\000)p Fu(1)3482
4085 y FN(,)22 b(i.e.,)401 4201 y FI(T)447 4214 y Fs(i)t
Fr(C)p Fu(1)580 4201 y FD(D)27 b FI(T)723 4214 y Fs(i)771
4201 y FD(C)21 b FI(T)908 4214 y Fs(i)t Fr(\000)p Fu(1)1017
4201 y FN(.)28 b(This)22 b(pro)o(v)o(es)h FI(T)1556 4214
y Fs(i)1608 4201 y FD(D)31 b FI(F)1760 4214 y Fs(i)t
Fr(C)p Fu(2)1868 4201 y FN(.)489 4317 y(F)o(or)20 b(the)h(second)e
(claim,)i(we)f(only)h(ha)n(v)o(e)e(to)i(observ)o(e)e(that)26
b FI(F)2369 4330 y Fs(i)t Fr(C)p Fu(2)2502 4317 y FD(\024)f
FI(n)f FN(implies)19 b FI(i)k FD(\001)14 b FN(log)o FJ(.)p
FN(1)g FD(C)3325 4242 y(p)p 3401 4242 V 75 x FN(5)o FJ(=)p
FN(2)p FJ(/)26 b FD(\024)399 4433 y FN(log)14 b FI(n)26
b FN(which)c(in)g(turn)g(implies)e FI(i)34 b FD(\024)25
b FN(1)p FJ(:)p FN(4404)15 b(log)e FI(n)t FN(.)p 3600
4379 61 4 v 3600 4433 4 54 v 3657 4433 V 3600 4436 61
4 v 489 4604 a(This)22 b(concludes)f(our)h(theoretical)f(treatment)f
(of)i(Fibonacci)f(heaps.)28 b(W)-7 b(e)21 b(ha)n(v)o(e)h(sho)n(wn)f
(the)h(follo)n(w-)399 4720 y(ing)k(time)h(bounds:)36
b(an)27 b FO(insert)h FN(and)f(a)g FO(decr)m(ease)p 1928
4720 27 4 v 19 w(k)o(e)m(y)g FN(tak)o(e)f(constant)h(amortized)e(time)i
(and)g(a)g FO(del)p 3498 4720 V 20 w(min)399 4836 y FN(tak)o(es)j
(logarithmic)f(amortized)h(time.)54 b(The)31 b(operations)f
FO(size)o FN(,)k FO(empty)o FN(,)g(and)d FO(\002ndmin)f
FN(tak)o(e)h(constant)399 4952 y(time.)489 5068 y(W)-7
b(e)22 b(no)n(w)g(return)f(to)h(the)g(implementation.)399
5293 y FP(Insertions:)43 b FN(An)20 b FO(insert)i FN(operation)e(tak)o
(es)h(a)g(k)o(e)o(y)f FI(k)26 b FN(and)21 b(an)g(information)d
FI(i)30 b FN(and)21 b(creates)f(a)h(ne)n(w)f(heap-)399
5409 y(ordered)d(tree)i(consisting)f(of)h(a)g(single)f(node)h
FD(h)p FI(k)6 b FJ(;)14 b FI(i)9 b FD(i)n FN(.)27 b(In)19
b(order)f(to)h(maintain)f(the)h(representation)e(in)l(v)n(ari-)p
eop
%%Page: 54 11
54 53 bop 399 399 a FK(54)2172 b(On)20 b(the)f(Implementation)j(of)e
(LED)m(A)399 714 y FN(ant)25 b(it)h(must)f(also)h(add)f(the)h(ne)n(w)f
(node)h(to)f(the)h(circular)f(list)h(of)f(roots,)i(increment)e
FO(number)p 3298 714 27 4 v 21 w(of)p 3400 714 V 34 w(nodes)o
FN(,)399 830 y(and)h(may)h(be)g FO(power)i FN(and)e FO(lo)o(gp)o
FN(,)i(and)e(change)g FO(minptr)h FN(if)f FI(k)33 b FN(is)27
b(smaller)f(than)h(the)g(current)g(minimum)399 946 y(k)o(e)o(y)21
b(in)h(the)g(queue.)399 1120 y FH(h)p 434 1120 25 4 v
30 w FG(f)p 487 1120 V 30 w(heap.c)p FH(i)n Fb(+)p FF(\021)489
1239 y FE(f_heap_item)39 b(f_heap::insert\(Ge)o(nPt)o(r)e(k,)43
b(GenPtr)e(i\))489 1330 y({)577 1421 y(k)i(=)g(copy_key\(k\);)577
1513 y(i)g(=)g(copy_inf\(i\);)577 1631 y(f_heap_item)c(new_item)h(=)j
(new)f(f_heap_node\(k,i,n)o(ode)o(_l)o(is)o(t\);)577
1749 y(if)g(\()i(number_of_nodes)37 b(==)43 b(0)g(\))577
1840 y({)g(//)g(insertion)c(into)j(empty)g(queue)664
1932 y(minptr)f(=)i(new_item;)664 2023 y(//)g(build)e(trivial)g
(circular)f(list)664 2114 y(new_item->right)d(=)43 b(new_item;)664
2206 y(new_item->left)38 b(=)43 b(new_item;)664 2297
y(//)g(power)e(and)h(logp)g(have)g(already)f(the)h(correct)f(value)577
2388 y(})577 2480 y(else)577 2571 y({)i(//)g(insertion)c(into)j
(non-empty)e(queue;)664 2662 y(//)j(we)f(first)g(add)g(to)h(the)f(list)
g(of)h(roots)664 2754 y(new_item->left)38 b(=)43 b(minptr;)664
2845 y(new_item->right)37 b(=)43 b(minptr->right;)664
2936 y(minptr->right->l)o(ef)o(t)37 b(=)44 b(new_item;)664
3028 y(minptr->right)38 b(=)43 b(new_item;)664 3119 y(if)g(\()g
(cmp\(k,minptr->k)o(ey\))37 b(<)43 b(0)g(\))g(minptr)e(=)j(new_item;)39
b(//)k(new)g(minimum)664 3237 y(if)g(\()g(number_of_nodes)37
b(>=)43 b(power\))e(//)i(log)f(number_of_nodes)37 b(grows)42
b(by)h(one)664 3328 y({)g(power)e(=)j(power)d(*)i(2;)751
3420 y(logp)f(=)h(logp)f(+)h(1;)664 3511 y(})577 3602
y(})577 3721 y(number_of_nodes)o(++;)577 3839 y(return)e(new_item;)489
3930 y(})399 4235 y FP(Delete)p 644 4235 27 4 v 31 w(min:)j
FN(A)29 b FO(del)p 1092 4235 V 20 w(min)g FN(operation)f(remo)o(v)o(es)
f(the)i(item)g(pointed)f(to)h(by)g FO(minptr)q FN(,)i(i.e.,)h(an)d
(item)g(of)399 4351 y(minimum)22 b FO(k)o(e)m(y)p FN(.)33
b(This)23 b(turns)g(all)h(children)f(of)g(the)h(remo)o(v)o(ed)e(node)h
(into)g(roots.)32 b(W)-7 b(e)24 b(then)f(scan)g(the)h(set)399
4467 y(of)e(roots)f(\(old)h(and)g(ne)n(w\))g(to)g(\002nd)g(the)g(ne)n
(w)f(minimum.)399 4641 y FH(h)p 434 4641 25 4 v 30 w
FG(f)p 487 4641 V 30 w(heap.c)p FH(i)n Fb(+)p FF(\021)489
4759 y FE(void)42 b(f_heap::del_min\(\))489 4851 y({)i(//)e(removes)f
(the)h(item)g(pointed)f(to)i(by)g(minptr)577 4969 y(if)f(\()i(minptr)d
(==)h(nil)h(\))664 5060 y(error_handler\(1,)o("f)o(_h)o(eap)o(:)37
b(deletion)k(from)h(empty)f(heap"\);)577 5179 y(number_of_nodes)o(--;)
577 5297 y(if)h(\()i(number_of_nodes)o(==)o(0)38 b(\))577
5388 y({)43 b(//)g(removal)d(of)j(the)f(only)g(node)664
5479 y(//)h(power)e(and)h(logp)g(do)h(not)f(have)g(to)h(be)g(changed.)p
eop
%%Page: 55 12
55 54 bop 399 399 a FK(13.10)39 b(Priority)21 b(Queues)e(by)h
(Fibonacci)g(Heaps)f(\(A)h(Complete)g(Example\))1135
b(55)664 714 y FE(clear_key\(minptr)o(->)o(ke)o(y\);)664
805 y(clear_inf\(minptr)o(->)o(in)o(f\);)664 897 y(delete)41
b(minptr;)664 988 y(minptr)g(=)i(nil;)664 1079 y(node_list)d(=)j(nil;)
664 1171 y(return;)577 1262 y(})577 1379 y(/*)f(removal)f(from)h(a)h
(queue)f(with)g(more)g(than)f(one)i(item.)e(*/)577 1496
y FH(h)p FG(turn)20 b(c)o(hildr)m(en)f(of)i(minptr)f(into)g(r)l(oots)p
FH(i)p FE(;)577 1587 y FH(h)p FG(combine)f(tr)m(ees)i(of)g(equal)e(r)o
(ank)g(and)h(compute)f(ne)o(w)h(minimum)p FH(i)o FE(;)577
1678 y FH(h)p FG(r)m(emo)o(ve)g(old)g(minimum)p FH(i)p
FE(;)489 1770 y(})489 1993 y FN(W)-7 b(e)26 b(no)n(w)g(discuss)f(the)h
(remo)o(v)n(al)f(of)h(a)g(node)g(of)g(minimum)f FO(k)o(e)m(y)h
FN(from)g(an)g FO(f)p 2880 1993 27 4 v 34 w(heap)f FN(with)h(more)g
(than)399 2109 y(one)19 b(item.)27 b(Recall)19 b(that)h
FO(number)p 1432 2109 V 21 w(of)p 1534 2109 V 34 w(nodes)f
FN(already)g(has)g(its)h(ne)n(w)f(v)n(alue.)27 b(W)-7
b(e)19 b(\002rst)h(update)f FO(power)i FN(and)399 2225
y FO(lo)o(gp)29 b FN(\(if)g(necessary\))f(and)h(then)g(turn)g(all)h
(children)e(of)h FO(minptr)i FN(into)e(roots)g(\(by)h(setting)e(their)h
(parent)399 2341 y(pointer)c(to)i(nil)f(and)g(their)g(mark)g(bit)h(to)f
(f)o(alse)g(and)h(combining)e(the)h(list)h(of)f(children)g(of)g
FO(minptr)i FN(with)399 2457 y(the)21 b(list)i(of)f(roots\).)27
b(W)-7 b(e)22 b(do)g(not)g(delete)f FO(minptr)j FN(yet.)k(It)22
b(is)g(con)l(v)o(enient)f(to)h(k)o(eep)g(it)g(as)g(a)h(sentinel.)489
2574 y(The)f(cost)g(of)g(turning)g(the)g(children)f(of)h(the)g
FO(minptr)i FN(into)e(roots)f(is)28 b FI(O)6 b FJ(.)p
FO(maxr)o(ank)q FJ(/)p FN(;)489 2690 y(Note)25 b(that)f(the)g(body)g
(of)h(the)f(loop)h(is)f(e)o(x)o(ecuted)f(for)i(each)f(child)g(of)g(the)
h(node)f FO(minptr)i FN(and)e(that,)i(in)399 2806 y(addition,)21
b(to)h(the)g(children)g(of)g FO(minptr)h FN(we)f(access)g
FO(minptr)h FN(and)f(its)g(right)g(sibling.)399 2979
y FH(h)p FG(turn)e(c)o(hildr)m(en)f(of)i(minptr)f(into)g(r)l(oots)p
FH(i)p FF(\021)489 3095 y FE(if)43 b(\()g(2)h(*)f(number_of_nodes)37
b(<=)43 b(power)e(\))489 3187 y({)j(power)d(=)i(power)f(/)h(2;)577
3278 y(logp)f(=)h(logp)f(-)h(1;)489 3369 y(})489 3486
y(f_heap_item)c(r1)k(=)g(minptr->right;)489 3578 y(f_heap_item)c(r2)k
(=)g(minptr->child;)489 3694 y(if)g(\()g(r2)g(\))489
3786 y({)h(//)e(minptr)f(has)i(children)577 3877 y(while)e(\()i
(r2->parent)d(\))577 3968 y({)j(//)86 b(visit)42 b(them)g(all)g(and)g
(make)g(them)g(roots)664 4060 y(r2->parent)d(=)k(nil;)664
4151 y(r2->marked)c(=)k(false;)664 4242 y(r2)g(=)g(r2->right;)577
4334 y(})577 4451 y(//)f(combine)f(the)h(lists,)f(i.e.)h(cut)h(r2's)f
(list)g(between)e(r2)j(and)f(its)h(left)577 4542 y(//)f(neighbor)f(and)
h(splice)f(r2)i(to)g(minptr)e(and)h(its)g(left)g(neighbor)f(to)h(r1)577
4659 y(r2->left->right)37 b(=)43 b(r1;)577 4750 y(r1->left)d(=)j
(r2->left;)577 4841 y(minptr->right)38 b(=)43 b(r2;)577
4933 y(r2->left)d(=)j(minptr;)489 5024 y(})399 5247 y
FN(The)28 b(task)g(of)h(the)f(combining)f(phase)i(is)f(to)h(combine)e
(roots)i(of)f(equal)g(rank)g(into)h(lar)n(ger)f(trees.)47
b(The)399 5363 y(combining)20 b(phase)i(uses)f(a)h(procedure)f
FO(link)i FN(which)f(combines)e(tw)o(o)i(trees)g(of)g(equal)f(rank)h
(and)f(returns)399 5479 y(the)g(resulting)h(tree.)p eop
%%Page: 56 13
56 55 bop 399 399 a FK(56)2172 b(On)20 b(the)f(Implementation)j(of)e
(LED)m(A)399 714 y FH(h)p 434 714 25 4 v 30 w FG(f)p
487 714 V 30 w(heap.c)p FH(i)n Fb(+)p FF(\021)489 833
y FE(f_heap_item)39 b(f_heap::link\(f_he)o(ap_)o(it)o(em)e(r1,)42
b(f_heap_item)d(r2\))489 924 y({)577 1015 y(//)j(r1)h(and)f(r2)h(are)g
(roots)e(of)i(equal)e(rank,)h(both)g(different)e(from)i(minptr;)577
1107 y(//)g(the)h(two)f(trees)g(are)g(combined)e(and)j(the)f(resulting)
e(tree)i(is)g(returned.)577 1225 y(f_heap_item)d(h1;)577
1317 y(f_heap_item)g(h2;)577 1435 y(if)j(\(cmp\(r1->inf,r2->)o(in)o
(f\))37 b(<=)43 b(0\))620 1527 y({)g(//)g(r2)g(becomes)e(a)i(child)e
(of)i(r1)707 1618 y(h1)g(=)g(r1;)707 1709 y(h2)g(=)g(r2;)620
1801 y(})620 1892 y(else)620 1983 y({)g(//)g(r1)g(becomes)e(a)i(child)e
(of)i(r2)707 2075 y(h1)g(=)g(r2;)707 2166 y(h2)g(=)g(r1;)620
2257 y(})577 2376 y(//)f(we)h(now)f(make)g(h2)h(a)g(child)f(of)h(h1.)f
(We)h(first)e(remove)g(h2)i(from)577 2467 y(//)f(the)h(list)f(of)g
(roots.)577 2586 y(h2->left->right)37 b(=)43 b(h2->right;)577
2677 y(h2->right->left)37 b(=)43 b(h2->left;)577 2796
y(/*)f(we)h(next)f(add)g(h2)h(into)f(the)g(circular)f(list)h(of)g
(children)f(of)h(h1)h(*/)577 2915 y(if)f(\()i(h1->child)39
b(==)k(nil)f(\))577 3006 y({)h(//)g(h1)f(has)h(no)f(children)f(yet;)h
(so)g(we)h(make)f(h2)h(its)f(only)g(child)664 3098 y(h1->child)e(=)j
(h2;)664 3189 y(h2->left)d(=)j(h2;)664 3280 y(h2->right)d(=)j(h2;)577
3372 y(})577 3463 y(else)577 3554 y({)g(//)g(add)f(h2)h(to)f(the)h
(list)f(of)g(children)f(of)h(h1)664 3646 y(h2->left)e(=)j(h1->child;)
664 3737 y(h2->right)d(=)j(h1->child->right)o(;)664 3828
y(h1->child->right)o(->)o(le)o(ft)37 b(=)43 b(h2;)664
3919 y(h1->child->right)37 b(=)43 b(h2;)577 4011 y(})577
4130 y(h2->parent)c(=)k(h1;)577 4221 y(h1->rank++;)577
4340 y(return)e(h1;)489 4431 y(})399 4630 y FN(Let')-5
b(s)17 b(not)h(for)n(get)g(to)g(add)g(the)g(declaration)f(of)h(link)g
(to)g(the)g(set)g(of)g(auxiliary)f(functions)g(of)h FO(class)k(f)p
3435 4630 27 4 v 34 w(heap)o FN(.)399 4804 y FH(h)p FG(auxiliary)e
(functions)p FH(i)n FF(\021)489 4923 y FE(f_heap_item)39
b(link\(f_heap_item,)e(f_heap_item\);)399 5122 y FN(Ne)o(xt)23
b(comes)g(the)h(code)g(to)g(combine)g(trees)f(of)i(equal)e(rank.)34
b(The)24 b(task)g(is)g(to)g(step)g(through)g(the)g(list)g(of)399
5239 y(old)g(and)g(ne)n(w)f(roots,)i(to)f(combine)g(roots)f(of)i(equal)
e(rank,)i(and)f(to)g(determine)f(the)i(node)e(of)i(minimum)399
5355 y(k)o(e)o(y)-6 b(.)56 b(W)-7 b(e)31 b(solv)o(e)g(this)g(task)h
(iterati)n(v)o(ely)-6 b(.)55 b(W)-7 b(e)31 b(maintain)g(an)h(array)f
FO(r)o(ank)p 2726 5355 V 21 w(arr)o(ay)g FN(of)g(length)g
FO(maxr)o(ank)399 5471 y FN(of)f(pointers)f(to)i(roots:)43
b FO(r)o(ank)p 1331 5471 V 21 w(arr)o(ay)o FN([)o FI(i)9
b FN(])30 b(points)g(to)h(a)f(root)g(of)g(rank)f FI(i)9
b FN(,)33 b(if)e(an)o(y)f(and)g(to)g FO(nil)g FN(otherwise.)p
eop
%%Page: 57 14
57 56 bop 399 399 a FK(13.10)39 b(Priority)21 b(Queues)e(by)h
(Fibonacci)g(Heaps)f(\(A)h(Complete)g(Example\))1135
b(57)399 714 y FN(Initially)30 b(all)h(entries)g(point)g(to)g
FO(nil)p FN(.)56 b(When)30 b(a)i(root)f(of)g(rank)e FI(r)41
b FN(is)31 b(inspected)f(and)h FO(r)o(ank)p 3241 714
27 4 v 21 w(arr)o(ay)o FN([)n FI(r)9 b FN(])32 b(is)399
830 y FO(nil)o FN(,)f(store)25 b FI(r)38 b FN(there.)45
b(If)29 b(it)f(is)g(non-empty)-6 b(,)29 b(combine)c FI(r)38
b FN(with)28 b(the)g(array)f(entry)h(and)g(replace)d
FI(r)38 b FN(by)28 b(the)399 946 y(combined)23 b(tree.)34
b(The)24 b(combined)f(tree)h(has)g(rank)g(one)h(higher)-5
b(.)34 b(W)-7 b(e)23 b(declare)h FO(r)o(ank)p 3017 946
V 21 w(arr)o(ay)g FN(as)g(an)g(array)399 1063 y(of)32
b(length)f(12)20 b FD(\003)f FO(sizeof)13 b FJ(.)p FO(int)q
FJ(/)q FN(.)58 b(This)31 b(is)i(a)f(sa)n(v)o(e)f(choice)h(since)f(the)h
(number)f(of)h(nodes)g(in)g(a)g(heap)g(is)399 1179 y(certainly)25
b(bounded)g(by)h FO(MAXINT)38 b FD(D)33 b FN(2)1701 1146
y Fu(8)p Fr(\003)p Fa(s)p Fs(i)5 b(z)s(e)q(o)h(f)13 b
Ft(.)p Fs(i)t(n)r(t)6 b Ft(/)2072 1179 y FN(.)41 b(Hence)25
b FO(maxr)o(ank)33 b FD(\024)f FN(1)p FJ(:)p FN(5)22
b FD(\003)h FN(log)o FJ(.)p FO(MAXINT)6 b FJ(/)33 b FD(D)399
1295 y FN(12)19 b FD(\003)h FO(sizeof)12 b FJ(.)p FO(int)r
FJ(/)p FN(.)489 1411 y(There)25 b(is)g(a)h(small)e(subtlety)h(in)g(the)
g(follo)n(wing)f(piece)h(of)g(code.)36 b(W)-7 b(e)25
b(are)g(running)f(o)o(v)o(er)h(the)g(list)g(of)399 1528
y(roots)30 b(and)g(simultaneously)f(modifying)g(it.)53
b(This)31 b(is)f(potentially)f(dangerous,)j(b)n(ut)f(our)f(strate)o(gy)
g(is)399 1644 y(safe.)41 b(Imagine)26 b(the)h(list)f(of)h(roots)g(dra)o
(wn)e(with)i(the)f FO(minptr)j FN(at)e(the)f(f)o(ar)h(right.)41
b(Then)27 b FO(curr)m(ent)g FN(points)399 1760 y(to)h(the)g(leftmost)g
(element)g(initially)-6 b(.)47 b(At)28 b(a)h(general)e(step)i(of)f(the)
h(iteration)e FO(curr)m(ent)i FN(points)g(at)f(some)399
1876 y(arbitrary)23 b(list)i(element.)34 b(All)24 b(modi\002cations)f
(of)i(the)f(list)h(by)f(calls)h(of)f FO(link)i FN(tak)o(e)e(place)g
(strictly)g(to)h(the)399 1993 y(left)k(of)g FO(curr)m(ent)q
FN(.)50 b(F)o(or)29 b(this)g(reason)g(it)h(is)f(important)g(to)g(adv)n
(ance)f FO(curr)m(ent)i FN(at)g(the)f(be)o(ginning)f(of)i(the)399
2109 y(loop.)399 2283 y FH(h)p FG(combine)19 b(tr)m(ees)i(of)f(equal)g
(r)o(ank)f(and)h(compute)f(ne)o(w)h(minimum)p FH(i)o
FF(\021)489 2402 y FE(f_heap_item)39 b(rank_array[12*siz)o(eof)o(\(i)o
(nt\))o(];)489 2493 y(for)k(\(int)f(i)h(=)g(\(int\)1.5*logp;)38
b(i)43 b(>=)g(0;)g(i--\))e(rank_array[i])e(=)k(nil;)489
2612 y(f_heap_item)c(new_min)i(=)i(minptr->right;)489
2703 y(f_heap_item)c(current)i(=)i(new_min;)489 2822
y(while)f(\(current)e(!=)j(minptr\))489 2913 y({)h(//)e(old)h(min)f(is)
h(used)f(as)g(a)i(sentinel)577 3005 y(r1)e(=)i(current;)577
3096 y(int)e(rank)g(=)h(r1->rank;)577 3187 y(//)f(it's)g(important)e
(to)j(advance)e(current)f(already)h(here)577 3279 y(current)f(=)j
(current->right;)577 3397 y(while)e(\(r2)h(=)i(rank_array[rank)o(]\))
577 3489 y({)f(rank_array[rank])37 b(=)43 b(nil;)664
3580 y(//)g(link)e(combines)g(trees)g(r1)i(and)f(r2)h(into)f(a)h(tree)f
(of)h(rank)f(one)g(higher)664 3671 y(r1)h(=)g(link\(r1,r2\);)664
3763 y(rank++;)577 3854 y(})577 3945 y(rank_array[rank)o(])38
b(=)43 b(r1;)577 4037 y(if)f(\()i(cmp\(r1->inf,new)o(_m)o(in-)o(>i)o
(nf\))37 b(<=)43 b(0)g(\))g(new_min)e(=)i(r1;)489 4128
y(})399 4355 y FN(W)-7 b(e)25 b(complete)g(the)g(operation)g(by)h
(actually)f(deleting)g(the)h(old)g(minimum)f(and)g(setting)g
FO(minptr)j FN(to)e(its)399 4471 y(ne)n(w)21 b(v)n(alue.)399
4645 y FH(h)p FG(r)m(emo)o(ve)f(old)g(minimum)p FH(i)o
FF(\021)489 4764 y FE(minptr->left->rig)o(ht)37 b(=)43
b(minptr->right;)489 4855 y(minptr->right->le)o(ft)37
b(=)43 b(minptr->left;)489 4974 y(clear_key\(minptr-)o(>ke)o(y\))o(;)
489 5065 y(clear_inf\(minptr-)o(>in)o(f\))o(;)489 5184
y(r1)g(=)g(minptr->pred;)489 5275 y(r2)g(=)g(minptr->next;)489
5367 y(if)g(\(r2\))f(r2->pred)e(=)k(r1;)p eop
%%Page: 58 15
58 57 bop 399 399 a FK(58)2172 b(On)20 b(the)f(Implementation)j(of)e
(LED)m(A)489 714 y FE(if)43 b(\(r1\))f(r1->next)e(=)k(r2;)e(else)g
(node_list)e(=)j(r2;)489 833 y(delete)f(minptr;)489 951
y(minptr)g(=)h(new_min;)399 1259 y FP(Decr)n(ease)p 747
1259 27 4 v 31 w(k)o(ey)-5 b(,)18 b(Clear)-8 b(,)17 b(and)g(Del)p
1485 1259 V 32 w(item:)44 b FO(decr)m(ease)p 2067 1259
V 19 w(k)o(e)m(y)16 b FN(mak)o(es)h(use)f(of)h(an)g(auxiliary)e
(function)h FO(cut)q FJ(.)r FI(x)8 b FJ(/)399 1375 y
FN(that)21 b(turns)h(a)g(non-root)g(node)h FI(x)31 b
FN(into)22 b(a)g(root)g(and)g(returns)f(its)h(old)g(parent.)399
1549 y FH(h)p FG(auxiliary)e(functions)p FH(i)n Fb(+)p
FF(\021)489 1668 y FE(f_heap_item)39 b(cut\(f_heap_item\);)399
1870 y FH(h)p 434 1870 25 4 v 30 w FG(f)p 487 1870 V
30 w(heap.c)p FH(i)n Fb(+)p FF(\021)489 1988 y FE(f_heap_item)g
(f_heap::cut\(f_hea)o(p_i)o(te)o(m)f(x\))489 2080 y({)577
2171 y(f_heap_item)h(y)k(=)g(x->parent;)577 2290 y(if)f(\()i(y->rank)c
(==)j(1)g(\))g(y->child)e(=)i(nil;)85 b(//)43 b(only)f(child)577
2381 y(else)577 2472 y({)h(/*)g(y)g(has)f(more)g(than)g(one)g(child.)f
(We)i(first)f(make)g(sure)f(that)h(its)h(childptr)795
2564 y(does)e(not)i(point)e(to)i(x)g(and)g(then)f(delete)f(x)i(from)f
(the)g(list)g(of)h(children)d(*/)664 2655 y(if)j(\()g(y->child)d(==)j
(x)g(\))g(y->child)d(=)k(x->right;)664 2746 y(x->left->right)38
b(=)43 b(x->right;)664 2838 y(x->right->left)38 b(=)43
b(x->left;)577 2929 y(})577 3048 y(y->rank--;)577 3139
y(x->parent)c(=)44 b(nil;)577 3230 y(x->marked)39 b(=)44
b(false;)577 3349 y(//)e(add)h(to)f(circular)f(list)h(of)g(roots)577
3440 y(x->left)e(=)j(minptr;)577 3532 y(x->right)d(=)j(minptr->right;)
577 3623 y(minptr->right->)o(lef)o(t)37 b(=)43 b(x;)577
3714 y(minptr->right)38 b(=)43 b(x;)577 3833 y(return)e(y;)489
3924 y(})399 4151 y FN(No)n(w)21 b(we)h(can)g(gi)n(v)o(e)f(the)h
(implementation)e(of)i FO(decr)m(ease)p 2165 4151 27
4 v 19 w(k)o(e)m(y)p FN(.)399 4325 y FH(h)p 434 4325
25 4 v 30 w FG(f)p 487 4325 V 30 w(heap.c)p FH(i)n Fb(+)p
FF(\021)489 4444 y FE(void)42 b(f_heap::decrease_)o(ke)o(y\(f)o(_h)o
(eap)o(_i)o(tem)37 b(v,)42 b(GenPtr)g(newkey\))489 4536
y({)577 4627 y(/*)g(changes)f(the)h(key)h(of)f(f_heap_item)e(v)j(to)f
(newkey;)707 4718 y(newkey)f(must)h(be)h(no)g(larger)e(than)h(the)g
(old)h(key;)707 4809 y(if)g(newkey)e(is)i(no)g(larger)e(than)h(the)g
(minimum)f(key)707 4901 y(then)h(v)h(becomes)e(the)h(target)g(of)g(the)
h(minptr)84 b(*/)577 5020 y(if)42 b(\(cmp\(newkey,v->ke)o(y\))37
b(>)43 b(0\))664 5111 y(error_handler\(1,)o("f)o(_h)o(eap)o(:)37
b(key)43 b(too)f(large)g(in)g(decrease_key."\);)577 5230
y(//)g(change)f(v's)i(key)577 5321 y(clear_key\(v->ke)o(y\);)577
5412 y(v->key)e(=)i(copy_key\(newkey\))o(;)p eop
%%Page: 59 16
59 58 bop 399 399 a FK(13.10)39 b(Priority)21 b(Queues)e(by)h
(Fibonacci)g(Heaps)f(\(A)h(Complete)g(Example\))1135
b(59)577 714 y FE(if)42 b(\()i(v->parent)39 b(\))577
805 y({)k(f_heap_item)c(x)k(=)g(cut\(v\);)433 b(//)43
b(make)f(v)h(a)g(root)664 897 y(while)e(\(x->marked\))e(x)k(=)h
(cut\(x\);)171 b(//)43 b(a)g(marked)e(f_heap_node)2102
988 y(//)i(is)g(a)g(non-root)664 1079 y(if)g(\(x->parent\))c(x->marked)
g(=)44 b(true;)d(//)i(mark)f(x)h(if)g(it)f(not)h(a)g(root)577
1171 y(})577 1289 y(//)f(update)f(minptr)h(\(if)g(necessary\))577
1381 y(if)g(\(cmp\(newkey,minpt)o(r-)o(>ke)o(y\))37 b(<=)43
b(0\))g(minptr)e(=)i(v;)489 1472 y(})489 1699 y FN(T)-7
b(o)26 b(clear)g(a)g(heap)g(simply)f(remo)o(v)o(e)g(the)h(minimum)f
(until)h(the)g(heap)g(is)g(empty)-6 b(.)39 b(The)26 b(cost)g(of)g
FO(clear)399 1815 y FN(is)e(bounded)g(by)g FI(n)29 b
FN(times)24 b(the)h(cost)f(of)h FO(del)p 1732 1815 27
4 v 20 w(min)p FN(.)35 b(W)-7 b(e)25 b(can)f(also)g(use)h
FO(clear)h FN(as)f(the)f(destructor)f(of)i(class)399
1931 y FO(f)p 431 1931 V 33 w(heap)o FN(.)399 2105 y
FH(h)p 434 2105 25 4 v 30 w FG(f)p 487 2105 V 30 w(heap.c)p
FH(i)n Fb(+)p FF(\021)489 2224 y FE(void)130 b(f_heap::clear\(\))80
b({)44 b(while)d(\(number_of_nodes)c(>)43 b(0\))g(del_min\(\);)d(})489
2343 y(f_heap::~f_heap\(\))d({)43 b(clear\(\);)d(})489
2570 y FN(T)-7 b(o)27 b(remo)o(v)o(e)f(an)i(arbitrary)e(item)h(from)g
(a)g(heap,)i(we)e(\002rst)g(decrease)f(its)i FO(k)o(e)m(y)f
FN(to)h(the)f(minimum)f(k)o(e)o(y)399 2686 y(\(this)g(mak)o(es)g(the)h
(item)f(the)h(tar)n(get)f(of)h(the)f FO(minptr)r FN(\))g(and)h(then)f
(remo)o(v)o(e)g(the)g(minimum.)41 b(The)26 b(cost)h(of)399
2802 y(remo)o(ving)22 b(an)j(item)f(is)g(therefore)f(bounded)h(by)30
b FI(O)6 b FJ(.)p FN(1)p FJ(/)26 b FN(plus)e(the)g(cost)g(of)g
FO(decr)m(ease)p 3040 2802 27 4 v 19 w(k)o(e)m(y)h FN(plus)f(the)g
(cost)399 2918 y(of)e FO(del)p 600 2918 V 20 w(min)o
FN(.)399 3093 y FH(h)p 434 3093 25 4 v 30 w FG(f)p 487
3093 V 30 w(heap.c)p FH(i)n Fb(+)p FF(\021)489 3211 y
FE(void)42 b(f_heap::del_item\()o(f_)o(hea)o(p_)o(ite)o(m)37
b(x\))489 3303 y({)44 b(decrease_key\(x,)o(min)o(pt)o(r-)o(>ke)o(y\))o
(;)212 b(//)43 b(the)f(minptr)f(now)h(points)g(to)g(x)577
3394 y(del_min\(\);)489 3485 y(})399 3792 y FP(Assignment,)23
b(Iteration,)g(and)h(Copy)f(Constructor:)43 b FN(Ne)o(xt)23
b(comes)g(the)g(assignment)g(operator.)32 b(In)399 3909
y(order)20 b(to)h(e)o(x)o(ecute)j FI(S)51 b FD(D)j FI(H)30
b FN(we)21 b(simply)f(step)h(through)f(all)h(the)f(items)h(of)28
b FI(H)i FN(and)21 b(insert)f(their)h(k)o(e)o(y)f(and)399
4025 y(information)g(into)27 b FI(S)t FN(.)h(W)-7 b(e)22
b(must)f(guard)h(against)f(the)h(tri)n(vial)f(assignment)28
b FI(H)57 b FD(D)d FI(H)9 b FN(.)399 4199 y FH(h)p 434
4199 V 30 w FG(f)p 487 4199 V 30 w(heap.c)p FH(i)n Fb(+)p
FF(\021)489 4318 y FE(f_heap&)41 b(f_heap::operator)o(=\(c)o(on)o(st)c
(f_heap&)k(H\))489 4409 y({)j(if)e(\(this)g(!=)h(&H\))577
4501 y({)g(clear\(\);)664 4592 y(for)f(\(f_heap_item)d(p)k(=)g
(H.first_item\(\);)37 b(p;)43 b(p)g(=)h(H.next_item\(p\)\))751
4683 y(insert\(p->key,p-)o(>i)o(nf\))o(;)577 4775 y(})577
4866 y(return)d(*this;)489 4957 y(})399 5184 y FN(The)17
b(assignment)g(operator)g(mak)o(es)h(use)g(of)g(the)g(tw)o(o)g
(functions)f FO(\002r)o(st)p 2539 5184 27 4 v 22 w(item)h
FN(and)g FO(ne)n(xt)p 3030 5184 V 22 w(item)o FN(.)27
b(The)o(y)17 b(allo)n(w)399 5300 y(us)28 b(to)h(iterate)f(o)o(v)o(er)g
(all)h(items)f(of)h(a)g(heap.)47 b(W)-7 b(e)29 b(use)f(these)h
(functions)f(in)h(the)f(assignment)g(operator)l(,)399
5416 y(the)k(cop)o(y)g(constructor)l(,)i(and)e(the)g
FO(for)o(all)p 1701 5416 V 20 w(items)o FN(-iteration.)58
b(The)32 b(last)g(use)g(forces)f(us)i(to)f(mak)o(e)g(both)p
eop
%%Page: 60 17
60 59 bop 399 399 a FK(60)2172 b(On)20 b(the)f(Implementation)j(of)e
(LED)m(A)399 714 y FN(functions)j(public)g(members)g(of)h(the)g(class.)
34 b(Ho)n(we)n(v)o(er)l(,)23 b(we)h(do)g(not)g(list)h(them)e(in)h(the)g
(manual)g(and)g(so)399 830 y(the)o(y)d(are)h(only)g(semi-public.)28
b(F)o(or)21 b(this)i(reason)e FO(ne)n(xt)p 2060 830 27
4 v 22 w(item)h FN(does)g(not)g(check)g(whether)g(its)g(ar)n(gument)g
(is)399 946 y(distinct)f(from)h FO(nil)o FN(.)399 1121
y FH(h)p 434 1121 25 4 v 30 w FG(f)p 487 1121 V 30 w(heap.c)p
FH(i)n Fb(+)p FF(\021)489 1240 y FE(f_heap_item)39 b(f_heap::first_ite)
o(m\(\))e(const)k({)i(return)f(node_list;)d(})489 1358
y(f_heap_node*)g(f_heap::next_ite)o(m\(f)o(_h)o(eap)o(_n)o(od)o(e*)e
(p\))43 b(const)1928 1450 y({)g(return)e(p)i(?)g(p->next)e(:)i(0;)g(})
489 1676 y FN(The)23 b(last)g(operation)f(to)h(implement)f(is)h(the)g
(cop)o(y)g(constructor)-5 b(.)29 b(It)23 b(mak)o(es)f(a)i(cop)o(y)e(of)
h(its)g(ar)n(gument)406 1792 y FI(H)9 b FN(.)36 b(The)25
b(strate)o(gy)f(is)h(simple.)35 b(F)o(or)25 b(each)f(item)h(of)32
b FI(H)i FN(we)25 b(create)f(a)h(single)g(node)f(tree)h(with)f(the)h
(same)399 1909 y(k)o(e)o(y)c(and)h(information.)489 2025
y(There)27 b(is)h(a)f(subtle)g(point)g(in)h(the)f(implementation.)42
b(When)27 b(a)h(virtual)e(function)h(is)h(applied)e(to)i(an)399
2141 y(object)f(under)g(construction)g(then)g(the)h(def)o(ault)g
(implementation)e(of)i(the)f(function)g(is)h(used)g(and)g(not)399
2257 y(the)23 b(o)o(v)o(erriding)f(de\002nition)h(in)h(the)g(deri)n(v)o
(ed)f(class.)33 b(It)24 b(is)g(therefore)e(important)h(in)h(the)g(code)
f(belo)n(w)h(to)399 2374 y(call)d(the)h(virtual)f(functions)g
FO(copy)p 1458 2374 27 4 v 20 w(k)o(e)m(y)p FN(,)h FO(copy)p
1808 2374 V 20 w(inf)35 b FN(and)22 b FO(cmp)f FN(through)g(the)h
(already)f(e)o(xisting)g(object)28 b FI(H)9 b FN(;)399
2490 y(lea)n(ving)21 b(out)h(the)g(pre\002x)29 b FI(H)r
FJ(:)21 b FN(w)o(ould)h(select)f(the)h(def)o(ault)g(de\002nitions)f
(\(which)g(do)h(not)g(do)g(an)o(ything\).)399 2664 y
FH(h)p 434 2664 25 4 v 30 w FG(f)p 487 2664 V 30 w(heap.c)p
FH(i)n Fb(+)p FF(\021)489 2783 y FE(f_heap::f_heap\(co)o(nst)37
b(f_heap&)j(H\))489 2874 y({)k(number_of_nodes)37 b(=)43
b(H.size\(\);)577 2966 y(minptr)e(=)i(nil;)577 3057 y(node_list)c(=)44
b(nil;)577 3176 y(f_heap_item)39 b(first_node)g(=)k(nil;)577
3294 y(for\(f_heap_item)37 b(p)43 b(=)g(H.first_item\(\);)38
b(p;)k(p)i(=)f(H.next_item\(p\)\))577 3386 y({)g(GenPtr)e(k)i(=)g
(H.copy_key\(p->key)o(\);)664 3477 y(GenPtr)e(i)i(=)g
(H.copy_inf\(p->inf)o(\);)664 3568 y(f_heap_item)c(q)k(=)g(new)f
(f_heap_node\(k,i,n)o(ode)o(_l)o(ist)o(\);)664 3660 y(q->right)e(=)j
(node_list->next;)664 3751 y(if)g(\(node_list->nex)o(t\))37
b(node_list->next-)o(>le)o(ft)g(=)43 b(q;)664 3842 y(if)g(\(minptr)d
(==)j(nil\))f({)h(minptr)e(=)i(q;)g(first_node)d(=)j(q;)f(})664
3934 y(else)g(if)g(\()i(H.cmp\(k,minptr-)o(>ke)o(y\))37
b(<)43 b(0)g(\))g(minptr)f(=)h(q;)577 4025 y(})577 4116
y(first_node->rig)o(ht)37 b(=)43 b(node_list;)577 4208
y(node_list->left)37 b(=)43 b(first_node;)489 4299 y(})p
eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
